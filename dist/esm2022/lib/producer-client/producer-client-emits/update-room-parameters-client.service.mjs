/* eslint-disable @typescript-eslint/no-non-null-assertion */
// room.service.ts
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../methods/utils/producer/video-capture-constraints.service";
import * as i2 from "../../methods/utils/producer/h-params.service";
import * as i3 from "../../methods/utils/producer/v-params.service";
import * as i4 from "../../methods/utils/producer/screen-params.service";
import * as i5 from "../../methods/utils/producer/a-params.service";
export class UpdateRoomParametersClient {
    videoCaptureConstraints;
    hParams;
    vParams;
    screenParams;
    aParams;
    constructor(videoCaptureConstraints, hParams, vParams, screenParams, aParams) {
        this.videoCaptureConstraints = videoCaptureConstraints;
        this.hParams = hParams;
        this.vParams = vParams;
        this.screenParams = screenParams;
        this.aParams = aParams;
    }
    /**
     * Update Room Parameters Client after the user has joined the room and the room parameters have been received from the server.
     * @param {Object} parameters - An object containing various parameters and update functions.
     */
    updateRoomParametersClient = ({ parameters }) => {
        try {
            const { screenPageLimit, shareScreenStarted, shared, hParams, vParams, frameRate, islevel, showAlert, data, 
            //updates
            updateRtpCapabilities, updateRoomRecvIPs, updateMeetingRoomParams, updateItemPageLimit, updateAudioOnlyRoom, updateScreenPageLimit, updateVidCons, updateFrameRate, updateAdminPasscode, updateEventType, updateYouAreCoHost, updateAutoWave, updateForceFullDisplay, updateChatSetting, updateMeetingDisplayType, updateAudioSetting, updateVideoSetting, updateScreenshareSetting, updateHParams, updateVParams, updateScreenParams, updateAParams, updateTargetResolution, updateTargetResolutionHost, 
            // Recording updates
            updateRecordingAudioPausesLimit, updateRecordingAudioPausesCount, updateRecordingAudioSupport, updateRecordingAudioPeopleLimit, updateRecordingAudioParticipantsTimeLimit, updateRecordingVideoPausesCount, updateRecordingVideoPausesLimit, updateRecordingVideoSupport, updateRecordingVideoPeopleLimit, updateRecordingVideoParticipantsTimeLimit, updateRecordingAllParticipantsSupport, updateRecordingVideoParticipantsSupport, updateRecordingAllParticipantsFullRoomSupport, updateRecordingVideoParticipantsFullRoomSupport, updateRecordingPreferredOrientation, updateRecordingSupportForOtherOrientation, updateRecordingMultiFormatsSupport, updateRecordingVideoOptions, updateRecordingAudioOptions, updateMainHeightWidth, } = parameters;
            if (data.rtpCapabilities == null) {
                let reason = data.reason || '';
                showAlert?.({
                    message: 'Sorry, you are not allowed to join this room. ' + reason,
                    type: 'danger',
                    duration: 3000,
                });
                return;
            }
            // Update all values
            updateRtpCapabilities(data.rtpCapabilities);
            updateAdminPasscode(data.secureCode);
            updateRoomRecvIPs(data.roomRecvIPs);
            updateMeetingRoomParams(data.meetingRoomParams);
            // Update recording values
            updateRecordingAudioPausesLimit(data.recordingParams.recordingAudioPausesLimit);
            updateRecordingAudioPausesCount(data.recordingParams.recordingAudioPausesCount);
            updateRecordingAudioSupport(data.recordingParams.recordingAudioSupport);
            updateRecordingAudioPeopleLimit(data.recordingParams.recordingAudioPeopleLimit);
            updateRecordingAudioParticipantsTimeLimit(data.recordingParams.recordingAudioParticipantsTimeLimit);
            updateRecordingVideoPausesCount(data.recordingParams.recordingVideoPausesCount);
            updateRecordingVideoPausesLimit(data.recordingParams.recordingVideoPausesLimit);
            updateRecordingVideoSupport(data.recordingParams.recordingVideoSupport);
            updateRecordingVideoPeopleLimit(data.recordingParams.recordingVideoPeopleLimit);
            updateRecordingVideoParticipantsTimeLimit(data.recordingParams.recordingVideoParticipantsTimeLimit);
            updateRecordingAllParticipantsSupport(data.recordingParams.recordingAllParticipantsSupport);
            updateRecordingVideoParticipantsSupport(data.recordingParams.recordingVideoParticipantsSupport);
            updateRecordingAllParticipantsFullRoomSupport(data.recordingParams.recordingAllParticipantsFullRoomSupport);
            updateRecordingVideoParticipantsFullRoomSupport(data.recordingParams.recordingVideoParticipantsFullRoomSupport);
            updateRecordingPreferredOrientation(data.recordingParams.recordingPreferredOrientation);
            updateRecordingSupportForOtherOrientation(data.recordingParams.recordingSupportForOtherOrientation);
            updateRecordingMultiFormatsSupport(data.recordingParams.recordingMultiFormatsSupport);
            // Update other meeting room settings
            updateItemPageLimit(data.meetingRoomParams.itemPageLimit);
            updateEventType(data.meetingRoomParams.type);
            if (data.meetingRoomParams.type == 'chat' && islevel != '2') {
                updateYouAreCoHost(true);
            }
            if (['chat', 'broadcast'].includes(data.meetingRoomParams.type)) {
                updateAutoWave(false);
                updateMeetingDisplayType('all');
                updateForceFullDisplay(true);
                updateChatSetting('allow');
            }
            updateAudioSetting(data.meetingRoomParams.audioSetting);
            updateVideoSetting(data.meetingRoomParams.videoSetting);
            updateScreenshareSetting(data.meetingRoomParams.screenshareSetting);
            updateChatSetting(data.meetingRoomParams.chatSetting);
            updateAudioOnlyRoom(data.meetingRoomParams.mediaType != 'video');
            if (data.meetingRoomParams.type == 'chat' || data.meetingRoomParams.type == 'broadcast') {
                if (data.meetingRoomParams.type == 'broadcast') {
                    updateItemPageLimit(1);
                    updateRecordingVideoOptions('mainScreen');
                    updateRecordingAudioOptions('host');
                }
                else {
                    updateItemPageLimit(2);
                }
            }
            if (data.meetingRoomParams.type == 'conference' && (shared || shareScreenStarted)) {
                updateMainHeightWidth(100);
            }
            else {
                updateMainHeightWidth(0);
            }
            updateScreenPageLimit(Math.min(data.meetingRoomParams.itemPageLimit, screenPageLimit));
            // Assign media capture constraints based on the user's role and room settings
            let targetOrientation = islevel == '2'
                ? data.meetingRoomParams.targetOrientationHost
                : data.meetingRoomParams.targetOrientation;
            let targetResolution = islevel == '2'
                ? data.meetingRoomParams.targetResolutionHost
                : data.meetingRoomParams.targetResolution;
            let vidCons;
            if (targetOrientation == 'landscape') {
                vidCons =
                    targetResolution == 'hd'
                        ? this.videoCaptureConstraints.hdCons
                        : targetResolution == 'QnHD'
                            ? this.videoCaptureConstraints.QnHDCons
                            : targetResolution == 'fhd'
                                ? this.videoCaptureConstraints.fhdCons
                                : targetResolution == 'qhd'
                                    ? this.videoCaptureConstraints.qhdCons
                                    : this.videoCaptureConstraints.sdCons;
            }
            else if (targetOrientation == 'neutral') {
                vidCons =
                    targetResolution == 'hd'
                        ? this.videoCaptureConstraints.hdConsNeu
                        : targetResolution == 'QnHD'
                            ? this.videoCaptureConstraints.QnHDConsNeu
                            : targetResolution == 'fhd'
                                ? this.videoCaptureConstraints.fhdConsNeu
                                : targetResolution == 'qhd'
                                    ? this.videoCaptureConstraints.qhdConsNeu
                                    : this.videoCaptureConstraints.sdConsNeu;
            }
            else {
                vidCons =
                    targetResolution == 'hd'
                        ? this.videoCaptureConstraints.hdConsPort
                        : targetResolution == 'QnHD'
                            ? this.videoCaptureConstraints.QnHDConsPort
                            : targetResolution == 'fhd'
                                ? this.videoCaptureConstraints.fhdConsPort
                                : targetResolution == 'qhd'
                                    ? this.videoCaptureConstraints.qhdConsPort
                                    : this.videoCaptureConstraints.sdConsPort;
            }
            let frameRateValue = frameRate ? frameRate : 10;
            let vParamsValue = { ...vParams };
            let hParamsValue = { ...hParams };
            if (Object.keys(vParamsValue).length === 0) {
                vParamsValue = this.vParams.vParams;
            }
            if (Object.keys(hParamsValue).length === 0) {
                hParamsValue = this.hParams.hParams;
            }
            if (targetResolution == 'hd') {
                frameRateValue = this.videoCaptureConstraints.hdFrameRate;
                vParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 4);
                });
                hParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 4);
                });
            }
            else if (targetResolution == 'QnHD') {
                frameRateValue = this.videoCaptureConstraints.QnHDFrameRate;
                vParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 0.25);
                });
                hParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 0.25);
                });
                hParamsValue.codecOptions.videoGoogleStartBitrate *= 0.25;
                vParamsValue.codecOptions.videoGoogleStartBitrate *= 0.25;
            }
            else if (targetResolution == 'fhd') {
                frameRateValue = this.videoCaptureConstraints.fhdFrameRate;
                vParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 8);
                });
                hParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 8);
                });
                hParamsValue.codecOptions.videoGoogleStartBitrate *= 8;
                vParamsValue.codecOptions.videoGoogleStartBitrate *= 8;
            }
            else if (targetResolution == 'qhd') {
                frameRateValue = this.videoCaptureConstraints.qhdFrameRate;
                vParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 16);
                });
                hParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 16);
                });
                hParamsValue.codecOptions.videoGoogleStartBitrate *= 16;
                vParamsValue.codecOptions.videoGoogleStartBitrate *= 16;
            }
            if (data.recordingParams.recordingVideoSupport) {
                vParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 1.2);
                });
                hParamsValue.encodings.forEach((encoding) => {
                    encoding.maxBitrate && (encoding.maxBitrate *= 1.2);
                });
                hParamsValue.codecOptions.videoGoogleStartBitrate *= 1.2;
                vParamsValue.codecOptions.videoGoogleStartBitrate *= 1.2;
            }
            updateVidCons(vidCons);
            updateFrameRate(frameRateValue);
            updateHParams(hParamsValue);
            updateVParams(vParamsValue);
            updateScreenParams(this.screenParams.screenParams);
            updateAParams(this.aParams.aParams);
            updateTargetResolution(data.meetingRoomParams.targetResolution);
            updateTargetResolutionHost(data.meetingRoomParams.targetResolutionHost);
        }
        catch (error) {
            console.log('updateRoomParametersClient error', error);
            parameters.showAlert?.({
                message: error.message,
                type: 'danger',
                duration: 3000,
            });
        }
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: UpdateRoomParametersClient, deps: [{ token: i1.VideoCaptureConstraints }, { token: i2.HParams }, { token: i3.VParams }, { token: i4.ScreenParams }, { token: i5.AParams }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: UpdateRoomParametersClient, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: UpdateRoomParametersClient, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.VideoCaptureConstraints }, { type: i2.HParams }, { type: i3.VParams }, { type: i4.ScreenParams }, { type: i5.AParams }] });
//# sourceMappingURL=data:application/json;base64,