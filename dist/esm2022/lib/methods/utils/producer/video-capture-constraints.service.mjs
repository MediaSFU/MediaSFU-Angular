import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class VideoCaptureConstraints {
    // Landscape display sizes
    QnHDCons = { width: { ideal: 320 }, height: { ideal: 180 } };
    sdCons = { width: { ideal: 640 }, height: { ideal: 360 } };
    hdCons = { width: { ideal: 1280 }, height: { ideal: 720 } };
    fhdCons = { width: { ideal: 1920 }, height: { ideal: 1080 } };
    qhdCons = { width: { ideal: 2560 }, height: { ideal: 1440 } };
    // Portrait display sizes
    QnHDConsPort = { width: { ideal: 180 }, height: { ideal: 320 } };
    sdConsPort = { width: { ideal: 360 }, height: { ideal: 640 } };
    hdConsPort = { width: { ideal: 720 }, height: { ideal: 1280 } };
    fhdConsPort = { width: { ideal: 1080 }, height: { ideal: 1920 } };
    qhdConsPort = { width: { ideal: 1440 }, height: { ideal: 2560 } };
    // Neutral (Square) display sizes
    QnHDConsNeu = { width: { ideal: 240 }, height: { ideal: 240 } };
    sdConsNeu = { width: { ideal: 480 }, height: { ideal: 480 } };
    hdConsNeu = { width: { ideal: 960 }, height: { ideal: 960 } };
    fhdConsNeu = { width: { ideal: 1440 }, height: { ideal: 1440 } };
    qhdConsNeu = { width: { ideal: 1920 }, height: { ideal: 1920 } };
    // Frame rates for video capture
    QnHDFrameRate = 5;
    sdFrameRate = 10;
    hdFrameRate = 15;
    fhdFrameRate = 20;
    qhdFrameRate = 30;
    screenFrameRate = 30;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: VideoCaptureConstraints, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: VideoCaptureConstraints, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: VideoCaptureConstraints, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8tY2FwdHVyZS1jb25zdHJhaW50cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWVkaWFzZnUtYW5ndWxhci9zcmMvbGliL21ldGhvZHMvdXRpbHMvcHJvZHVjZXIvdmlkZW8tY2FwdHVyZS1jb25zdHJhaW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsMEJBQTBCO0lBQzFCLFFBQVEsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUM3RCxNQUFNLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDM0QsTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzVELE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUM5RCxPQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7SUFFOUQseUJBQXlCO0lBQ3pCLFlBQVksR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNqRSxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDL0QsVUFBVSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO0lBQ2hFLFdBQVcsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUNsRSxXQUFXLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7SUFFbEUsaUNBQWlDO0lBQ2pDLFdBQVcsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNoRSxTQUFTLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDOUQsU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzlELFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUNqRSxVQUFVLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7SUFFakUsZ0NBQWdDO0lBQ2hDLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDbEIsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUNqQixXQUFXLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDbEIsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUNsQixlQUFlLEdBQUcsRUFBRSxDQUFDO3VHQTVCVix1QkFBdUI7MkdBQXZCLHVCQUF1QixjQUZ0QixNQUFNOzsyRkFFUCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVmlkZW9DYXB0dXJlQ29uc3RyYWludHMge1xuICAvLyBMYW5kc2NhcGUgZGlzcGxheSBzaXplc1xuICBRbkhEQ29ucyA9IHsgd2lkdGg6IHsgaWRlYWw6IDMyMCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDE4MCB9IH07XG4gIHNkQ29ucyA9IHsgd2lkdGg6IHsgaWRlYWw6IDY0MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDM2MCB9IH07XG4gIGhkQ29ucyA9IHsgd2lkdGg6IHsgaWRlYWw6IDEyODAgfSwgaGVpZ2h0OiB7IGlkZWFsOiA3MjAgfSB9O1xuICBmaGRDb25zID0geyB3aWR0aDogeyBpZGVhbDogMTkyMCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDEwODAgfSB9O1xuICBxaGRDb25zID0geyB3aWR0aDogeyBpZGVhbDogMjU2MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDE0NDAgfSB9O1xuXG4gIC8vIFBvcnRyYWl0IGRpc3BsYXkgc2l6ZXNcbiAgUW5IRENvbnNQb3J0ID0geyB3aWR0aDogeyBpZGVhbDogMTgwIH0sIGhlaWdodDogeyBpZGVhbDogMzIwIH0gfTtcbiAgc2RDb25zUG9ydCA9IHsgd2lkdGg6IHsgaWRlYWw6IDM2MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDY0MCB9IH07XG4gIGhkQ29uc1BvcnQgPSB7IHdpZHRoOiB7IGlkZWFsOiA3MjAgfSwgaGVpZ2h0OiB7IGlkZWFsOiAxMjgwIH0gfTtcbiAgZmhkQ29uc1BvcnQgPSB7IHdpZHRoOiB7IGlkZWFsOiAxMDgwIH0sIGhlaWdodDogeyBpZGVhbDogMTkyMCB9IH07XG4gIHFoZENvbnNQb3J0ID0geyB3aWR0aDogeyBpZGVhbDogMTQ0MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDI1NjAgfSB9O1xuXG4gIC8vIE5ldXRyYWwgKFNxdWFyZSkgZGlzcGxheSBzaXplc1xuICBRbkhEQ29uc05ldSA9IHsgd2lkdGg6IHsgaWRlYWw6IDI0MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDI0MCB9IH07XG4gIHNkQ29uc05ldSA9IHsgd2lkdGg6IHsgaWRlYWw6IDQ4MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDQ4MCB9IH07XG4gIGhkQ29uc05ldSA9IHsgd2lkdGg6IHsgaWRlYWw6IDk2MCB9LCBoZWlnaHQ6IHsgaWRlYWw6IDk2MCB9IH07XG4gIGZoZENvbnNOZXUgPSB7IHdpZHRoOiB7IGlkZWFsOiAxNDQwIH0sIGhlaWdodDogeyBpZGVhbDogMTQ0MCB9IH07XG4gIHFoZENvbnNOZXUgPSB7IHdpZHRoOiB7IGlkZWFsOiAxOTIwIH0sIGhlaWdodDogeyBpZGVhbDogMTkyMCB9IH07XG5cbiAgLy8gRnJhbWUgcmF0ZXMgZm9yIHZpZGVvIGNhcHR1cmVcbiAgUW5IREZyYW1lUmF0ZSA9IDU7XG4gIHNkRnJhbWVSYXRlID0gMTA7XG4gIGhkRnJhbWVSYXRlID0gMTU7XG4gIGZoZEZyYW1lUmF0ZSA9IDIwO1xuICBxaGRGcmFtZVJhdGUgPSAzMDtcbiAgc2NyZWVuRnJhbWVSYXRlID0gMzA7XG59XG4iXX0=