import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class RoomRecordParams {
    /**
     * Updates various recording parameters based on the provided `recordParams`.
     *
     * @param {Object} params - The parameters object.
     * @param {RecordParams} params.recordParams - The recording parameters to update.
     * @param {Parameters} params.parameters - The functions to update each recording parameter.
     * @param {Function} params.parameters.updateRecordingAudioPausesLimit - Function to update the audio pauses limit.
     * @param {Function} params.parameters.updateRecordingAudioPausesCount - Function to update the audio pauses count.
     * @param {Function} params.parameters.updateRecordingAudioSupport - Function to update the audio support.
     * @param {Function} params.parameters.updateRecordingAudioPeopleLimit - Function to update the audio people limit.
     * @param {Function} params.parameters.updateRecordingAudioParticipantsTimeLimit - Function to update the audio participants time limit.
     * @param {Function} params.parameters.updateRecordingVideoPausesCount - Function to update the video pauses count.
     * @param {Function} params.parameters.updateRecordingVideoPausesLimit - Function to update the video pauses limit.
     * @param {Function} params.parameters.updateRecordingVideoSupport - Function to update the video support.
     * @param {Function} params.parameters.updateRecordingVideoPeopleLimit - Function to update the video people limit.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsTimeLimit - Function to update the video participants time limit.
     * @param {Function} params.parameters.updateRecordingAllParticipantsSupport - Function to update the all participants support.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsSupport - Function to update the video participants support.
     * @param {Function} params.parameters.updateRecordingAllParticipantsFullRoomSupport - Function to update the all participants full room support.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsFullRoomSupport - Function to update the video participants full room support.
     * @param {Function} params.parameters.updateRecordingPreferredOrientation - Function to update the preferred orientation.
     * @param {Function} params.parameters.updateRecordingSupportForOtherOrientation - Function to update the support for other orientation.
     * @param {Function} params.parameters.updateRecordingMultiFormatsSupport - Function to update the multi-formats support.
     * @returns {Promise<void>} A promise that resolves when all parameters have been updated.
     */
    roomRecordParams = ({ recordParams, parameters }) => {
        let { updateRecordingAudioPausesLimit, updateRecordingAudioPausesCount, updateRecordingAudioSupport, updateRecordingAudioPeopleLimit, updateRecordingAudioParticipantsTimeLimit, updateRecordingVideoPausesCount, updateRecordingVideoPausesLimit, updateRecordingVideoSupport, updateRecordingVideoPeopleLimit, updateRecordingVideoParticipantsTimeLimit, updateRecordingAllParticipantsSupport, updateRecordingVideoParticipantsSupport, updateRecordingAllParticipantsFullRoomSupport, updateRecordingVideoParticipantsFullRoomSupport, updateRecordingPreferredOrientation, updateRecordingSupportForOtherOrientation, updateRecordingMultiFormatsSupport, } = parameters;
        // Update each recording parameter based on the provided recordParams
        updateRecordingAudioPausesLimit(recordParams.recordingAudioPausesLimit);
        updateRecordingAudioPausesCount(recordParams.recordingAudioPausesCount);
        updateRecordingAudioSupport(recordParams.recordingAudioSupport);
        updateRecordingAudioPeopleLimit(recordParams.recordingAudioPeopleLimit);
        updateRecordingAudioParticipantsTimeLimit(recordParams.recordingAudioParticipantsTimeLimit);
        updateRecordingVideoPausesCount(recordParams.recordingVideoPausesCount);
        updateRecordingVideoPausesLimit(recordParams.recordingVideoPausesLimit);
        updateRecordingVideoSupport(recordParams.recordingVideoSupport);
        updateRecordingVideoPeopleLimit(recordParams.recordingVideoPeopleLimit);
        updateRecordingVideoParticipantsTimeLimit(recordParams.recordingVideoParticipantsTimeLimit);
        updateRecordingAllParticipantsSupport(recordParams.recordingAllParticipantsSupport);
        updateRecordingVideoParticipantsSupport(recordParams.recordingVideoParticipantsSupport);
        updateRecordingAllParticipantsFullRoomSupport(recordParams.recordingAllParticipantsFullRoomSupport);
        updateRecordingVideoParticipantsFullRoomSupport(recordParams.recordingVideoParticipantsFullRoomSupport);
        updateRecordingPreferredOrientation(recordParams.recordingPreferredOrientation);
        updateRecordingSupportForOtherOrientation(recordParams.recordingSupportForOtherOrientation);
        updateRecordingMultiFormatsSupport(recordParams.recordingMultiFormatsSupport);
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,