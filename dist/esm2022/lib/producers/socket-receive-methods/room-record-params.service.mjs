import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Service to update recording parameters for a room.
 *
 * @class
 * @name RoomRecordParams
 * @description Updates multiple recording parameters at once, using provided functions for each specific setting.
 *
 * @method
 * roomRecordParams
 *
 * @param {RoomRecordParamsOptions} options - The options for updating recording parameters:
 *   - `recordParams` {RecordParams}: The new recording parameters to apply.
 *   - `parameters` {RoomRecordParamsParameters}: The update functions for each recording parameter.
 *     - `updateRecordingAudioPausesLimit` {Function}: Updates the audio pauses limit.
 *     - `updateRecordingAudioPausesCount` {Function}: Updates the audio pauses count.
 *     - `updateRecordingAudioSupport` {Function}: Updates the audio support status.
 *     - `updateRecordingAudioPeopleLimit` {Function}: Updates the audio people limit.
 *     - `updateRecordingAudioParticipantsTimeLimit` {Function}: Updates the audio participants time limit.
 *     - `updateRecordingVideoPausesCount` {Function}: Updates the video pauses count.
 *     - `updateRecordingVideoPausesLimit` {Function}: Updates the video pauses limit.
 *     - `updateRecordingVideoSupport` {Function}: Updates the video support status.
 *     - `updateRecordingVideoPeopleLimit` {Function}: Updates the video people limit.
 *     - `updateRecordingVideoParticipantsTimeLimit` {Function}: Updates the video participants time limit.
 *     - `updateRecordingAllParticipantsSupport` {Function}: Updates support for all participants.
 *     - `updateRecordingVideoParticipantsSupport` {Function}: Updates video participants support.
 *     - `updateRecordingAllParticipantsFullRoomSupport` {Function}: Updates full room support for all participants.
 *     - `updateRecordingVideoParticipantsFullRoomSupport` {Function}: Updates full room support for video participants.
 *     - `updateRecordingPreferredOrientation` {Function}: Updates the preferred recording orientation.
 *     - `updateRecordingSupportForOtherOrientation` {Function}: Updates support for other orientations.
 *     - `updateRecordingMultiFormatsSupport` {Function}: Updates support for multiple formats.
 *
 * @returns {Promise<void>} A promise that resolves after all parameters are updated.
 *
 * @example
 * const recordParams = {
 *   recordingAudioPausesLimit: 5,
 *   recordingAudioPausesCount: 2,
 *   recordingAudioSupport: true,
 *   recordingAudioPeopleLimit: 10,
 *   recordingAudioParticipantsTimeLimit: 60,
 *   recordingVideoPausesCount: 1,
 *   recordingVideoPausesLimit: 3,
 *   recordingVideoSupport: true,
 *   recordingVideoPeopleLimit: 8,
 *   recordingVideoParticipantsTimeLimit: 90,
 *   recordingAllParticipantsSupport: true,
 *   recordingVideoParticipantsSupport: true,
 *   recordingAllParticipantsFullRoomSupport: false,
 *   recordingVideoParticipantsFullRoomSupport: true,
 *   recordingPreferredOrientation: 'landscape',
 *   recordingSupportForOtherOrientation: false,
 *   recordingMultiFormatsSupport: true,
 * };
 *
 * const parameters = {
 *   updateRecordingAudioPausesLimit: (value) => console.log(`Audio pauses limit: ${value}`),
 *   updateRecordingAudioPausesCount: (value) => console.log(`Audio pauses count: ${value}`),
 *   // Define other update functions similarly
 * };
 *
 * roomRecordParamsService.roomRecordParams({ recordParams, parameters });
 */
export class RoomRecordParams {
    /**
     * Updates various recording parameters based on the provided `recordParams`.
     *
     * @param {Object} params - The parameters object.
     * @param {RecordParams} params.recordParams - The recording parameters to update.
     * @param {Parameters} params.parameters - The functions to update each recording parameter.
     * @param {Function} params.parameters.updateRecordingAudioPausesLimit - Function to update the audio pauses limit.
     * @param {Function} params.parameters.updateRecordingAudioPausesCount - Function to update the audio pauses count.
     * @param {Function} params.parameters.updateRecordingAudioSupport - Function to update the audio support.
     * @param {Function} params.parameters.updateRecordingAudioPeopleLimit - Function to update the audio people limit.
     * @param {Function} params.parameters.updateRecordingAudioParticipantsTimeLimit - Function to update the audio participants time limit.
     * @param {Function} params.parameters.updateRecordingVideoPausesCount - Function to update the video pauses count.
     * @param {Function} params.parameters.updateRecordingVideoPausesLimit - Function to update the video pauses limit.
     * @param {Function} params.parameters.updateRecordingVideoSupport - Function to update the video support.
     * @param {Function} params.parameters.updateRecordingVideoPeopleLimit - Function to update the video people limit.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsTimeLimit - Function to update the video participants time limit.
     * @param {Function} params.parameters.updateRecordingAllParticipantsSupport - Function to update the all participants support.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsSupport - Function to update the video participants support.
     * @param {Function} params.parameters.updateRecordingAllParticipantsFullRoomSupport - Function to update the all participants full room support.
     * @param {Function} params.parameters.updateRecordingVideoParticipantsFullRoomSupport - Function to update the video participants full room support.
     * @param {Function} params.parameters.updateRecordingPreferredOrientation - Function to update the preferred orientation.
     * @param {Function} params.parameters.updateRecordingSupportForOtherOrientation - Function to update the support for other orientation.
     * @param {Function} params.parameters.updateRecordingMultiFormatsSupport - Function to update the multi-formats support.
     * @returns {Promise<void>} A promise that resolves when all parameters have been updated.
     */
    roomRecordParams = ({ recordParams, parameters }) => {
        let { updateRecordingAudioPausesLimit, updateRecordingAudioPausesCount, updateRecordingAudioSupport, updateRecordingAudioPeopleLimit, updateRecordingAudioParticipantsTimeLimit, updateRecordingVideoPausesCount, updateRecordingVideoPausesLimit, updateRecordingVideoSupport, updateRecordingVideoPeopleLimit, updateRecordingVideoParticipantsTimeLimit, updateRecordingAllParticipantsSupport, updateRecordingVideoParticipantsSupport, updateRecordingAllParticipantsFullRoomSupport, updateRecordingVideoParticipantsFullRoomSupport, updateRecordingPreferredOrientation, updateRecordingSupportForOtherOrientation, updateRecordingMultiFormatsSupport, } = parameters;
        // Update each recording parameter based on the provided recordParams
        updateRecordingAudioPausesLimit(recordParams.recordingAudioPausesLimit);
        updateRecordingAudioPausesCount(recordParams.recordingAudioPausesCount);
        updateRecordingAudioSupport(recordParams.recordingAudioSupport);
        updateRecordingAudioPeopleLimit(recordParams.recordingAudioPeopleLimit);
        updateRecordingAudioParticipantsTimeLimit(recordParams.recordingAudioParticipantsTimeLimit);
        updateRecordingVideoPausesCount(recordParams.recordingVideoPausesCount);
        updateRecordingVideoPausesLimit(recordParams.recordingVideoPausesLimit);
        updateRecordingVideoSupport(recordParams.recordingVideoSupport);
        updateRecordingVideoPeopleLimit(recordParams.recordingVideoPeopleLimit);
        updateRecordingVideoParticipantsTimeLimit(recordParams.recordingVideoParticipantsTimeLimit);
        updateRecordingAllParticipantsSupport(recordParams.recordingAllParticipantsSupport);
        updateRecordingVideoParticipantsSupport(recordParams.recordingVideoParticipantsSupport);
        updateRecordingAllParticipantsFullRoomSupport(recordParams.recordingAllParticipantsFullRoomSupport);
        updateRecordingVideoParticipantsFullRoomSupport(recordParams.recordingVideoParticipantsFullRoomSupport);
        updateRecordingPreferredOrientation(recordParams.recordingPreferredOrientation);
        updateRecordingSupportForOtherOrientation(recordParams.recordingSupportForOtherOrientation);
        updateRecordingMultiFormatsSupport(recordParams.recordingMultiFormatsSupport);
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: RoomRecordParams, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,