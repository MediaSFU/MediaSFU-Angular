import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { FormsModule } from '@angular/forms';
import { faTimes } from '@fortawesome/free-solid-svg-icons';
import * as i0 from "@angular/core";
import * as i1 from "../../methods/display-settings-methods/modify-display-settings.service";
import * as i2 from "@angular/common";
import * as i3 from "@fortawesome/angular-fontawesome";
import * as i4 from "@angular/forms";
/**
 * DisplaySettingsModal component is a modal dialog for managing display settings in a meeting.
 *
 * @component
 * @selector app-display-settings-modal
 * @standalone true
 * @imports [CommonModule, FontAwesomeModule, FormsModule]
 *
 * @example
 * ```html
 * <app-display-settings-modal
 *   [isDisplaySettingsModalVisible]="true"
 *   [onDisplaySettingsClose]="closeModal"
 *   [onModifyDisplaySettings]="saveSettings"
 *   [parameters]="displaySettingsParams"
 *   position="topRight"
 *   backgroundColor="#83c0e9"
 * ></app-display-settings-modal>
 * ```
 *
 * @input {boolean} isDisplaySettingsModalVisible - Determines if the modal is visible.
 * @input {() => void} onDisplaySettingsClose - Callback to close the modal.
 * @input {(params: any) => void} onModifyDisplaySettings - Callback to modify display settings.
 * @input {DisplaySettingsModalParameters} parameters - Input parameters for modal settings.
 * @input {string} position - Modal's screen position, default is 'topRight'.
 * @input {string} backgroundColor - Background color of the modal, default is '#83c0e9'.
 *
 * @property {IconDefinition} faTimes - FontAwesome icon for closing the modal.
 *
 * @property {string} meetingDisplayTypeState - State variable for meeting display type.
 * @property {boolean} autoWaveState - State variable for auto wave setting.
 * @property {boolean} forceFullDisplayState - State variable for force full display setting.
 * @property {boolean} meetingVideoOptimizedState - State variable for video optimized setting.
 *
 * @constructor
 * @param {ModifyDisplaySettings} modifyDisplaySettingsService - Service to handle display settings modifications.
 *
 * @method ngOnInit - Initializes component state based on input parameters.
 * @method handleSaveSettings - Triggers the modification of display settings using `onModifyDisplaySettings`.
 */
export class DisplaySettingsModal {
    modifyDisplaySettingsService;
    isDisplaySettingsModalVisible = false;
    onDisplaySettingsClose;
    onModifyDisplaySettings;
    parameters;
    position = 'topRight';
    backgroundColor = '#83c0e9';
    faTimes = faTimes;
    meetingDisplayTypeState;
    autoWaveState = false;
    forceFullDisplayState = false;
    meetingVideoOptimizedState = false;
    constructor(modifyDisplaySettingsService) {
        this.modifyDisplaySettingsService = modifyDisplaySettingsService;
    }
    ngOnInit() {
        this.meetingDisplayTypeState = this.parameters.meetingDisplayType;
        this.autoWaveState = this.parameters.autoWave;
        this.forceFullDisplayState = this.parameters.forceFullDisplay;
        this.meetingVideoOptimizedState = this.parameters.meetingVideoOptimized;
        if (!this.onModifyDisplaySettings) {
            this.onModifyDisplaySettings = this.modifyDisplaySettingsService.modifyDisplaySettings.bind(this.modifyDisplaySettingsService);
        }
    }
    handleSaveSettings = async () => {
        await this.onModifyDisplaySettings({
            parameters: {
                ...this.parameters,
                meetingDisplayType: this.meetingDisplayTypeState,
                autoWave: this.autoWaveState,
                forceFullDisplay: this.forceFullDisplayState,
                meetingVideoOptimized: this.meetingVideoOptimizedState,
            },
        });
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: DisplaySettingsModal, deps: [{ token: i1.ModifyDisplaySettings }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: DisplaySettingsModal, isStandalone: true, selector: "app-display-settings-modal", inputs: { isDisplaySettingsModalVisible: "isDisplaySettingsModalVisible", onDisplaySettingsClose: "onDisplaySettingsClose", onModifyDisplaySettings: "onModifyDisplaySettings", parameters: "parameters", position: "position", backgroundColor: "backgroundColor" }, ngImport: i0, template: "<div *ngIf=\"isDisplaySettingsModalVisible\" class=\"modal-container\">\r\n  <div class=\"modal-content\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <div class=\"modal-header\">\r\n      <h2>Display Settings</h2>\r\n      <div class=\"btn-close-media-settings\" (click)=\"onDisplaySettingsClose()\">\r\n        <fa-icon [icon]=\"faTimes\" size=\"xl\"></fa-icon>\r\n      </div>\r\n    </div>\r\n    <hr class=\"modal-divider\" />\r\n    <div class=\"modal-body\">\r\n      <div class=\"setting-group\">\r\n        <label>Display Option:</label>\r\n        <select [(ngModel)]=\"meetingDisplayTypeState\" class=\"select-control\">\r\n          <option value=\"video\">Video Participants Only</option>\r\n          <option value=\"media\">Media Participants Only</option>\r\n          <option value=\"all\">Show All Participants</option>\r\n        </select>\r\n      </div>\r\n      <hr class=\"modal-divider\" />\r\n      <div class=\"setting-group\">\r\n        <div class=\"setting-toggle\">\r\n          <label>Display Audiographs</label>\r\n          <button (click)=\"autoWaveState = !autoWaveState\" [ngClass]=\"{ 'active': autoWaveState }\">\r\n            <span class=\"toggle-icon\">{{ autoWaveState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n        <div class=\"setting-toggle\">\r\n          <label>Force Full Display</label>\r\n          <button (click)=\"forceFullDisplayState = !forceFullDisplayState\" [ngClass]=\"{ 'active': forceFullDisplayState }\">\r\n            <span class=\"toggle-icon\">{{ forceFullDisplayState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n        <div class=\"setting-toggle\">\r\n          <label>Force Video Participants</label>\r\n          <button (click)=\"meetingVideoOptimizedState = !meetingVideoOptimizedState\" [ngClass]=\"{ 'active': meetingVideoOptimizedState }\">\r\n            <span class=\"toggle-icon\">{{ meetingVideoOptimizedState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button class=\"save-button\" (click)=\"handleSaveSettings()\">Save</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".modal-container{position:fixed;top:0;left:0;width:100%;height:100%;background-color:#00000080;display:block;z-index:999}.modal-content{position:fixed;border-radius:10px;padding:10px;width:80vw;max-width:350px;max-height:65%;overflow-y:auto;top:10px;right:10px}.modal-header{display:flex;flex-direction:row;justify-content:space-between;align-items:center;margin-bottom:15px}.modal-divider{height:1px;background-color:#000;margin:5px 0}.modal-body{flex:1}.setting-group{margin-bottom:10px}.setting-toggle{display:flex;flex-direction:row;justify-content:space-between;align-items:center;margin-bottom:10px}.select-control{font-size:medium;padding:12px 30px 12px 10px;border:1px solid gray;border-radius:4px;color:#000;background-color:#fff}.toggle-icon{font-size:large;font-weight:bolder}.active{color:green}.inactive{color:red}.modal-footer{margin-top:10px;display:flex;justify-content:flex-end}.save-button{padding:5px;border-radius:5px;background-color:#000;color:#fff;font-size:medium}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: FontAwesomeModule }, { kind: "component", type: i3.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "mask", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: DisplaySettingsModal, decorators: [{
            type: Component,
            args: [{ selector: 'app-display-settings-modal', standalone: true, imports: [CommonModule, FontAwesomeModule, FormsModule], template: "<div *ngIf=\"isDisplaySettingsModalVisible\" class=\"modal-container\">\r\n  <div class=\"modal-content\" [ngStyle]=\"{ 'background-color': backgroundColor }\">\r\n    <div class=\"modal-header\">\r\n      <h2>Display Settings</h2>\r\n      <div class=\"btn-close-media-settings\" (click)=\"onDisplaySettingsClose()\">\r\n        <fa-icon [icon]=\"faTimes\" size=\"xl\"></fa-icon>\r\n      </div>\r\n    </div>\r\n    <hr class=\"modal-divider\" />\r\n    <div class=\"modal-body\">\r\n      <div class=\"setting-group\">\r\n        <label>Display Option:</label>\r\n        <select [(ngModel)]=\"meetingDisplayTypeState\" class=\"select-control\">\r\n          <option value=\"video\">Video Participants Only</option>\r\n          <option value=\"media\">Media Participants Only</option>\r\n          <option value=\"all\">Show All Participants</option>\r\n        </select>\r\n      </div>\r\n      <hr class=\"modal-divider\" />\r\n      <div class=\"setting-group\">\r\n        <div class=\"setting-toggle\">\r\n          <label>Display Audiographs</label>\r\n          <button (click)=\"autoWaveState = !autoWaveState\" [ngClass]=\"{ 'active': autoWaveState }\">\r\n            <span class=\"toggle-icon\">{{ autoWaveState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n        <div class=\"setting-toggle\">\r\n          <label>Force Full Display</label>\r\n          <button (click)=\"forceFullDisplayState = !forceFullDisplayState\" [ngClass]=\"{ 'active': forceFullDisplayState }\">\r\n            <span class=\"toggle-icon\">{{ forceFullDisplayState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n        <div class=\"setting-toggle\">\r\n          <label>Force Video Participants</label>\r\n          <button (click)=\"meetingVideoOptimizedState = !meetingVideoOptimizedState\" [ngClass]=\"{ 'active': meetingVideoOptimizedState }\">\r\n            <span class=\"toggle-icon\">{{ meetingVideoOptimizedState ? '&#10003;' : '&#10007;' }}</span>\r\n          </button>\r\n        </div>\r\n        <hr class=\"modal-divider\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n      <button class=\"save-button\" (click)=\"handleSaveSettings()\">Save</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".modal-container{position:fixed;top:0;left:0;width:100%;height:100%;background-color:#00000080;display:block;z-index:999}.modal-content{position:fixed;border-radius:10px;padding:10px;width:80vw;max-width:350px;max-height:65%;overflow-y:auto;top:10px;right:10px}.modal-header{display:flex;flex-direction:row;justify-content:space-between;align-items:center;margin-bottom:15px}.modal-divider{height:1px;background-color:#000;margin:5px 0}.modal-body{flex:1}.setting-group{margin-bottom:10px}.setting-toggle{display:flex;flex-direction:row;justify-content:space-between;align-items:center;margin-bottom:10px}.select-control{font-size:medium;padding:12px 30px 12px 10px;border:1px solid gray;border-radius:4px;color:#000;background-color:#fff}.toggle-icon{font-size:large;font-weight:bolder}.active{color:green}.inactive{color:red}.modal-footer{margin-top:10px;display:flex;justify-content:flex-end}.save-button{padding:5px;border-radius:5px;background-color:#000;color:#fff;font-size:medium}\n"] }]
        }], ctorParameters: () => [{ type: i1.ModifyDisplaySettings }], propDecorators: { isDisplaySettingsModalVisible: [{
                type: Input
            }], onDisplaySettingsClose: [{
                type: Input
            }], onModifyDisplaySettings: [{
                type: Input
            }], parameters: [{
                type: Input
            }], position: [{
                type: Input
            }], backgroundColor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,