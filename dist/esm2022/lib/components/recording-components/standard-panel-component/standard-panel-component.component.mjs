import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
/**
 * @component StandardPanelComponent
 * @description This component represents a standard panel for recording options.
 * It allows users to select media, audio, and video options, as well as toggle HLS recording.
 *
 * @selector app-standard-panel-component
 * @standalone true
 * @templateUrl ./standard-panel-component.component.html
 * @styleUrls ./standard-panel-component.component.css
 * @imports [CommonModule, FormsModule]
 *
 * @input {StandardPanelParameters} parameters - The parameters for the standard panel component.
 *
 * @property {string} selectedRecordingMediaOptions - The selected media options for recording.
 * @property {string} selectedRecordingAudioOptions - The selected audio options for recording.
 * @property {string} selectedRecordingVideoOptions - The selected video options for recording.
 * @property {boolean} selectedRecordingAddHLS - The flag indicating whether HLS recording is enabled.
 *
 * @method ngOnInit - Initializes the component and sets the initial values for recording options.
 * @method ngOnChanges - Handles changes to the input parameters and updates the recording options accordingly.
 * @method handleMediaOptionsChange - Handles changes to the media options and updates the parameters.
 * @method handleAudioOptionsChange - Handles changes to the audio options and updates the parameters.
 * @method handleVideoOptionsChange - Handles changes to the video options and updates the parameters.
 * @method handleAddHLSChange - Handles changes to the HLS recording option and updates the parameters.
 *
 * @param {SimpleChanges} changes - The changes to the input properties.
 * @param {any} event - The event object from the change event.
 */
export class StandardPanelComponent {
    parameters = {};
    selectedRecordingMediaOptions;
    selectedRecordingAudioOptions;
    selectedRecordingVideoOptions;
    selectedRecordingAddHLS;
    ngOnInit() {
        this.selectedRecordingMediaOptions = this.parameters.recordingMediaOptions;
        this.selectedRecordingAudioOptions = this.parameters.recordingAudioOptions;
        this.selectedRecordingVideoOptions = this.parameters.recordingVideoOptions;
        this.selectedRecordingAddHLS = this.parameters.recordingAddHLS;
    }
    ngOnChanges(changes) {
        if (changes['parameters']) {
            this.parameters = changes['parameters'].currentValue;
            this.selectedRecordingMediaOptions = this.parameters.recordingMediaOptions;
            this.selectedRecordingAudioOptions = this.parameters.recordingAudioOptions;
            this.selectedRecordingVideoOptions = this.parameters.recordingVideoOptions;
            this.selectedRecordingAddHLS = this.parameters.recordingAddHLS;
        }
    }
    handleMediaOptionsChange(event) {
        const value = event.target.value;
        this.selectedRecordingMediaOptions = value;
        this.parameters.updateRecordingMediaOptions(value);
    }
    handleAudioOptionsChange(event) {
        const value = event.target.value;
        this.selectedRecordingAudioOptions = value;
        this.parameters.updateRecordingAudioOptions(value);
    }
    handleVideoOptionsChange(event) {
        const value = event.target.value;
        this.selectedRecordingVideoOptions = value;
        this.parameters.updateRecordingVideoOptions(value);
    }
    handleAddHLSChange(event) {
        const value = event.target.value === 'true';
        this.selectedRecordingAddHLS = value;
        this.parameters.updateRecordingAddHLS(value);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: StandardPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: StandardPanelComponent, isStandalone: true, selector: "app-standard-panel-component", inputs: { parameters: "parameters" }, usesOnChanges: true, ngImport: i0, template: "<div>\r\n  <!-- Media Options -->\r\n  <div>\r\n    <label style=\"margin-right:10px; font-weight: bold;\">Media Options:</label>\r\n    <select [(ngModel)]=\"selectedRecordingMediaOptions\" (change)=\"handleMediaOptionsChange($event)\">\r\n      <option value=\"video\">Record Video</option>\r\n      <option value=\"audio\">Record Audio Only</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Specific Audios -->\r\n  <div *ngIf=\"parameters.eventType !== 'broadcast'\">\r\n    <div>\r\n      <label style=\"margin-right:10px; font-weight: bold;\">Specific Audios:</label>\r\n      <select [(ngModel)]=\"selectedRecordingAudioOptions\" (change)=\"handleAudioOptionsChange($event)\">\r\n        <option value=\"all\">Add All</option>\r\n        <option value=\"onScreen\">Add All On Screen</option>\r\n        <option value=\"host\">Add Host Only</option>\r\n      </select>\r\n    </div>\r\n    <hr />\r\n\r\n    <!-- Specific Videos -->\r\n    <div id=\"conditionalConference\">\r\n      <label style=\"margin-right:10px; font-weight: bold;\">Specific Videos:</label>\r\n      <select [(ngModel)]=\"selectedRecordingVideoOptions\" (change)=\"handleVideoOptionsChange($event)\">\r\n        <option value=\"all\">Add All</option>\r\n        <option value=\"mainScreen\">Big Screen Only (includes screenshare)</option>\r\n      </select>\r\n    </div>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Add HLS -->\r\n  <div id=\"addHLSPart\">\r\n    <label style=\"margin-right:10px; font-weight: bold;\">Add HLS:</label>\r\n    <select [(ngModel)]=\"selectedRecordingAddHLS\" (change)=\"handleAddHLSChange($event)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n</div>\r\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: StandardPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-standard-panel-component', standalone: true, imports: [CommonModule, FormsModule], template: "<div>\r\n  <!-- Media Options -->\r\n  <div>\r\n    <label style=\"margin-right:10px; font-weight: bold;\">Media Options:</label>\r\n    <select [(ngModel)]=\"selectedRecordingMediaOptions\" (change)=\"handleMediaOptionsChange($event)\">\r\n      <option value=\"video\">Record Video</option>\r\n      <option value=\"audio\">Record Audio Only</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Specific Audios -->\r\n  <div *ngIf=\"parameters.eventType !== 'broadcast'\">\r\n    <div>\r\n      <label style=\"margin-right:10px; font-weight: bold;\">Specific Audios:</label>\r\n      <select [(ngModel)]=\"selectedRecordingAudioOptions\" (change)=\"handleAudioOptionsChange($event)\">\r\n        <option value=\"all\">Add All</option>\r\n        <option value=\"onScreen\">Add All On Screen</option>\r\n        <option value=\"host\">Add Host Only</option>\r\n      </select>\r\n    </div>\r\n    <hr />\r\n\r\n    <!-- Specific Videos -->\r\n    <div id=\"conditionalConference\">\r\n      <label style=\"margin-right:10px; font-weight: bold;\">Specific Videos:</label>\r\n      <select [(ngModel)]=\"selectedRecordingVideoOptions\" (change)=\"handleVideoOptionsChange($event)\">\r\n        <option value=\"all\">Add All</option>\r\n        <option value=\"mainScreen\">Big Screen Only (includes screenshare)</option>\r\n      </select>\r\n    </div>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Add HLS -->\r\n  <div id=\"addHLSPart\">\r\n    <label style=\"margin-right:10px; font-weight: bold;\">Add HLS:</label>\r\n    <select [(ngModel)]=\"selectedRecordingAddHLS\" (change)=\"handleAddHLSChange($event)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n</div>\r\n" }]
        }], propDecorators: { parameters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,