import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
/**
 * Component for configuring advanced recording options in a MediaSFU session.
 *
 * @component
 * @selector app-advanced-panel-component
 * @standalone true
 * @templateUrl ./advanced-panel-component.component.html
 * @styleUrls ['./advanced-panel-component.component.css']
 * @imports [CommonModule, FormsModule]
 *
 * @example
 * ```html
 * <app-advanced-panel-component [parameters]="advancedPanelOptions"></app-advanced-panel-component>
 * ```
 */
export class AdvancedPanelComponent {
    parameters = {};
    selectedOrientationVideo;
    selectedRecordingNameTags;
    selectedRecordingVideoType;
    selectedRecordingDisplayType;
    showBackgroundColorModal = false;
    showNameTagsColorModal = false;
    selectedColorType = '';
    recordingText;
    customText;
    recordingPosition;
    ngOnInit() {
        this.selectedOrientationVideo = this.parameters?.recordingOrientationVideo ?? '';
        this.selectedRecordingNameTags = this.parameters?.recordingNameTags ?? false;
        this.selectedRecordingVideoType = this.parameters?.recordingVideoType ?? '';
        this.selectedRecordingDisplayType = this.parameters?.recordingDisplayType ?? 'media';
        this.recordingText = this.parameters?.recordingAddText ?? false;
        this.customText = this.parameters?.recordingCustomText ?? '';
        this.recordingPosition = this.parameters?.recordingCustomTextPosition ?? '';
    }
    ngOnChanges(changes) {
        if (changes['parameters']) {
            this.parameters = changes['parameters'].currentValue;
            this.selectedOrientationVideo = this.parameters.recordingOrientationVideo;
            this.selectedRecordingNameTags = this.parameters.recordingNameTags;
            this.selectedRecordingVideoType = this.parameters.recordingVideoType;
            this.selectedRecordingDisplayType = this.parameters.recordingDisplayType;
            this.recordingText = this.parameters.recordingAddText;
            this.customText = this.parameters.recordingCustomText;
            this.recordingPosition = this.parameters.recordingCustomTextPosition;
        }
    }
    validateTextInput(input) {
        const regex = /^[a-zA-Z0-9\s]{1,40}$/;
        return regex.test(input);
    }
    handleTextChange(value) {
        this.recordingText = value;
        this.parameters.updateRecordingAddText(value);
    }
    onChangeTextHandler(text) {
        if (text && text.length > 0 && !this.validateTextInput(text)) {
            return;
        }
        this.parameters.updateRecordingCustomText(text);
        this.customText = text;
    }
    handleColorChange(selectedColor, event) {
        const input = event.target;
        const color = input.value;
        if (selectedColor === 'backgroundColor') {
            this.parameters.updateRecordingBackgroundColor(color);
        }
        else if (selectedColor === 'customTextColor') {
            this.parameters.updateRecordingCustomTextColor(color);
        }
        else if (selectedColor === 'nameTagsColor') {
            this.parameters.updateRecordingNameTagsColor(color);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: AdvancedPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: AdvancedPanelComponent, isStandalone: true, selector: "app-advanced-panel-component", inputs: { parameters: "parameters" }, usesOnChanges: true, ngImport: i0, template: "<div>\r\n  <!-- Video Type -->\r\n  <div>\r\n    <label class=\"label\">Video Type:</label>\r\n    <select [(ngModel)]=\"selectedRecordingVideoType\" (change)=\"parameters.updateRecordingVideoType(selectedRecordingVideoType)\">\r\n      <option value=\"fullDisplay\">Full Display (no background)</option>\r\n      <option value=\"bestDisplay\">Full Video</option>\r\n      <option value=\"all\">All</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Display Type -->\r\n  <div *ngIf=\"parameters.eventType !== 'broadcast'\">\r\n    <label class=\"label\">Display Type:</label>\r\n    <select [(ngModel)]=\"selectedRecordingDisplayType\" (change)=\"parameters.updateRecordingDisplayType(selectedRecordingDisplayType)\">\r\n      <option value=\"video\">Only Video Participants</option>\r\n      <option value=\"videoOpt\">Only Video Participants (optimized)</option>\r\n      <option value=\"media\">Participants with media</option>\r\n      <option value=\"all\">All Participants</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Background Color -->\r\n  <div>\r\n    <label class=\"label\">Background Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingBackgroundColor}\">\r\n      {{ parameters.recordingBackgroundColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingBackgroundColor\" (change)=\"handleColorChange('backgroundColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Add Text -->\r\n  <div>\r\n    <label class=\"label\">Add Text:</label>\r\n    <select [(ngModel)]=\"recordingText\" (change)=\"handleTextChange(recordingText)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Custom Text -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text:</label>\r\n    <input type=\"text\" [(ngModel)]=\"customText\" (input)=\"onChangeTextHandler(customText)\" />\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Custom Text Position -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text Position:</label>\r\n    <select [(ngModel)]=\"recordingPosition\" (change)=\"parameters.updateRecordingCustomTextPosition(recordingPosition)\">\r\n      <option value=\"top\">Top</option>\r\n      <option value=\"middle\">Middle</option>\r\n      <option value=\"bottom\">Bottom</option>\r\n    </select>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Custom Text Color -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingCustomTextColor}\">\r\n      {{ parameters.recordingCustomTextColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingCustomTextColor\" (change)=\"handleColorChange('customTextColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Add Name Tags -->\r\n  <div>\r\n    <label class=\"label\">Add Name Tags:</label>\r\n    <select [(ngModel)]=\"selectedRecordingNameTags\" (change)=\"parameters.updateRecordingNameTags(selectedRecordingNameTags)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Name Tags Color -->\r\n  <div>\r\n    <label class=\"label\">Name Tags Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingNameTagsColor}\">\r\n      {{ parameters.recordingNameTagsColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingNameTagsColor\" (change)=\"handleColorChange('nameTagsColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Orientation (Video) -->\r\n  <div>\r\n    <label class=\"label\">Orientation (Video):</label>\r\n    <select [(ngModel)]=\"selectedOrientationVideo\" (change)=\"parameters.updateRecordingOrientationVideo(selectedOrientationVideo)\">\r\n      <option value=\"landscape\">Landscape</option>\r\n      <option value=\"portrait\">Portrait</option>\r\n      <option value=\"all\">All</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n</div>\r\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: AdvancedPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-advanced-panel-component', standalone: true, imports: [CommonModule, FormsModule], template: "<div>\r\n  <!-- Video Type -->\r\n  <div>\r\n    <label class=\"label\">Video Type:</label>\r\n    <select [(ngModel)]=\"selectedRecordingVideoType\" (change)=\"parameters.updateRecordingVideoType(selectedRecordingVideoType)\">\r\n      <option value=\"fullDisplay\">Full Display (no background)</option>\r\n      <option value=\"bestDisplay\">Full Video</option>\r\n      <option value=\"all\">All</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Display Type -->\r\n  <div *ngIf=\"parameters.eventType !== 'broadcast'\">\r\n    <label class=\"label\">Display Type:</label>\r\n    <select [(ngModel)]=\"selectedRecordingDisplayType\" (change)=\"parameters.updateRecordingDisplayType(selectedRecordingDisplayType)\">\r\n      <option value=\"video\">Only Video Participants</option>\r\n      <option value=\"videoOpt\">Only Video Participants (optimized)</option>\r\n      <option value=\"media\">Participants with media</option>\r\n      <option value=\"all\">All Participants</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Background Color -->\r\n  <div>\r\n    <label class=\"label\">Background Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingBackgroundColor}\">\r\n      {{ parameters.recordingBackgroundColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingBackgroundColor\" (change)=\"handleColorChange('backgroundColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Add Text -->\r\n  <div>\r\n    <label class=\"label\">Add Text:</label>\r\n    <select [(ngModel)]=\"recordingText\" (change)=\"handleTextChange(recordingText)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Custom Text -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text:</label>\r\n    <input type=\"text\" [(ngModel)]=\"customText\" (input)=\"onChangeTextHandler(customText)\" />\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Custom Text Position -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text Position:</label>\r\n    <select [(ngModel)]=\"recordingPosition\" (change)=\"parameters.updateRecordingCustomTextPosition(recordingPosition)\">\r\n      <option value=\"top\">Top</option>\r\n      <option value=\"middle\">Middle</option>\r\n      <option value=\"bottom\">Bottom</option>\r\n    </select>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Custom Text Color -->\r\n  <div *ngIf=\"recordingText\">\r\n    <label class=\"label\">Custom Text Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingCustomTextColor}\">\r\n      {{ parameters.recordingCustomTextColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingCustomTextColor\" (change)=\"handleColorChange('customTextColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n    <hr />\r\n  </div>\r\n\r\n  <!-- Add Name Tags -->\r\n  <div>\r\n    <label class=\"label\">Add Name Tags:</label>\r\n    <select [(ngModel)]=\"selectedRecordingNameTags\" (change)=\"parameters.updateRecordingNameTags(selectedRecordingNameTags)\">\r\n      <option [ngValue]=\"true\">True</option>\r\n      <option [ngValue]=\"false\">False</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Name Tags Color -->\r\n  <div>\r\n    <label class=\"label\">Name Tags Color:</label>\r\n    <div class=\"color-preview\" [ngStyle]=\"{'background-color': parameters.recordingNameTagsColor}\">\r\n      {{ parameters.recordingNameTagsColor }}\r\n    </div>\r\n    <input type=\"color\" [(ngModel)]=\"parameters.recordingNameTagsColor\" (change)=\"handleColorChange('nameTagsColor', $event)\" />\r\n    <span class=\"label\">Click to select color</span>\r\n  </div>\r\n  <hr />\r\n\r\n  <!-- Orientation (Video) -->\r\n  <div>\r\n    <label class=\"label\">Orientation (Video):</label>\r\n    <select [(ngModel)]=\"selectedOrientationVideo\" (change)=\"parameters.updateRecordingOrientationVideo(selectedOrientationVideo)\">\r\n      <option value=\"landscape\">Landscape</option>\r\n      <option value=\"portrait\">Portrait</option>\r\n      <option value=\"all\">All</option>\r\n    </select>\r\n  </div>\r\n  <hr />\r\n</div>\r\n" }]
        }], propDecorators: { parameters: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,