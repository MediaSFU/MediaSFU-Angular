import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { faTimes, faCheck, faSyncAlt, faPlay, faSave } from '@fortawesome/free-solid-svg-icons';
import { Socket } from 'socket.io-client';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@fortawesome/angular-fontawesome";
export class ConfigureWhiteboardModal {
    isVisible = false;
    parameters = {};
    backgroundColor = '#83c0e9';
    position = 'topRight';
    onConfigureWhiteboardClose;
    faTimes = faTimes;
    faCheck = faCheck;
    faSyncAlt = faSyncAlt;
    faPlay = faPlay;
    faSave = faSave;
    participantsCopy = [];
    whiteboardLimit;
    isEditing = false;
    canStartWhiteboard = false;
    assignedParticipants = [];
    unassignedParticipants = [];
    whiteboardStarted = false;
    whiteboardEnded = false;
    socket = {};
    ngOnInit() {
        if (this.parameters && this.isVisible) {
            try {
                this.parameters = this.parameters.getUpdatedAllParams();
            }
            catch {
                /* handle error */
            }
            this.whiteboardLimit = this.parameters.itemPageLimit;
            this.whiteboardStarted = this.parameters.whiteboardStarted;
            this.whiteboardEnded = this.parameters.whiteboardEnded;
            this.checkCanStartWhiteboard();
        }
        if (this.parameters) {
            this.socket = this.parameters.socket;
            if (this.socket) {
                this.setupSocketListeners();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes['parameters'] && this.parameters) {
            if (this.parameters && this.isVisible) {
                this.whiteboardLimit = this.parameters.itemPageLimit;
                this.whiteboardStarted = this.parameters.whiteboardStarted;
                this.whiteboardEnded = this.parameters.whiteboardEnded;
                this.checkCanStartWhiteboard();
            }
            this.socket = this.parameters.socket;
            if (this.socket) {
                this.setupSocketListeners();
            }
        }
        if (changes['isVisible'] && this.isVisible) {
            this.parameters = this.parameters.getUpdatedAllParams();
            if (!this.participantsCopy.length) {
                const filteredParticipants = this.parameters.participants.filter((participant) => participant.islevel != '2');
                this.participantsCopy = filteredParticipants;
                this.updateParticipantsLists();
            }
            this.checkCanStartWhiteboard();
        }
    }
    setupSocketListeners = () => {
        if (this.socket && this.socket instanceof Socket) {
            this.socket.on('whiteboardUpdated', async (data) => {
                if (this.parameters.islevel == '2' && data.members) {
                    const filteredParticipants = data.members.filter((participant) => !participant.isBanned);
                    this.participantsCopy = filteredParticipants;
                    this.updateParticipantsLists();
                }
                this.parameters.updateWhiteboardUsers(data.whiteboardUsers);
                if (data.status == 'started') {
                    this.whiteboardStarted = true;
                    this.whiteboardEnded = false;
                    this.parameters.updateWhiteboardStarted(true);
                    this.parameters.updateWhiteboardEnded(false);
                    if (this.parameters.islevel != '2') {
                        this.parameters.shareScreenStarted = true;
                        await this.parameters.onScreenChanges({ changed: true, parameters: this.parameters });
                    }
                }
                else if (data.status == 'ended') {
                    this.whiteboardEnded = true;
                    this.whiteboardStarted = false;
                    this.parameters.updateWhiteboardStarted(false);
                    this.parameters.updateWhiteboardEnded(true);
                    this.parameters.shareScreenStarted = false;
                    await this.parameters.onScreenChanges({ changed: true, parameters: this.parameters });
                    await this.parameters.prepopulateUserMedia({
                        name: this.parameters.hostLabel,
                        parameters: this.parameters,
                    });
                    await this.parameters.rePort({ restart: true, parameters: this.parameters });
                }
            });
        }
    };
    toggleParticipant = (participant, add) => {
        this.isEditing = true;
        const selectedParticipants = this.participantsCopy.filter((p) => p.useBoard);
        if (add && selectedParticipants.length >= this.whiteboardLimit - 1) {
            this.parameters.showAlert?.({
                message: `Participant limit exceeded - you can only add ${this.whiteboardLimit - 1} other participants`,
                type: 'danger',
            });
            return;
        }
        this.participantsCopy = this.participantsCopy.map((p) => p.name === participant.name ? { ...p, useBoard: add } : p);
        this.updateParticipantsLists();
    };
    validateWhiteboard() {
        const selectedParticipants = this.participantsCopy.filter((participant) => participant.useBoard);
        if (selectedParticipants.length > this.whiteboardLimit) {
            this.parameters.showAlert?.({ message: 'Participant limit exceeded', type: 'danger' });
            return false;
        }
        return true;
    }
    checkCanStartWhiteboard() {
        const isValid = this.validateWhiteboard();
        this.canStartWhiteboard = isValid;
        this.parameters.updateCanStartWhiteboard(isValid);
    }
    handleSaveWhiteboard() {
        if (this.validateWhiteboard()) {
            this.isEditing = false;
            this.canStartWhiteboard = true;
            this.parameters.updateCanStartWhiteboard(true);
            this.checkCanStartWhiteboard();
            this.parameters.showAlert?.({ message: 'Whiteboard saved successfully', type: 'success' });
        }
        else {
            this.parameters.showAlert?.({ message: 'Whiteboard validation failed', type: 'danger' });
        }
    }
    async handleStartWhiteboard() {
        const { shareScreenStarted, shared, breakOutRoomStarted, breakOutRoomEnded, roomName, socket, recordStarted, recordResumed, recordPaused, recordStopped, recordingMediaOptions, onScreenChanges, captureCanvasStream, showAlert, } = this.parameters;
        if ((shareScreenStarted || shared) && !this.whiteboardStarted) {
            showAlert?.({
                message: 'You cannot start whiteboard while screen sharing is active',
                type: 'danger',
            });
            return;
        }
        if (breakOutRoomStarted && !breakOutRoomEnded) {
            showAlert?.({
                message: 'You cannot start whiteboard while breakout rooms are active',
                type: 'danger',
            });
            return;
        }
        if (this.canStartWhiteboard) {
            const emitName = this.whiteboardStarted && !this.whiteboardEnded ? 'updateWhiteboard' : 'startWhiteboard';
            const filteredWhiteboardUsers = this.participantsCopy
                .filter((participant) => participant.useBoard)
                .map(({ name, useBoard }) => ({ name, useBoard }));
            socket.emit(emitName, { whiteboardUsers: filteredWhiteboardUsers, roomName }, async (response) => {
                if (response.success) {
                    showAlert?.({ message: 'Whiteboard active', type: 'success' });
                    this.parameters.whiteboardStarted = true;
                    this.parameters.whiteboardEnded = false;
                    this.parameters.updateWhiteboardStarted(true);
                    this.parameters.updateWhiteboardEnded(false);
                    this.parameters.updateIsConfigureWhiteboardModalVisible(false);
                    if (this.parameters.islevel != '2') {
                        this.parameters.shareScreenStarted = true;
                        await onScreenChanges({ changed: true, parameters: this.parameters });
                    }
                    if (this.parameters.islevel == '2' && (recordStarted || recordResumed)) {
                        if (!(recordPaused || recordStopped) && recordingMediaOptions == 'video') {
                            await captureCanvasStream({ parameters: this.parameters });
                        }
                    }
                }
                else {
                    showAlert?.({ message: response.reason, type: 'danger' });
                }
            });
        }
    }
    async handleStopWhiteboard() {
        const { roomName, socket, showAlert, updateWhiteboardStarted, updateWhiteboardEnded, updateIsConfigureWhiteboardModalVisible, onScreenChanges, prepopulateUserMedia, rePort, hostLabel, } = this.parameters;
        socket.emit('stopWhiteboard', { roomName }, async (response) => {
            if (response.success) {
                showAlert?.({ message: 'Whiteboard stopped', type: 'success' });
                this.parameters.whiteboardEnded = true;
                this.parameters.whiteboardStarted = false;
                updateWhiteboardStarted(false);
                updateWhiteboardEnded(true);
                updateIsConfigureWhiteboardModalVisible(false);
                this.parameters.shareScreenStarted = false;
                await onScreenChanges({ changed: true, parameters: this.parameters });
                await prepopulateUserMedia({ name: hostLabel, parameters: this.parameters });
                await rePort({ restart: true, parameters: this.parameters });
            }
            else {
                showAlert?.({ message: response.reason, type: 'danger' });
            }
        });
    }
    modalContainerStyle() {
        return {
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            display: this.isVisible ? 'block' : 'none',
            zIndex: 999,
        };
    }
    modalContentStyle() {
        const screenWidth = window.innerWidth;
        let modalWidth = 0.7 * screenWidth;
        if (modalWidth > 400) {
            modalWidth = 400;
        }
        return {
            position: 'fixed',
            backgroundColor: this.backgroundColor,
            borderRadius: '10px',
            padding: '10px',
            width: modalWidth + 'px',
            maxWidth: modalWidth + 'px',
            maxHeight: '75%',
            overflowY: 'auto',
            overflowX: 'hidden',
            top: this.position.includes('top') ? '10px' : 'auto',
            bottom: this.position.includes('bottom') ? '10px' : 'auto',
            left: this.position.includes('Left') ? '10px' : 'auto',
            right: this.position.includes('Right') ? '10px' : 'auto',
        };
    }
    updateParticipantsLists = () => {
        this.assignedParticipants = this.participantsCopy.filter((p) => p.useBoard);
        this.unassignedParticipants = this.participantsCopy.filter((p) => !p.useBoard);
    };
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ConfigureWhiteboardModal, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: ConfigureWhiteboardModal, isStandalone: true, selector: "app-configure-whiteboard-modal", inputs: { isVisible: "isVisible", parameters: "parameters", backgroundColor: "backgroundColor", position: "position", onConfigureWhiteboardClose: "onConfigureWhiteboardClose" }, usesOnChanges: true, ngImport: i0, template: "<div [ngStyle]=\"modalContainerStyle()\">\r\n  <div [ngStyle]=\"modalContentStyle()\">\r\n    <div style=\"display: flex; flex-direction: column;\">\r\n      <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n        <h2 style=\"font-size: x-large; font-weight: bold; color: black;\">\r\n          Configure Whiteboard\r\n        </h2>\r\n        <button (click)=\"onConfigureWhiteboardClose()\" style=\"border: none; background: none; cursor: pointer;\">\r\n          <fa-icon [icon]=\"faTimes\" size=\"xl\" style=\"font-size: 20px; color: black;\"></fa-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 mb-3\">\r\n            <h6>Assigned</h6>\r\n            <ul class=\"list-group\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc;\">\r\n              <ng-container *ngIf=\"assignedParticipants.length > 0; else noAssignedParticipants\">\r\n                <li *ngFor=\"let participant of assignedParticipants\" class=\"list-group-item d-flex justify-content-between align-items-center text-dark mb-2 mr-2\">\r\n                  {{ participant.name }}\r\n                  <button class=\"btn btn-danger btn-sm mr-2 ml-2\" (click)=\"toggleParticipant(participant, false)\">\r\n                    <fa-icon [icon]=\"faTimes\"></fa-icon>\r\n                  </button>\r\n                </li>\r\n              </ng-container>\r\n              <ng-template #noAssignedParticipants>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center text-dark\">\r\n                  None\r\n                </li>\r\n              </ng-template>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-md-6 mt-xs-3 mb-3\">\r\n            <h6>Pending</h6>\r\n            <ul class=\"list-group\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc;\">\r\n              <ng-container *ngIf=\"unassignedParticipants.length > 0; else noPendingParticipants\">\r\n                <li *ngFor=\"let participant of unassignedParticipants\" class=\"list-group-item d-flex justify-content-between align-items-center text-dark mb-2 mr-2\">\r\n                  {{ participant.name }}\r\n                  <button class=\"btn btn-primary btn-sm mr-2 ml-2\" (click)=\"toggleParticipant(participant, true)\">\r\n                    <fa-icon [icon]=\"faCheck\"></fa-icon>\r\n                  </button>\r\n                </li>\r\n              </ng-container>\r\n              <ng-template #noPendingParticipants>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center text-dark\">\r\n                  None\r\n                </li>\r\n              </ng-template>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"handleSaveWhiteboard()\">\r\n          Save <fa-icon [icon]=\"faSave\"></fa-icon>\r\n        </button>\r\n      </div>\r\n      <hr />\r\n      <div *ngIf=\"!isEditing\">\r\n        <button *ngIf=\"canStartWhiteboard && whiteboardStarted && !whiteboardEnded\" class=\"btn btn-warning mb-2 mr-2\" (click)=\"handleStartWhiteboard()\">\r\n          Update <fa-icon [icon]=\"faSyncAlt\"></fa-icon>\r\n        </button>\r\n        <button *ngIf=\"canStartWhiteboard && !whiteboardStarted\" class=\"btn btn-success mb-2 mr-2\" (click)=\"handleStartWhiteboard()\">\r\n          Start <fa-icon [icon]=\"faPlay\"></fa-icon>\r\n        </button>\r\n        <button *ngIf=\"whiteboardStarted && !whiteboardEnded\" class=\"btn btn-danger mb-2 ml-2\" (click)=\"handleStopWhiteboard()\">\r\n          Stop <fa-icon [icon]=\"faTimes\"></fa-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".modal-body{max-height:400px;overflow-y:auto}.list-group-item{cursor:pointer}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: FontAwesomeModule }, { kind: "component", type: i2.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "mask", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ConfigureWhiteboardModal, decorators: [{
            type: Component,
            args: [{ selector: 'app-configure-whiteboard-modal', standalone: true, imports: [CommonModule, FontAwesomeModule], template: "<div [ngStyle]=\"modalContainerStyle()\">\r\n  <div [ngStyle]=\"modalContentStyle()\">\r\n    <div style=\"display: flex; flex-direction: column;\">\r\n      <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n        <h2 style=\"font-size: x-large; font-weight: bold; color: black;\">\r\n          Configure Whiteboard\r\n        </h2>\r\n        <button (click)=\"onConfigureWhiteboardClose()\" style=\"border: none; background: none; cursor: pointer;\">\r\n          <fa-icon [icon]=\"faTimes\" size=\"xl\" style=\"font-size: 20px; color: black;\"></fa-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 mb-3\">\r\n            <h6>Assigned</h6>\r\n            <ul class=\"list-group\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc;\">\r\n              <ng-container *ngIf=\"assignedParticipants.length > 0; else noAssignedParticipants\">\r\n                <li *ngFor=\"let participant of assignedParticipants\" class=\"list-group-item d-flex justify-content-between align-items-center text-dark mb-2 mr-2\">\r\n                  {{ participant.name }}\r\n                  <button class=\"btn btn-danger btn-sm mr-2 ml-2\" (click)=\"toggleParticipant(participant, false)\">\r\n                    <fa-icon [icon]=\"faTimes\"></fa-icon>\r\n                  </button>\r\n                </li>\r\n              </ng-container>\r\n              <ng-template #noAssignedParticipants>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center text-dark\">\r\n                  None\r\n                </li>\r\n              </ng-template>\r\n            </ul>\r\n          </div>\r\n          <div class=\"col-md-6 mt-xs-3 mb-3\">\r\n            <h6>Pending</h6>\r\n            <ul class=\"list-group\" style=\"max-height: 200px; overflow-y: auto; border: 1px solid #ccc;\">\r\n              <ng-container *ngIf=\"unassignedParticipants.length > 0; else noPendingParticipants\">\r\n                <li *ngFor=\"let participant of unassignedParticipants\" class=\"list-group-item d-flex justify-content-between align-items-center text-dark mb-2 mr-2\">\r\n                  {{ participant.name }}\r\n                  <button class=\"btn btn-primary btn-sm mr-2 ml-2\" (click)=\"toggleParticipant(participant, true)\">\r\n                    <fa-icon [icon]=\"faCheck\"></fa-icon>\r\n                  </button>\r\n                </li>\r\n              </ng-container>\r\n              <ng-template #noPendingParticipants>\r\n                <li class=\"list-group-item d-flex justify-content-between align-items-center text-dark\">\r\n                  None\r\n                </li>\r\n              </ng-template>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"handleSaveWhiteboard()\">\r\n          Save <fa-icon [icon]=\"faSave\"></fa-icon>\r\n        </button>\r\n      </div>\r\n      <hr />\r\n      <div *ngIf=\"!isEditing\">\r\n        <button *ngIf=\"canStartWhiteboard && whiteboardStarted && !whiteboardEnded\" class=\"btn btn-warning mb-2 mr-2\" (click)=\"handleStartWhiteboard()\">\r\n          Update <fa-icon [icon]=\"faSyncAlt\"></fa-icon>\r\n        </button>\r\n        <button *ngIf=\"canStartWhiteboard && !whiteboardStarted\" class=\"btn btn-success mb-2 mr-2\" (click)=\"handleStartWhiteboard()\">\r\n          Start <fa-icon [icon]=\"faPlay\"></fa-icon>\r\n        </button>\r\n        <button *ngIf=\"whiteboardStarted && !whiteboardEnded\" class=\"btn btn-danger mb-2 ml-2\" (click)=\"handleStopWhiteboard()\">\r\n          Stop <fa-icon [icon]=\"faTimes\"></fa-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".modal-body{max-height:400px;overflow-y:auto}.list-group-item{cursor:pointer}\n"] }]
        }], propDecorators: { isVisible: [{
                type: Input
            }], parameters: [{
                type: Input
            }], backgroundColor: [{
                type: Input
            }], position: [{
                type: Input
            }], onConfigureWhiteboardClose: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,