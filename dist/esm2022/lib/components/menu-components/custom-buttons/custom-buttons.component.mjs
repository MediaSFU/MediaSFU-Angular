import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@fortawesome/angular-fontawesome";
export class CustomButtons {
    /**
     * CustomButtons component renders a list of customizable buttons.
     *
     * @component
     * @param {CustomButtonsOptions} props - The properties for the CustomButtons component.
     * @param {Array} props.buttons - An array of button configurations.
     * @param {Object} props.buttons[].action - The function to be called when the button is clicked.
     * @param {boolean} props.buttons[].show - Determines if the button should be displayed.
     * @param {string} props.buttons[].backgroundColor - The background color of the button.
     * @param {boolean} props.buttons[].disabled - Determines if the button should be disabled.
     * @param {Object} [props.buttons[].icon] - The icon to be displayed on the button.
     * @param {Object} [props.buttons[].iconStyle] - The style to be applied to the icon.
     * @param {string} [props.buttons[].text] - The text to be displayed on the button.
     * @param {Object} [props.buttons[].textStyle] - The style to be applied to the text.
     * @param {React.ReactNode} [props.buttons[].customComponent] - A custom component to be rendered inside the button.
     * @param {Injector} [props.buttons[].injector] - The injector to be used for the custom component.
     * @returns {HTMLElement} The CustomButtons component.
     * @example
     * ```html
     * <app-custom-buttons [buttons]="buttons"></app-custom-buttons>
     * ```
     * @example
     * ```typescript
     * const buttons = [
     *  {
     *   action: () => console.log('Button 1 clicked'),
     *  show: true,
     * backgroundColor: 'blue',
     * disabled: false,
     * icon: faCoffee,
     * iconStyle: { color: 'white' },
     * text: 'Button 1',
     * textStyle: { color: 'white' },
     * customComponent: <CustomComponent />,
     * injector: Injector.create({ providers: [{ provide: 'customProp', useValue: 'customValue' }] }),
     * },
     * {
     *  action: () => console.log('Button 2 clicked'),
     * show: true,
     * backgroundColor: 'red',
     * disabled: false,
     * icon: faCoffee,
     * iconStyle: { color: 'white' },
     * text: 'Button 2',
     * textStyle: { color: 'white' },
     * customComponent: <CustomComponent />,
     * injector: Injector.create({ providers: [{ provide: 'customProp', useValue: 'customValue' }] }),
     * },
     * ];
     * ```
     */
    buttons;
    faSpinner = faSpinner;
    mergeStyles(defaultStyle, customStyle) {
        return { ...defaultStyle, ...customStyle };
    }
    get customButtonIcon() {
        return {
            fontSize: '20px',
            marginRight: '5px',
        };
    }
    // Type guard to check if customComponent is of type CustomComponentConfig
    isCustomComponentConfig(obj) {
        return obj && typeof obj === 'object' && 'component' in obj && 'injector' in obj;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CustomButtons, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: CustomButtons, isStandalone: true, selector: "app-custom-buttons", inputs: { buttons: "buttons" }, ngImport: i0, template: "<div class=\"customButtonsContainer\">\r\n  <button\r\n    *ngFor=\"let button of buttons; let i = index\"\r\n    (click)=\"button.action()\"\r\n    class=\"customButton\"\r\n    [ngStyle]=\"{\r\n      'background-color': button.show ? button.backgroundColor : 'transparent',\r\n      'display': button.show ? 'flex' : 'none'\r\n    }\"\r\n    [disabled]=\"button.disabled\"\r\n  >\r\n    <div class=\"buttonContent\">\r\n      <ng-container *ngIf=\"button.icon; else customOrSpinner\">\r\n        <fa-icon [icon]=\"button.icon\" [ngStyle]=\"mergeStyles(customButtonIcon, button.iconStyle)\"></fa-icon>\r\n        <span *ngIf=\"button.text\" class=\"customButtonText\" [ngStyle]=\"button.textStyle\">{{ button.text }}</span>\r\n      </ng-container>\r\n      <ng-template #customOrSpinner>\r\n        <ng-container *ngIf=\"isCustomComponentConfig(button.customComponent)\">\r\n          <ng-container *ngComponentOutlet=\"button.customComponent.component; injector: button.customComponent.injector\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"button.customComponent && !isCustomComponentConfig(button.customComponent)\">\r\n          <div #customElementContainer></div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!button.customComponent\">\r\n          <fa-icon [icon]=\"faSpinner\"></fa-icon>\r\n        </ng-container>\r\n      </ng-template>\r\n    </div>\r\n  </button>\r\n</div>\r\n", styles: [".customButtonsContainer{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:space-between;align-items:left}.customButton{width:100%;margin:10px 0;padding:10px;border-radius:5px;background-color:transparent;align-items:left;justify-content:left;border:none}.buttonContent{display:flex;align-items:left;justify-content:left}.customButtonIcon{font-size:20px;color:#000;margin-right:4px}.customButtonText{color:#000}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: FontAwesomeModule }, { kind: "component", type: i2.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "mask", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CustomButtons, decorators: [{
            type: Component,
            args: [{ selector: 'app-custom-buttons', standalone: true, imports: [CommonModule, FormsModule, FontAwesomeModule], template: "<div class=\"customButtonsContainer\">\r\n  <button\r\n    *ngFor=\"let button of buttons; let i = index\"\r\n    (click)=\"button.action()\"\r\n    class=\"customButton\"\r\n    [ngStyle]=\"{\r\n      'background-color': button.show ? button.backgroundColor : 'transparent',\r\n      'display': button.show ? 'flex' : 'none'\r\n    }\"\r\n    [disabled]=\"button.disabled\"\r\n  >\r\n    <div class=\"buttonContent\">\r\n      <ng-container *ngIf=\"button.icon; else customOrSpinner\">\r\n        <fa-icon [icon]=\"button.icon\" [ngStyle]=\"mergeStyles(customButtonIcon, button.iconStyle)\"></fa-icon>\r\n        <span *ngIf=\"button.text\" class=\"customButtonText\" [ngStyle]=\"button.textStyle\">{{ button.text }}</span>\r\n      </ng-container>\r\n      <ng-template #customOrSpinner>\r\n        <ng-container *ngIf=\"isCustomComponentConfig(button.customComponent)\">\r\n          <ng-container *ngComponentOutlet=\"button.customComponent.component; injector: button.customComponent.injector\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"button.customComponent && !isCustomComponentConfig(button.customComponent)\">\r\n          <div #customElementContainer></div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!button.customComponent\">\r\n          <fa-icon [icon]=\"faSpinner\"></fa-icon>\r\n        </ng-container>\r\n      </ng-template>\r\n    </div>\r\n  </button>\r\n</div>\r\n", styles: [".customButtonsContainer{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:space-between;align-items:left}.customButton{width:100%;margin:10px 0;padding:10px;border-radius:5px;background-color:transparent;align-items:left;justify-content:left;border:none}.buttonContent{display:flex;align-items:left;justify-content:left}.customButtonIcon{font-size:20px;color:#000;margin-right:4px}.customButtonText{color:#000}\n"] }]
        }], propDecorators: { buttons: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,