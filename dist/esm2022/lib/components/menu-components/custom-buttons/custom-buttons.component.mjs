import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@fortawesome/angular-fontawesome";
/**
 * CustomButtons component renders a list of customizable buttons.
 *
 * @selector app-custom-buttons
 * @standalone true
 * @imports [CommonModule, FormsModule, FontAwesomeModule]
 *
 * @input {CustomButton[]} buttons - Array of button configurations.
 * Each button configuration includes properties such as:
 * - **action**: Function executed on button click.
 * - **show**: Boolean or function determining button visibility.
 * - **backgroundColor**: Background color of the button.
 * - **disabled**: Boolean to disable button if set to true.
 * - **icon**: Optional FontAwesome icon displayed on the button.
 * - **iconStyle**: Style applied to the icon.
 * - **text**: Text displayed on the button.
 * - **textStyle**: Style applied to the text.
 * - **customComponent**: A custom Angular component or HTML element rendered within the button.
 * - **injector**: Injector used for providing dependencies to the custom component.
 *
 * @example
 * ```html
 * <app-custom-buttons [buttons]="buttonsArray"></app-custom-buttons>
 * ```
 *
 * @example
 * ```typescript
 * const buttonsArray: CustomButton[] = [
 *   {
 *     action: () => console.log('Button 1 clicked'),
 *     show: true,
 *     backgroundColor: 'blue',
 *     disabled: false,
 *     icon: faCoffee,
 *     iconStyle: { color: 'white' },
 *     text: 'Button 1',
 *     textStyle: { color: 'white' },
 *     customComponent: <CustomComponent />,
 *     injector: Injector.create({
 *       providers: [{ provide: 'customProp', useValue: 'customValue' }]
 *     }),
 *   },
 * ];
 * ```
 *
 * @class CustomButtons
 * @method mergeStyles - Merges default styles with user-provided custom styles.
 * @method isCustomComponentConfig - Type guard to check if an object is of type CustomComponent.
 */
export class CustomButtons {
    buttons;
    faSpinner = faSpinner;
    mergeStyles(defaultStyle, customStyle) {
        return { ...defaultStyle, ...customStyle };
    }
    get customButtonIcon() {
        return {
            fontSize: '20px',
            marginRight: '5px',
        };
    }
    // Type guard to check if customComponent is of type CustomComponentConfig
    isCustomComponentConfig(obj) {
        return obj && typeof obj === 'object' && 'component' in obj && 'injector' in obj;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CustomButtons, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.8", type: CustomButtons, isStandalone: true, selector: "app-custom-buttons", inputs: { buttons: "buttons" }, ngImport: i0, template: "<div class=\"customButtonsContainer\">\r\n  <button\r\n    *ngFor=\"let button of buttons; let i = index\"\r\n    (click)=\"button.action()\"\r\n    class=\"customButton\"\r\n    [ngStyle]=\"{\r\n      'background-color': button.show ? button.backgroundColor : 'transparent',\r\n      'display': button.show ? 'flex' : 'none'\r\n    }\"\r\n    [disabled]=\"button.disabled\"\r\n  >\r\n    <div class=\"buttonContent\">\r\n      <ng-container *ngIf=\"button.icon; else customOrSpinner\">\r\n        <fa-icon [icon]=\"button.icon\" [ngStyle]=\"mergeStyles(customButtonIcon, button.iconStyle)\"></fa-icon>\r\n        <span *ngIf=\"button.text\" class=\"customButtonText\" [ngStyle]=\"button.textStyle\">{{ button.text }}</span>\r\n      </ng-container>\r\n      <ng-template #customOrSpinner>\r\n        <ng-container *ngIf=\"isCustomComponentConfig(button.customComponent)\">\r\n          <ng-container *ngComponentOutlet=\"button.customComponent.component; injector: button.customComponent.injector\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"button.customComponent && !isCustomComponentConfig(button.customComponent)\">\r\n          <div #customElementContainer></div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!button.customComponent\">\r\n          <fa-icon [icon]=\"faSpinner\"></fa-icon>\r\n        </ng-container>\r\n      </ng-template>\r\n    </div>\r\n  </button>\r\n</div>\r\n", styles: [".customButtonsContainer{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:space-between;align-items:left}.customButton{width:100%;margin:10px 0;padding:10px;border-radius:5px;background-color:transparent;align-items:left;justify-content:left;border:none}.buttonContent{display:flex;align-items:left;justify-content:left}.customButtonIcon{font-size:20px;color:#000;margin-right:4px}.customButtonText{color:#000}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: FontAwesomeModule }, { kind: "component", type: i2.FaIconComponent, selector: "fa-icon", inputs: ["icon", "title", "animation", "mask", "flip", "size", "pull", "border", "inverse", "symbol", "rotate", "fixedWidth", "transform", "a11yRole"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: CustomButtons, decorators: [{
            type: Component,
            args: [{ selector: 'app-custom-buttons', standalone: true, imports: [CommonModule, FormsModule, FontAwesomeModule], template: "<div class=\"customButtonsContainer\">\r\n  <button\r\n    *ngFor=\"let button of buttons; let i = index\"\r\n    (click)=\"button.action()\"\r\n    class=\"customButton\"\r\n    [ngStyle]=\"{\r\n      'background-color': button.show ? button.backgroundColor : 'transparent',\r\n      'display': button.show ? 'flex' : 'none'\r\n    }\"\r\n    [disabled]=\"button.disabled\"\r\n  >\r\n    <div class=\"buttonContent\">\r\n      <ng-container *ngIf=\"button.icon; else customOrSpinner\">\r\n        <fa-icon [icon]=\"button.icon\" [ngStyle]=\"mergeStyles(customButtonIcon, button.iconStyle)\"></fa-icon>\r\n        <span *ngIf=\"button.text\" class=\"customButtonText\" [ngStyle]=\"button.textStyle\">{{ button.text }}</span>\r\n      </ng-container>\r\n      <ng-template #customOrSpinner>\r\n        <ng-container *ngIf=\"isCustomComponentConfig(button.customComponent)\">\r\n          <ng-container *ngComponentOutlet=\"button.customComponent.component; injector: button.customComponent.injector\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"button.customComponent && !isCustomComponentConfig(button.customComponent)\">\r\n          <div #customElementContainer></div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!button.customComponent\">\r\n          <fa-icon [icon]=\"faSpinner\"></fa-icon>\r\n        </ng-container>\r\n      </ng-template>\r\n    </div>\r\n  </button>\r\n</div>\r\n", styles: [".customButtonsContainer{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:space-between;align-items:left}.customButton{width:100%;margin:10px 0;padding:10px;border-radius:5px;background-color:transparent;align-items:left;justify-content:left;border:none}.buttonContent{display:flex;align-items:left;justify-content:left}.customButtonIcon{font-size:20px;color:#000;margin-right:4px}.customButtonText{color:#000}\n"] }]
        }], propDecorators: { buttons: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWJ1dHRvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWVkaWFzZnUtYW5ndWxhci9zcmMvbGliL2NvbXBvbmVudHMvbWVudS1jb21wb25lbnRzL2N1c3RvbS1idXR0b25zL2N1c3RvbS1idXR0b25zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21lZGlhc2Z1LWFuZ3VsYXIvc3JjL2xpYi9jb21wb25lbnRzL21lbnUtY29tcG9uZW50cy9jdXN0b20tYnV0dG9ucy9jdXN0b20tYnV0dG9ucy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7QUEyQjlEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnREc7QUFTSCxNQUFNLE9BQU8sYUFBYTtJQUVmLE9BQU8sQ0FBa0I7SUFFbEMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUV0QixXQUFXLENBQUMsWUFBaUIsRUFBRSxXQUFnQjtRQUM3QyxPQUFPLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTztZQUNMLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFdBQVcsRUFBRSxLQUFLO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLHVCQUF1QixDQUFDLEdBQVE7UUFDOUIsT0FBTyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLFdBQVcsSUFBSSxHQUFHLElBQUksVUFBVSxJQUFJLEdBQUcsQ0FBQztJQUNuRixDQUFDO3VHQXBCVSxhQUFhOzJGQUFiLGFBQWEsOEdDeEYxQiwrNUNBOEJBLHFlRHdEWSxZQUFZLDRsQkFBRSxXQUFXLDhCQUFFLGlCQUFpQjs7MkZBRTNDLGFBQWE7a0JBUHpCLFNBQVM7K0JBQ0Usb0JBQW9CLGNBR2xCLElBQUksV0FDUCxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLENBQUM7OEJBSTlDLE9BQU87c0JBQWYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEluamVjdG9yLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb250QXdlc29tZU1vZHVsZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lJztcbmltcG9ydCB7IGZhU3Bpbm5lciB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7XG5pbXBvcnQgeyBJY29uRGVmaW5pdGlvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tQ29tcG9uZW50IHtcbiAgY29tcG9uZW50OiBUeXBlPGFueT47XG4gIGluamVjdG9yOiBJbmplY3Rvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21CdXR0b24ge1xuICBhY3Rpb246ICgpID0+IHZvaWQ7XG4gIHNob3c6IGJvb2xlYW4gfCAoKCkgPT4gYm9vbGVhbik7XG4gIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBpY29uPzogSWNvbkRlZmluaXRpb247XG4gIGljb25TdHlsZT86IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj47XG4gIHRleHQ/OiBzdHJpbmc7XG4gIHRleHRTdHlsZT86IFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj47XG4gIGN1c3RvbUNvbXBvbmVudD86IEhUTUxFbGVtZW50IHwgQ3VzdG9tQ29tcG9uZW50IHwgKCgpID0+IEhUTUxFbGVtZW50IHwgQ3VzdG9tQ29tcG9uZW50KTtcbiAgaW5qZWN0b3I/OiBJbmplY3Rvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21CdXR0b25zT3B0aW9ucyB7XG4gIGJ1dHRvbnM6IEN1c3RvbUJ1dHRvbltdO1xufVxuXG5leHBvcnQgdHlwZSBDdXN0b21CdXR0b25zVHlwZSA9IChvcHRpb25zOiBDdXN0b21CdXR0b25zT3B0aW9ucykgPT4gSFRNTEVsZW1lbnQ7XG5cbi8qKlxuICogQ3VzdG9tQnV0dG9ucyBjb21wb25lbnQgcmVuZGVycyBhIGxpc3Qgb2YgY3VzdG9taXphYmxlIGJ1dHRvbnMuXG4gKlxuICogQHNlbGVjdG9yIGFwcC1jdXN0b20tYnV0dG9uc1xuICogQHN0YW5kYWxvbmUgdHJ1ZVxuICogQGltcG9ydHMgW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIEZvbnRBd2Vzb21lTW9kdWxlXVxuICpcbiAqIEBpbnB1dCB7Q3VzdG9tQnV0dG9uW119IGJ1dHRvbnMgLSBBcnJheSBvZiBidXR0b24gY29uZmlndXJhdGlvbnMuXG4gKiBFYWNoIGJ1dHRvbiBjb25maWd1cmF0aW9uIGluY2x1ZGVzIHByb3BlcnRpZXMgc3VjaCBhczpcbiAqIC0gKiphY3Rpb24qKjogRnVuY3Rpb24gZXhlY3V0ZWQgb24gYnV0dG9uIGNsaWNrLlxuICogLSAqKnNob3cqKjogQm9vbGVhbiBvciBmdW5jdGlvbiBkZXRlcm1pbmluZyBidXR0b24gdmlzaWJpbGl0eS5cbiAqIC0gKipiYWNrZ3JvdW5kQ29sb3IqKjogQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgYnV0dG9uLlxuICogLSAqKmRpc2FibGVkKio6IEJvb2xlYW4gdG8gZGlzYWJsZSBidXR0b24gaWYgc2V0IHRvIHRydWUuXG4gKiAtICoqaWNvbioqOiBPcHRpb25hbCBGb250QXdlc29tZSBpY29uIGRpc3BsYXllZCBvbiB0aGUgYnV0dG9uLlxuICogLSAqKmljb25TdHlsZSoqOiBTdHlsZSBhcHBsaWVkIHRvIHRoZSBpY29uLlxuICogLSAqKnRleHQqKjogVGV4dCBkaXNwbGF5ZWQgb24gdGhlIGJ1dHRvbi5cbiAqIC0gKip0ZXh0U3R5bGUqKjogU3R5bGUgYXBwbGllZCB0byB0aGUgdGV4dC5cbiAqIC0gKipjdXN0b21Db21wb25lbnQqKjogQSBjdXN0b20gQW5ndWxhciBjb21wb25lbnQgb3IgSFRNTCBlbGVtZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYnV0dG9uLlxuICogLSAqKmluamVjdG9yKio6IEluamVjdG9yIHVzZWQgZm9yIHByb3ZpZGluZyBkZXBlbmRlbmNpZXMgdG8gdGhlIGN1c3RvbSBjb21wb25lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxhcHAtY3VzdG9tLWJ1dHRvbnMgW2J1dHRvbnNdPVwiYnV0dG9uc0FycmF5XCI+PC9hcHAtY3VzdG9tLWJ1dHRvbnM+XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgYnV0dG9uc0FycmF5OiBDdXN0b21CdXR0b25bXSA9IFtcbiAqICAge1xuICogICAgIGFjdGlvbjogKCkgPT4gY29uc29sZS5sb2coJ0J1dHRvbiAxIGNsaWNrZWQnKSxcbiAqICAgICBzaG93OiB0cnVlLFxuICogICAgIGJhY2tncm91bmRDb2xvcjogJ2JsdWUnLFxuICogICAgIGRpc2FibGVkOiBmYWxzZSxcbiAqICAgICBpY29uOiBmYUNvZmZlZSxcbiAqICAgICBpY29uU3R5bGU6IHsgY29sb3I6ICd3aGl0ZScgfSxcbiAqICAgICB0ZXh0OiAnQnV0dG9uIDEnLFxuICogICAgIHRleHRTdHlsZTogeyBjb2xvcjogJ3doaXRlJyB9LFxuICogICAgIGN1c3RvbUNvbXBvbmVudDogPEN1c3RvbUNvbXBvbmVudCAvPixcbiAqICAgICBpbmplY3RvcjogSW5qZWN0b3IuY3JlYXRlKHtcbiAqICAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogJ2N1c3RvbVByb3AnLCB1c2VWYWx1ZTogJ2N1c3RvbVZhbHVlJyB9XVxuICogICAgIH0pLFxuICogICB9LFxuICogXTtcbiAqIGBgYFxuICpcbiAqIEBjbGFzcyBDdXN0b21CdXR0b25zXG4gKiBAbWV0aG9kIG1lcmdlU3R5bGVzIC0gTWVyZ2VzIGRlZmF1bHQgc3R5bGVzIHdpdGggdXNlci1wcm92aWRlZCBjdXN0b20gc3R5bGVzLlxuICogQG1ldGhvZCBpc0N1c3RvbUNvbXBvbmVudENvbmZpZyAtIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgYW4gb2JqZWN0IGlzIG9mIHR5cGUgQ3VzdG9tQ29tcG9uZW50LlxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1jdXN0b20tYnV0dG9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9jdXN0b20tYnV0dG9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2N1c3RvbS1idXR0b25zLmNvbXBvbmVudC5jc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIEZvbnRBd2Vzb21lTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tQnV0dG9ucyB7XG5cbiAgQElucHV0KCkgYnV0dG9ucyE6IEN1c3RvbUJ1dHRvbltdO1xuXG4gIGZhU3Bpbm5lciA9IGZhU3Bpbm5lcjtcblxuICBtZXJnZVN0eWxlcyhkZWZhdWx0U3R5bGU6IGFueSwgY3VzdG9tU3R5bGU6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHsgLi4uZGVmYXVsdFN0eWxlLCAuLi5jdXN0b21TdHlsZSB9O1xuICB9XG5cbiAgZ2V0IGN1c3RvbUJ1dHRvbkljb24oKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udFNpemU6ICcyMHB4JyxcbiAgICAgIG1hcmdpblJpZ2h0OiAnNXB4JyxcbiAgICB9O1xuICB9XG5cbiAgLy8gVHlwZSBndWFyZCB0byBjaGVjayBpZiBjdXN0b21Db21wb25lbnQgaXMgb2YgdHlwZSBDdXN0b21Db21wb25lbnRDb25maWdcbiAgaXNDdXN0b21Db21wb25lbnRDb25maWcob2JqOiBhbnkpOiBvYmogaXMgQ3VzdG9tQ29tcG9uZW50IHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb21wb25lbnQnIGluIG9iaiAmJiAnaW5qZWN0b3InIGluIG9iajtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImN1c3RvbUJ1dHRvbnNDb250YWluZXJcIj5cclxuICA8YnV0dG9uXHJcbiAgICAqbmdGb3I9XCJsZXQgYnV0dG9uIG9mIGJ1dHRvbnM7IGxldCBpID0gaW5kZXhcIlxyXG4gICAgKGNsaWNrKT1cImJ1dHRvbi5hY3Rpb24oKVwiXHJcbiAgICBjbGFzcz1cImN1c3RvbUJ1dHRvblwiXHJcbiAgICBbbmdTdHlsZV09XCJ7XHJcbiAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogYnV0dG9uLnNob3cgPyBidXR0b24uYmFja2dyb3VuZENvbG9yIDogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgJ2Rpc3BsYXknOiBidXR0b24uc2hvdyA/ICdmbGV4JyA6ICdub25lJ1xyXG4gICAgfVwiXHJcbiAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmRpc2FibGVkXCJcclxuICA+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uQ29udGVudFwiPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiYnV0dG9uLmljb247IGVsc2UgY3VzdG9tT3JTcGlubmVyXCI+XHJcbiAgICAgICAgPGZhLWljb24gW2ljb25dPVwiYnV0dG9uLmljb25cIiBbbmdTdHlsZV09XCJtZXJnZVN0eWxlcyhjdXN0b21CdXR0b25JY29uLCBidXR0b24uaWNvblN0eWxlKVwiPjwvZmEtaWNvbj5cclxuICAgICAgICA8c3BhbiAqbmdJZj1cImJ1dHRvbi50ZXh0XCIgY2xhc3M9XCJjdXN0b21CdXR0b25UZXh0XCIgW25nU3R5bGVdPVwiYnV0dG9uLnRleHRTdHlsZVwiPnt7IGJ1dHRvbi50ZXh0IH19PC9zcGFuPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPG5nLXRlbXBsYXRlICNjdXN0b21PclNwaW5uZXI+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzQ3VzdG9tQ29tcG9uZW50Q29uZmlnKGJ1dHRvbi5jdXN0b21Db21wb25lbnQpXCI+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0NvbXBvbmVudE91dGxldD1cImJ1dHRvbi5jdXN0b21Db21wb25lbnQuY29tcG9uZW50OyBpbmplY3RvcjogYnV0dG9uLmN1c3RvbUNvbXBvbmVudC5pbmplY3RvclwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJidXR0b24uY3VzdG9tQ29tcG9uZW50ICYmICFpc0N1c3RvbUNvbXBvbmVudENvbmZpZyhidXR0b24uY3VzdG9tQ29tcG9uZW50KVwiPlxyXG4gICAgICAgICAgPGRpdiAjY3VzdG9tRWxlbWVudENvbnRhaW5lcj48L2Rpdj5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWJ1dHRvbi5jdXN0b21Db21wb25lbnRcIj5cclxuICAgICAgICAgIDxmYS1pY29uIFtpY29uXT1cImZhU3Bpbm5lclwiPjwvZmEtaWNvbj5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIDwvZGl2PlxyXG4gIDwvYnV0dG9uPlxyXG48L2Rpdj5cclxuIl19