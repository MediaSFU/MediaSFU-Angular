import { OnInit, OnDestroy } from '@angular/core';
import { ControlMedia } from '../../../consumers/control-media.service';
import { Participant, AudioDecibels, CoHostResponsibility, ShowAlert, EventType, CustomComponent } from '../../../@types/types';
import { Socket } from 'socket.io-client';
import * as i0 from "@angular/core";
export interface VideoCardParameters {
    socket: Socket;
    roomName: string;
    coHostResponsibility: CoHostResponsibility[];
    showAlert?: ShowAlert;
    coHost: string;
    participants: Participant[];
    member: string;
    islevel: string;
    audioDecibels: AudioDecibels[];
    getUpdatedAllParams: () => VideoCardParameters;
}
export interface VideoCardOptions {
    customStyle?: Partial<CSSStyleDeclaration>;
    name: string;
    barColor?: string;
    textColor?: string;
    imageSource: string;
    roundedImage?: boolean;
    imageStyle?: Partial<CSSStyleDeclaration>;
    remoteProducerId: string;
    eventType: EventType;
    forceFullDisplay?: boolean;
    videoStream: MediaStream | null;
    showControls?: boolean;
    showInfo?: boolean;
    videoInfoComponent?: HTMLElement | CustomComponent;
    videoControlsComponent?: HTMLElement | CustomComponent;
    controlsPosition?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
    infoPosition?: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
    participant: Participant;
    backgroundColor: string;
    audioDecibels: AudioDecibels[];
    doMirror?: boolean;
    parameters: VideoCardParameters;
}
export type VideoCardType = (options: VideoCardOptions) => HTMLElement;
export declare class VideoCard implements OnInit, OnDestroy {
    private controlMediaService;
    customStyle: Partial<CSSStyleDeclaration>;
    name: string;
    barColor: string;
    textColor: string;
    imageSource: string;
    roundedImage: boolean;
    imageStyle: Partial<CSSStyleDeclaration>;
    remoteProducerId: string;
    eventType: EventType;
    forceFullDisplay: boolean;
    videoStream: MediaStream | null;
    showControls: boolean;
    showInfo: boolean;
    videoInfoComponent?: HTMLElement | CustomComponent;
    videoControlsComponent?: HTMLElement | CustomComponent;
    controlsPosition: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
    infoPosition: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
    participant: Participant;
    backgroundColor: string;
    audioDecibels: AudioDecibels[];
    doMirror: boolean;
    parameters: VideoCardParameters;
    waveformAnimations: number[];
    showWaveform: boolean;
    interval: any;
    faMicrophone: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faMicrophoneSlash: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faVideo: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faVideoSlash: import("@fortawesome/fontawesome-common-types").IconDefinition;
    constructor(controlMediaService: ControlMedia, injectedCustomStyle: Partial<CSSStyleDeclaration>, injectedName: string, injectedBarColor: string, injectedTextColor: string, injectedImageSource: string, injectedRoundedImage: boolean, injectedImageStyle: Partial<CSSStyleDeclaration>, injectedRemoteProducerId: string, injectedEventType: EventType, injectedForceFullDisplay: boolean, injectedVideoStream: MediaStream | null, injectedShowControls: boolean, injectedShowInfo: boolean, injectedVideoInfoComponent: HTMLElement, injectedVideoControlsComponent: HTMLElement, injectedControlsPosition: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight', injectedInfoPosition: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight', injectedParticipant: Participant, injectedBackgroundColor: string, injectedAudioDecibels: AudioDecibels[], injectedDoMirror: boolean, injectedParameters: VideoCardParameters);
    ngOnInit(): void;
    ngOnDestroy(): void;
    animateWaveform(): void;
    animateBar(index: number): void;
    resetWaveform(): void;
    getAnimationDuration(index: number): number;
    toggleAudio(): Promise<void>;
    toggleVideo(): Promise<void>;
    renderControls(): HTMLElement | CustomComponent | "\n      <div class=\"overlayControls\">\n        <button class=\"controlButton\" (click)=\"toggleAudio()\">\n          <fa-icon [icon]=\"participant?.muted ? faMicrophoneSlash : faMicrophone\" [style.color]=\"participant?.muted ? 'red' : 'green'\"></fa-icon>\n        </button>\n        <button class=\"controlButton\" (click)=\"toggleVideo()\">\n          <fa-icon [icon]=\"participant?.videoOn ? faVideo : faVideoSlash\" [style.color]=\"participant?.videoOn ? 'green' : 'red'\"></fa-icon>\n        </button>\n      </div>\n    " | null;
    getOverlayPosition(position: string): import("../../../@types/types").OverlayPositionStyle;
    isCustomComponent(comp: HTMLElement | CustomComponent | (() => HTMLElement | CustomComponent)): comp is CustomComponent;
    isFunctionComponent(comp: HTMLElement | CustomComponent | (() => HTMLElement | CustomComponent)): comp is () => HTMLElement | CustomComponent;
    static ɵfac: i0.ɵɵFactoryDeclaration<VideoCard, [null, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<VideoCard, "app-video-card", never, { "customStyle": { "alias": "customStyle"; "required": false; }; "name": { "alias": "name"; "required": false; }; "barColor": { "alias": "barColor"; "required": false; }; "textColor": { "alias": "textColor"; "required": false; }; "imageSource": { "alias": "imageSource"; "required": false; }; "roundedImage": { "alias": "roundedImage"; "required": false; }; "imageStyle": { "alias": "imageStyle"; "required": false; }; "remoteProducerId": { "alias": "remoteProducerId"; "required": false; }; "eventType": { "alias": "eventType"; "required": false; }; "forceFullDisplay": { "alias": "forceFullDisplay"; "required": false; }; "videoStream": { "alias": "videoStream"; "required": false; }; "showControls": { "alias": "showControls"; "required": false; }; "showInfo": { "alias": "showInfo"; "required": false; }; "videoInfoComponent": { "alias": "videoInfoComponent"; "required": false; }; "videoControlsComponent": { "alias": "videoControlsComponent"; "required": false; }; "controlsPosition": { "alias": "controlsPosition"; "required": false; }; "infoPosition": { "alias": "infoPosition"; "required": false; }; "participant": { "alias": "participant"; "required": false; }; "backgroundColor": { "alias": "backgroundColor"; "required": false; }; "audioDecibels": { "alias": "audioDecibels"; "required": false; }; "doMirror": { "alias": "doMirror"; "required": false; }; "parameters": { "alias": "parameters"; "required": false; }; }, {}, never, never, true, never>;
}
