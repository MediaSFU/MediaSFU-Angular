import { Injector, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Socket } from 'socket.io-client';
import { WelcomePageOptions } from '../misc-components/welcome-page/welcome-page.component';
import { Screenboard } from '../screenboard-components/screenboard/screenboard.component';
import { MenuWidget } from '../display-components/control-widgets/menu-widget.component';
import { MessageWidget } from '../display-components/control-widgets/message-widget.component';
import { MenuRecordWidget } from '../display-components/control-widgets/menu-record-widget.component';
import { RecordTimerWidget } from '../display-components/control-widgets/record-timer-widget.component';
import { MenuParticipantsWidget } from '../display-components/control-widgets/menu-participants-widget.component';
import { ScreenShareWidget } from '../display-components/control-widgets/screenshare-widget.component';
import { ButtonTouch, ResponseJoinRoom, CoHostResponsibility, EventType, Participant, ConsumeSocket, MeetingRoomParams, VidCons, HParamsType, VParamsType, ScreenParamsType, AParamsType, UserRecordingParams, Stream, AudioDecibels, ScreenState, GridSizes, CustomMediaComponent, Message, WaitingRoomParticipant, ComponentSizes, Transport as TransportType, Shape, Poll, BreakoutParticipant, WhiteboardUser, Request, MainButtonAlt, MainCustomButton, SeedData, PreJoinPageOptions } from '../../@types/types';
import { LaunchMenuModal } from '../../methods/menu-methods/launch-menu-modal.service';
import { LaunchRecording } from '../../methods/recording-methods/launch-recording.service';
import { StartRecording } from '../../methods/recording-methods/start-recording.service';
import { ConfirmRecording } from '../../methods/recording-methods/confirm-recording.service';
import { LaunchWaiting } from '../../methods/waiting-methods/launch-waiting.service';
import { launchCoHost } from '../../methods/co-host-methods/launch-co-host.service';
import { LaunchMediaSettings } from '../../methods/media-settings-methods/launch-media-settings.service';
import { LaunchDisplaySettings } from '../../methods/display-settings-methods/launch-display-settings.service';
import { LaunchSettings } from '../../methods/settings-methods/launch-settings.service';
import { LaunchRequests } from '../../methods/requests-methods/launch-requests.service';
import { LaunchParticipants } from '../../methods/participants-methods/launch-participants.service';
import { LaunchMessages } from '../../methods/message-methods/launch-messages.service';
import { LaunchConfirmExit } from '../../methods/exit-methods/launch-confirm-exit.service';
import { LaunchPoll } from '../../methods/polls-methods/launch-poll.service';
import { LaunchBreakoutRooms } from '../../methods/breakout-room-methods/launch-breakout-rooms.service';
import { LaunchConfigureWhiteboard } from '../../methods/whiteboard-methods/launch-configure-whiteboard.service';
import { SocketManager } from '../../sockets/socket-manager.service';
import { JoinRoomClient } from '../../producer-client/producer-client-emits/join-room-client.service';
import { UpdateRoomParametersClient } from '../../producer-client/producer-client-emits/update-room-parameters-client.service';
import { CreateDeviceClient } from '../../producer-client/producer-client-emits/create-device-client.service';
import { SwitchVideoAlt } from '../../methods/stream-methods/switch-video-alt.service';
import { ClickVideo } from '../../methods/stream-methods/click-video.service';
import { ClickAudio } from '../../methods/stream-methods/click-audio.service';
import { ClickScreenShare } from '../../methods/stream-methods/click-screen-share.service';
import { StreamSuccessVideo } from '../../consumers/stream-success-video.service';
import { StreamSuccessAudio } from '../../consumers/stream-success-audio.service';
import { StreamSuccessScreen } from '../../consumers/stream-success-screen.service';
import { StreamSuccessAudioSwitch } from '../../consumers/stream-success-audio-switch.service';
import { CheckPermission } from '../../consumers/check-permission.service';
import { UpdateMiniCardsGrid } from '../../consumers/update-mini-cards-grid.service';
import { MixStreams } from '../../consumers/mix-streams.service';
import { DispStreams } from '../../consumers/disp-streams.service';
import { StopShareScreen } from '../../consumers/stop-share-screen.service';
import { CheckScreenShare } from '../../consumers/check-screen-share.service';
import { StartShareScreen } from '../../consumers/start-share-screen.service';
import { RequestScreenShare } from '../../consumers/request-screen-share.service';
import { ReorderStreams } from '../../consumers/reorder-streams.service';
import { PrepopulateUserMedia } from '../../consumers/prepopulate-user-media.service';
import { GetVideos } from '../../consumers/get-videos.service';
import { RePort } from '../../consumers/re-port.service';
import { Trigger } from '../../consumers/trigger.service';
import { ConsumerResume } from '../../consumers/consumer-resume.service';
import { ConnectSendTransportAudio } from '../../consumers/connect-send-transport-audio.service';
import { ConnectSendTransportVideo } from '../../consumers/connect-send-transport-video.service';
import { ConnectSendTransportScreen } from '../../consumers/connect-send-transport-screen.service';
import { ProcessConsumerTransports } from '../../consumers/process-consumer-transports.service';
import { ResumePauseStreams } from '../../consumers/resume-pause-streams.service';
import { Readjust } from '../../consumers/readjust.service';
import { CheckGrid } from '../../consumers/check-grid.service';
import { GetEstimate } from '../../consumers/get-estimate.service';
import { CalculateRowsAndColumns } from '../../consumers/calculate-rows-and-columns.service';
import { AddVideosGrid } from '../../consumers/add-videos-grid.service';
import { OnScreenChanges } from '../../consumers/on-screen-changes.service';
import { sleep } from '../../methods/utils/sleep.util';
import { ChangeVids } from '../../consumers/change-vids.service';
import { CompareActiveNames } from '../../consumers/compare-active-names.service';
import { CompareScreenStates } from '../../consumers/compare-screen-states.service';
import { CreateSendTransport } from '../../consumers/create-send-transport.service';
import { ResumeSendTransportAudio } from '../../consumers/resume-send-transport-audio.service';
import { ReceiveAllPipedTransports } from '../../consumers/receive-all-piped-transports.service';
import { DisconnectSendTransportVideo } from '../../consumers/disconnect-send-transport-video.service';
import { DisconnectSendTransportAudio } from '../../consumers/disconnect-send-transport-audio.service';
import { DisconnectSendTransportScreen } from '../../consumers/disconnect-send-transport-screen.service';
import { ConnectSendTransport } from '../../consumers/connect-send-transport.service';
import { GetPipedProducersAlt } from '../../consumers/get-piped-producers-alt.service';
import { SignalNewConsumerTransport } from '../../consumers/signal-new-consumer-transport.service';
import { ConnectRecvTransport } from '../../consumers/connect-recv-transport.service';
import { ReUpdateInter } from '../../consumers/re-update-inter.service';
import { UpdateParticipantAudioDecibels } from '../../consumers/update-participant-audio-decibels.service';
import { CloseAndResize } from '../../consumers/close-and-resize.service';
import { AutoAdjust } from '../../consumers/auto-adjust.service';
import { SwitchUserVideoAlt } from '../../consumers/switch-user-video-alt.service';
import { SwitchUserVideo } from '../../consumers/switch-user-video.service';
import { SwitchUserAudio } from '../../consumers/switch-user-audio.service';
import { ReceiveRoomMessages } from '../../consumers/receive-room-messages.service';
import { FormatNumber } from '../../methods/utils/format-number.service';
import { ConnectIps } from '../../consumers/connect-ips.service';
import { PollUpdated } from '../../methods/polls-methods/poll-updated.service';
import { HandleCreatePoll } from '../../methods/polls-methods/handle-create-poll.service';
import { HandleVotePoll } from '../../methods/polls-methods/handle-vote-poll.service';
import { HandleEndPoll } from '../../methods/polls-methods/handle-end-poll.service';
import { BreakoutRoomUpdated } from '../../methods/breakout-room-methods/breakout-room-updated.service';
import { StartMeetingProgressTimer } from '../../methods/utils/meeting-timer/start-meeting-progress-timer.service';
import { UpdateRecording } from '../../methods/recording-methods/update-recording.service';
import { StopRecording } from '../../methods/recording-methods/stop-recording.service';
import { UserWaiting } from '../../producers/socket-receive-methods/user-waiting.service';
import { PersonJoined } from '../../producers/socket-receive-methods/person-joined.service';
import { AllWaitingRoomMembers } from '../../producers/socket-receive-methods/all-waiting-room-members.service';
import { RoomRecordParams } from '../../producers/socket-receive-methods/room-record-params.service';
import { BanParticipant } from '../../producers/socket-receive-methods/ban-participant.service';
import { UpdatedCoHost } from '../../producers/socket-receive-methods/updated-co-host.service';
import { ParticipantRequested } from '../../producers/socket-receive-methods/participant-requested.service';
import { ScreenProducerId } from '../../producers/socket-receive-methods/screen-producer-id.service';
import { UpdateMediaSettings } from '../../producers/socket-receive-methods/update-media-settings.service';
import { ProducerMediaPaused } from '../../producers/socket-receive-methods/producer-media-paused.service';
import { ProducerMediaResumed } from '../../producers/socket-receive-methods/producer-media-resumed.service';
import { ProducerMediaClosed } from '../../producers/socket-receive-methods/producer-media-closed.service';
import { ControlMediaHost } from '../../producers/socket-receive-methods/control-media-host.service';
import { MeetingEnded } from '../../producers/socket-receive-methods/meeting-ended.service';
import { DisconnectUserSelf } from '../../producers/socket-receive-methods/disconnect-user-self.service';
import { ReceiveMessage } from '../../producers/socket-receive-methods/receive-message.service';
import { MeetingTimeRemaining } from '../../producers/socket-receive-methods/meeting-time-remaining.service';
import { MeetingStillThere } from '../../producers/socket-receive-methods/meeting-still-there.service';
import { StartRecords } from '../../producers/socket-receive-methods/start-records.service';
import { ReInitiateRecording } from '../../producers/socket-receive-methods/re-initiate-recording.service';
import { GetDomains } from '../../producers/socket-receive-methods/get-domains.service';
import { UpdateConsumingDomains } from '../../producers/socket-receive-methods/update-consuming-domains.service';
import { RecordingNotice } from '../../producers/socket-receive-methods/recording-notice.service';
import { TimeLeftRecording } from '../../producers/socket-receive-methods/time-left-recording.service';
import { StoppedRecording } from '../../producers/socket-receive-methods/stopped-recording.service';
import { HostRequestResponse } from '../../producers/socket-receive-methods/host-request-response.service';
import { AllMembers } from '../../producers/socket-receive-methods/all-members.service';
import { AllMembersRest } from '../../producers/socket-receive-methods/all-members-rest.service';
import { Disconnect } from '../../producers/socket-receive-methods/disconnect.service';
import { CaptureCanvasStream } from '../../methods/whiteboard-methods/capture-canvas-stream.service';
import { ResumePauseAudioStreams } from '../../consumers/resume-pause-audio-streams.service';
import { ProcessConsumerTransportsAudio } from '../../consumers/process-consumer-transports-audio.service';
import { Device, Producer, ProducerOptions, RtpCapabilities, Transport } from 'mediasoup-client/lib/types';
import { SelfieSegmentation } from '@mediapipe/selfie_segmentation';
import * as i0 from "@angular/core";
/**
 * Options for configuring the MediasfuGeneric component.
 *
 * @typedef {Object} MediasfuGenericOptions
 * @property {(options: PreJoinPageOptions | WelcomePageOptions) => HTMLElement} [PrejoinPage] - A function that returns an HTMLElement for the pre-join page.
 * @property {{ apiUserName: string; apiKey: string }} [credentials] - Credentials for API access, including username and API key.
 * @property {boolean} [useLocalUIMode] - Flag to determine if the local UI mode should be used.
 * @property {SeedData} [seedData] - Data used for seeding the component.
 * @property {boolean} [useSeed] - Flag to determine if seed data should be used.
 * @property {string} [imgSrc] - Source URL for an image to be used in the component.
 */
export type MediasfuGenericOptions = {
    PrejoinPage?: (options: PreJoinPageOptions | WelcomePageOptions) => HTMLElement;
    credentials?: {
        apiUserName: string;
        apiKey: string;
    };
    useLocalUIMode?: boolean;
    seedData?: SeedData;
    useSeed?: boolean;
    imgSrc?: string;
};
export declare class MediasfuGeneric implements OnInit, OnDestroy {
    private cdr;
    private injector;
    updateMiniCardsGrid: UpdateMiniCardsGrid;
    mixStreams: MixStreams;
    dispStreams: DispStreams;
    stopShareScreen: StopShareScreen;
    checkScreenShare: CheckScreenShare;
    startShareScreen: StartShareScreen;
    requestScreenShare: RequestScreenShare;
    reorderStreams: ReorderStreams;
    prepopulateUserMedia: PrepopulateUserMedia;
    getVideos: GetVideos;
    rePort: RePort;
    trigger: Trigger;
    consumerResume: ConsumerResume;
    connectSendTransport: ConnectSendTransport;
    connectSendTransportAudio: ConnectSendTransportAudio;
    connectSendTransportVideo: ConnectSendTransportVideo;
    connectSendTransportScreen: ConnectSendTransportScreen;
    processConsumerTransports: ProcessConsumerTransports;
    resumePauseStreams: ResumePauseStreams;
    readjust: Readjust;
    checkGrid: CheckGrid;
    getEstimate: GetEstimate;
    calculateRowsAndColumns: CalculateRowsAndColumns;
    addVideosGrid: AddVideosGrid;
    onScreenChanges: OnScreenChanges;
    changeVids: ChangeVids;
    compareActiveNames: CompareActiveNames;
    compareScreenStates: CompareScreenStates;
    createSendTransport: CreateSendTransport;
    resumeSendTransportAudio: ResumeSendTransportAudio;
    receiveAllPipedTransports: ReceiveAllPipedTransports;
    disconnectSendTransportVideo: DisconnectSendTransportVideo;
    disconnectSendTransportAudio: DisconnectSendTransportAudio;
    disconnectSendTransportScreen: DisconnectSendTransportScreen;
    getPipedProducersAlt: GetPipedProducersAlt;
    signalNewConsumerTransport: SignalNewConsumerTransport;
    connectRecvTransport: ConnectRecvTransport;
    reUpdateInter: ReUpdateInter;
    updateParticipantAudioDecibels: UpdateParticipantAudioDecibels;
    closeAndResize: CloseAndResize;
    autoAdjust: AutoAdjust;
    switchUserVideoAlt: SwitchUserVideoAlt;
    switchUserVideo: SwitchUserVideo;
    switchUserAudio: SwitchUserAudio;
    getDomains: GetDomains;
    formatNumber: FormatNumber;
    connectIps: ConnectIps;
    createDeviceClient: CreateDeviceClient;
    handleCreatePoll: HandleCreatePoll;
    handleEndPoll: HandleEndPoll;
    handleVotePoll: HandleVotePoll;
    captureCanvasStream: CaptureCanvasStream;
    resumePauseAudioStreams: ResumePauseAudioStreams;
    processConsumerTransportsAudio: ProcessConsumerTransportsAudio;
    launchMenuModal: LaunchMenuModal;
    launchRecording: LaunchRecording;
    startRecording: StartRecording;
    confirmRecording: ConfirmRecording;
    launchWaiting: LaunchWaiting;
    launchCoHost: launchCoHost;
    launchMediaSettings: LaunchMediaSettings;
    launchDisplaySettings: LaunchDisplaySettings;
    launchSettings: LaunchSettings;
    launchRequests: LaunchRequests;
    launchParticipants: LaunchParticipants;
    launchMessages: LaunchMessages;
    launchConfirmExit: LaunchConfirmExit;
    launchPoll: LaunchPoll;
    launchBreakoutRooms: LaunchBreakoutRooms;
    launchConfigureWhiteboard: LaunchConfigureWhiteboard;
    startMeetingProgressTimer: StartMeetingProgressTimer;
    updateRecording: UpdateRecording;
    stopRecording: StopRecording;
    userWaiting: UserWaiting;
    personJoined: PersonJoined;
    allWaitingRoomMembers: AllWaitingRoomMembers;
    roomRecordParams: RoomRecordParams;
    banParticipant: BanParticipant;
    updatedCoHost: UpdatedCoHost;
    participantRequested: ParticipantRequested;
    screenProducerId: ScreenProducerId;
    updateMediaSettings: UpdateMediaSettings;
    producerMediaPaused: ProducerMediaPaused;
    producerMediaResumed: ProducerMediaResumed;
    producerMediaClosed: ProducerMediaClosed;
    controlMediaHost: ControlMediaHost;
    meetingEnded: MeetingEnded;
    disconnectUserSelf: DisconnectUserSelf;
    receiveMessage: ReceiveMessage;
    meetingTimeRemaining: MeetingTimeRemaining;
    meetingStillThere: MeetingStillThere;
    startRecords: StartRecords;
    reInitiateRecording: ReInitiateRecording;
    recordingNotice: RecordingNotice;
    timeLeftRecording: TimeLeftRecording;
    stoppedRecording: StoppedRecording;
    hostRequestResponse: HostRequestResponse;
    allMembers: AllMembers;
    allMembersRest: AllMembersRest;
    disconnect: Disconnect;
    pollUpdated: PollUpdated;
    breakoutRoomUpdated: BreakoutRoomUpdated;
    socketManager: SocketManager;
    joinRoomClient: JoinRoomClient;
    updateRoomParametersClient: UpdateRoomParametersClient;
    clickVideo: ClickVideo;
    clickAudio: ClickAudio;
    clickScreenShare: ClickScreenShare;
    switchVideoAlt: SwitchVideoAlt;
    streamSuccessVideo: StreamSuccessVideo;
    streamSuccessAudio: StreamSuccessAudio;
    streamSuccessScreen: StreamSuccessScreen;
    streamSuccessAudioSwitch: StreamSuccessAudioSwitch;
    checkPermission: CheckPermission;
    updateConsumingDomains: UpdateConsumingDomains;
    receiveRoomMessages: ReceiveRoomMessages;
    PrejoinPage: any;
    credentials: {
        apiUserName: string;
        apiKey: string;
    };
    useLocalUIMode: boolean;
    seedData?: SeedData;
    useSeed: boolean;
    imgSrc: string;
    title: string;
    private mainHeightWidthSubscription;
    private validatedSubscription;
    private islevelSubscription;
    private coHostSubscription;
    private buttonSubscriptions;
    private ScreenboardSubscription;
    private recordingSubscription;
    constructor(cdr: ChangeDetectorRef, injector: Injector, updateMiniCardsGrid: UpdateMiniCardsGrid, mixStreams: MixStreams, dispStreams: DispStreams, stopShareScreen: StopShareScreen, checkScreenShare: CheckScreenShare, startShareScreen: StartShareScreen, requestScreenShare: RequestScreenShare, reorderStreams: ReorderStreams, prepopulateUserMedia: PrepopulateUserMedia, getVideos: GetVideos, rePort: RePort, trigger: Trigger, consumerResume: ConsumerResume, connectSendTransport: ConnectSendTransport, connectSendTransportAudio: ConnectSendTransportAudio, connectSendTransportVideo: ConnectSendTransportVideo, connectSendTransportScreen: ConnectSendTransportScreen, processConsumerTransports: ProcessConsumerTransports, resumePauseStreams: ResumePauseStreams, readjust: Readjust, checkGrid: CheckGrid, getEstimate: GetEstimate, calculateRowsAndColumns: CalculateRowsAndColumns, addVideosGrid: AddVideosGrid, onScreenChanges: OnScreenChanges, changeVids: ChangeVids, compareActiveNames: CompareActiveNames, compareScreenStates: CompareScreenStates, createSendTransport: CreateSendTransport, resumeSendTransportAudio: ResumeSendTransportAudio, receiveAllPipedTransports: ReceiveAllPipedTransports, disconnectSendTransportVideo: DisconnectSendTransportVideo, disconnectSendTransportAudio: DisconnectSendTransportAudio, disconnectSendTransportScreen: DisconnectSendTransportScreen, getPipedProducersAlt: GetPipedProducersAlt, signalNewConsumerTransport: SignalNewConsumerTransport, connectRecvTransport: ConnectRecvTransport, reUpdateInter: ReUpdateInter, updateParticipantAudioDecibels: UpdateParticipantAudioDecibels, closeAndResize: CloseAndResize, autoAdjust: AutoAdjust, switchUserVideoAlt: SwitchUserVideoAlt, switchUserVideo: SwitchUserVideo, switchUserAudio: SwitchUserAudio, getDomains: GetDomains, formatNumber: FormatNumber, connectIps: ConnectIps, createDeviceClient: CreateDeviceClient, handleCreatePoll: HandleCreatePoll, handleEndPoll: HandleEndPoll, handleVotePoll: HandleVotePoll, captureCanvasStream: CaptureCanvasStream, resumePauseAudioStreams: ResumePauseAudioStreams, processConsumerTransportsAudio: ProcessConsumerTransportsAudio, launchMenuModal: LaunchMenuModal, launchRecording: LaunchRecording, startRecording: StartRecording, confirmRecording: ConfirmRecording, launchWaiting: LaunchWaiting, launchCoHost: launchCoHost, launchMediaSettings: LaunchMediaSettings, launchDisplaySettings: LaunchDisplaySettings, launchSettings: LaunchSettings, launchRequests: LaunchRequests, launchParticipants: LaunchParticipants, launchMessages: LaunchMessages, launchConfirmExit: LaunchConfirmExit, launchPoll: LaunchPoll, launchBreakoutRooms: LaunchBreakoutRooms, launchConfigureWhiteboard: LaunchConfigureWhiteboard, startMeetingProgressTimer: StartMeetingProgressTimer, updateRecording: UpdateRecording, stopRecording: StopRecording, userWaiting: UserWaiting, personJoined: PersonJoined, allWaitingRoomMembers: AllWaitingRoomMembers, roomRecordParams: RoomRecordParams, banParticipant: BanParticipant, updatedCoHost: UpdatedCoHost, participantRequested: ParticipantRequested, screenProducerId: ScreenProducerId, updateMediaSettings: UpdateMediaSettings, producerMediaPaused: ProducerMediaPaused, producerMediaResumed: ProducerMediaResumed, producerMediaClosed: ProducerMediaClosed, controlMediaHost: ControlMediaHost, meetingEnded: MeetingEnded, disconnectUserSelf: DisconnectUserSelf, receiveMessage: ReceiveMessage, meetingTimeRemaining: MeetingTimeRemaining, meetingStillThere: MeetingStillThere, startRecords: StartRecords, reInitiateRecording: ReInitiateRecording, recordingNotice: RecordingNotice, timeLeftRecording: TimeLeftRecording, stoppedRecording: StoppedRecording, hostRequestResponse: HostRequestResponse, allMembers: AllMembers, allMembersRest: AllMembersRest, disconnect: Disconnect, pollUpdated: PollUpdated, breakoutRoomUpdated: BreakoutRoomUpdated, socketManager: SocketManager, joinRoomClient: JoinRoomClient, updateRoomParametersClient: UpdateRoomParametersClient, clickVideo: ClickVideo, clickAudio: ClickAudio, clickScreenShare: ClickScreenShare, switchVideoAlt: SwitchVideoAlt, streamSuccessVideo: StreamSuccessVideo, streamSuccessAudio: StreamSuccessAudio, streamSuccessScreen: StreamSuccessScreen, streamSuccessAudioSwitch: StreamSuccessAudioSwitch, checkPermission: CheckPermission, updateConsumingDomains: UpdateConsumingDomains, receiveRoomMessages: ReceiveRoomMessages);
    createInjector(inputs: any): Injector;
    mediaSFUFunctions: () => {
        updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
        mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
        dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
        stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
        checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
        startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
        requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
        reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
        prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
            component: any;
            inputs: any;
        }[] | void>;
        getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
        rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
        trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
        consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
        connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
        connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
        connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
        connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
        processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
        resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
        readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
        checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
        getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
        calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
        addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
        onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
        sleep: typeof sleep;
        changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
        compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
        compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
        createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
        resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
        receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
        disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
        disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
        disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
        getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
        signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
        connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
        reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
        updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
        closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
        autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
        switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
        switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
            videoPreference: string;
            checkoff: boolean;
            parameters: any;
        }) => Promise<void>;
        switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
        getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
        formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
        connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
        createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
        handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
        handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
        handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
        captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
        resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
        processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
        checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
        streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
        streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
        streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
        streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
        clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
        clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
        clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
        switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
        requestPermissionCamera: () => Promise<string>;
        requestPermissionAudio: () => Promise<string>;
    };
    validated: BehaviorSubject<boolean>;
    localUIMode: BehaviorSubject<boolean>;
    socket: BehaviorSubject<Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>>;
    roomData: BehaviorSubject<ResponseJoinRoom | null>;
    device: BehaviorSubject<Device | null>;
    apiKey: BehaviorSubject<string>;
    apiUserName: BehaviorSubject<string>;
    apiToken: BehaviorSubject<string>;
    link: BehaviorSubject<string>;
    roomName: BehaviorSubject<string>;
    member: BehaviorSubject<string>;
    adminPasscode: BehaviorSubject<string>;
    islevel: BehaviorSubject<string>;
    coHost: BehaviorSubject<string>;
    coHostResponsibility: BehaviorSubject<CoHostResponsibility[]>;
    youAreCoHost: BehaviorSubject<boolean>;
    youAreHost: BehaviorSubject<boolean>;
    confirmedToRecord: BehaviorSubject<boolean>;
    meetingDisplayType: BehaviorSubject<string>;
    meetingVideoOptimized: BehaviorSubject<boolean>;
    eventType: BehaviorSubject<EventType>;
    participants: BehaviorSubject<Participant[]>;
    filteredParticipants: BehaviorSubject<Participant[]>;
    participantsCounter: BehaviorSubject<number>;
    participantsFilter: BehaviorSubject<string>;
    consume_sockets: BehaviorSubject<ConsumeSocket[]>;
    rtpCapabilities: BehaviorSubject<RtpCapabilities | null>;
    roomRecvIPs: BehaviorSubject<string[]>;
    meetingRoomParams: BehaviorSubject<MeetingRoomParams | null>;
    itemPageLimit: BehaviorSubject<number>;
    audioOnlyRoom: BehaviorSubject<boolean>;
    addForBasic: BehaviorSubject<boolean>;
    screenPageLimit: BehaviorSubject<number>;
    shareScreenStarted: BehaviorSubject<boolean>;
    shared: BehaviorSubject<boolean>;
    targetOrientation: BehaviorSubject<string>;
    targetResolution: BehaviorSubject<string>;
    targetResolutionHost: BehaviorSubject<string>;
    vidCons: BehaviorSubject<VidCons>;
    frameRate: BehaviorSubject<number>;
    hParams: BehaviorSubject<HParamsType>;
    vParams: BehaviorSubject<VParamsType>;
    screenParams: BehaviorSubject<ScreenParamsType>;
    aParams: BehaviorSubject<AParamsType>;
    recordingAudioPausesLimit: BehaviorSubject<number>;
    recordingAudioPausesCount: BehaviorSubject<number>;
    recordingAudioSupport: BehaviorSubject<boolean>;
    recordingAudioPeopleLimit: BehaviorSubject<number>;
    recordingAudioParticipantsTimeLimit: BehaviorSubject<number>;
    recordingVideoPausesCount: BehaviorSubject<number>;
    recordingVideoPausesLimit: BehaviorSubject<number>;
    recordingVideoSupport: BehaviorSubject<boolean>;
    recordingVideoPeopleLimit: BehaviorSubject<number>;
    recordingVideoParticipantsTimeLimit: BehaviorSubject<number>;
    recordingAllParticipantsSupport: BehaviorSubject<boolean>;
    recordingVideoParticipantsSupport: BehaviorSubject<boolean>;
    recordingAllParticipantsFullRoomSupport: BehaviorSubject<boolean>;
    recordingVideoParticipantsFullRoomSupport: BehaviorSubject<boolean>;
    recordingPreferredOrientation: BehaviorSubject<string>;
    recordingSupportForOtherOrientation: BehaviorSubject<boolean>;
    recordingMultiFormatsSupport: BehaviorSubject<boolean>;
    userRecordingParams: BehaviorSubject<UserRecordingParams>;
    canRecord: BehaviorSubject<boolean>;
    startReport: BehaviorSubject<boolean>;
    endReport: BehaviorSubject<boolean>;
    recordTimerInterval: BehaviorSubject<NodeJS.Timeout | null>;
    recordStartTime: BehaviorSubject<number>;
    recordElapsedTime: BehaviorSubject<number>;
    isTimerRunning: BehaviorSubject<boolean>;
    canPauseResume: BehaviorSubject<boolean>;
    recordChangeSeconds: BehaviorSubject<number>;
    pauseLimit: BehaviorSubject<number>;
    pauseRecordCount: BehaviorSubject<number>;
    canLaunchRecord: BehaviorSubject<boolean>;
    stopLaunchRecord: BehaviorSubject<boolean>;
    participantsAll: BehaviorSubject<Participant[]>;
    firstAll: BehaviorSubject<boolean>;
    updateMainWindow: BehaviorSubject<boolean>;
    first_round: BehaviorSubject<boolean>;
    landScaped: BehaviorSubject<boolean>;
    lock_screen: BehaviorSubject<boolean>;
    screenId: BehaviorSubject<string>;
    allVideoStreams: BehaviorSubject<(Stream | Participant)[]>;
    newLimitedStreams: BehaviorSubject<(Stream | Participant)[]>;
    newLimitedStreamsIDs: BehaviorSubject<string[]>;
    activeSounds: BehaviorSubject<string[]>;
    screenShareIDStream: BehaviorSubject<string>;
    screenShareNameStream: BehaviorSubject<string>;
    adminIDStream: BehaviorSubject<string>;
    adminNameStream: BehaviorSubject<string>;
    youYouStream: BehaviorSubject<(Stream | Participant)[]>;
    youYouStreamIDs: BehaviorSubject<string[]>;
    localStream: BehaviorSubject<MediaStream | null>;
    recordStarted: BehaviorSubject<boolean>;
    recordResumed: BehaviorSubject<boolean>;
    recordPaused: BehaviorSubject<boolean>;
    recordStopped: BehaviorSubject<boolean>;
    adminRestrictSetting: BehaviorSubject<boolean>;
    videoRequestState: BehaviorSubject<string | null>;
    videoRequestTime: BehaviorSubject<number>;
    videoAction: BehaviorSubject<boolean>;
    localStreamVideo: BehaviorSubject<MediaStream | null>;
    userDefaultVideoInputDevice: BehaviorSubject<string>;
    currentFacingMode: BehaviorSubject<string>;
    prevFacingMode: BehaviorSubject<string>;
    defVideoID: BehaviorSubject<string>;
    allowed: BehaviorSubject<boolean>;
    dispActiveNames: BehaviorSubject<string[]>;
    p_dispActiveNames: BehaviorSubject<string[]>;
    activeNames: BehaviorSubject<string[]>;
    prevActiveNames: BehaviorSubject<string[]>;
    p_activeNames: BehaviorSubject<string[]>;
    membersReceived: BehaviorSubject<boolean>;
    deferScreenReceived: BehaviorSubject<boolean>;
    hostFirstSwitch: BehaviorSubject<boolean>;
    micAction: BehaviorSubject<boolean>;
    screenAction: BehaviorSubject<boolean>;
    chatAction: BehaviorSubject<boolean>;
    audioRequestState: BehaviorSubject<string | null>;
    screenRequestState: BehaviorSubject<string | null>;
    chatRequestState: BehaviorSubject<string | null>;
    audioRequestTime: BehaviorSubject<number>;
    screenRequestTime: BehaviorSubject<number>;
    chatRequestTime: BehaviorSubject<number>;
    updateRequestIntervalSeconds: BehaviorSubject<number>;
    oldSoundIds: BehaviorSubject<string[]>;
    hostLabel: BehaviorSubject<string>;
    mainScreenFilled: BehaviorSubject<boolean>;
    localStreamScreen: BehaviorSubject<MediaStream | null>;
    screenAlreadyOn: BehaviorSubject<boolean>;
    chatAlreadyOn: BehaviorSubject<boolean>;
    redirectURL: BehaviorSubject<string>;
    oldAllStreams: BehaviorSubject<(Stream | Participant)[]>;
    adminVidID: BehaviorSubject<string>;
    streamNames: BehaviorSubject<Stream[]>;
    non_alVideoStreams: BehaviorSubject<Participant[]>;
    sortAudioLoudness: BehaviorSubject<boolean>;
    audioDecibels: BehaviorSubject<AudioDecibels[]>;
    mixed_alVideoStreams: BehaviorSubject<(Stream | Participant)[]>;
    non_alVideoStreams_muted: BehaviorSubject<Participant[]>;
    paginatedStreams: BehaviorSubject<(Stream | Participant)[][]>;
    localStreamAudio: BehaviorSubject<MediaStream | null>;
    defAudioID: BehaviorSubject<string>;
    userDefaultAudioInputDevice: BehaviorSubject<string>;
    userDefaultAudioOutputDevice: BehaviorSubject<string>;
    prevAudioInputDevice: BehaviorSubject<string>;
    prevVideoInputDevice: BehaviorSubject<string>;
    audioPaused: BehaviorSubject<boolean>;
    mainScreenPerson: BehaviorSubject<string>;
    adminOnMainScreen: BehaviorSubject<boolean>;
    screenStates: BehaviorSubject<ScreenState[]>;
    prevScreenStates: BehaviorSubject<ScreenState[]>;
    updateDateState: BehaviorSubject<number | null>;
    lastUpdate: BehaviorSubject<number | null>;
    nForReadjustRecord: BehaviorSubject<number>;
    fixedPageLimit: BehaviorSubject<number>;
    removeAltGrid: BehaviorSubject<boolean>;
    nForReadjust: BehaviorSubject<number>;
    reorderInterval: BehaviorSubject<number>;
    fastReorderInterval: BehaviorSubject<number>;
    lastReorderTime: BehaviorSubject<number>;
    audStreamNames: BehaviorSubject<Stream[]>;
    currentUserPage: BehaviorSubject<number>;
    mainHeightWidth: BehaviorSubject<number>;
    prevMainHeightWidth: BehaviorSubject<number>;
    prevDoPaginate: BehaviorSubject<boolean>;
    doPaginate: BehaviorSubject<boolean>;
    shareEnded: BehaviorSubject<boolean>;
    lStreams: BehaviorSubject<(Stream | Participant)[]>;
    chatRefStreams: BehaviorSubject<(Stream | Participant)[]>;
    controlHeight: BehaviorSubject<number>;
    isWideScreen: BehaviorSubject<boolean>;
    isMediumScreen: BehaviorSubject<boolean>;
    isSmallScreen: BehaviorSubject<boolean>;
    addGrid: BehaviorSubject<boolean>;
    addAltGrid: BehaviorSubject<boolean>;
    gridRows: BehaviorSubject<number>;
    gridCols: BehaviorSubject<number>;
    altGridRows: BehaviorSubject<number>;
    altGridCols: BehaviorSubject<number>;
    numberPages: BehaviorSubject<number>;
    currentStreams: BehaviorSubject<(Stream | Participant)[]>;
    showMiniView: BehaviorSubject<boolean>;
    nStream: BehaviorSubject<MediaStream | null>;
    defer_receive: BehaviorSubject<boolean>;
    allAudioStreams: BehaviorSubject<(Stream | Participant)[]>;
    remoteScreenStream: BehaviorSubject<Stream[]>;
    screenProducer: BehaviorSubject<Producer<import("mediasoup-client/lib/types").AppData> | null>;
    gotAllVids: BehaviorSubject<boolean>;
    paginationHeightWidth: BehaviorSubject<number>;
    paginationDirection: BehaviorSubject<"horizontal" | "vertical">;
    gridSizes: BehaviorSubject<GridSizes>;
    screenForceFullDisplay: BehaviorSubject<boolean>;
    mainGridStream: BehaviorSubject<CustomMediaComponent[]>;
    otherGridStreams: BehaviorSubject<CustomMediaComponent[][]>;
    audioOnlyStreams: BehaviorSubject<CustomMediaComponent[]>;
    videoInputs: BehaviorSubject<MediaDeviceInfo[]>;
    audioInputs: BehaviorSubject<MediaDeviceInfo[]>;
    meetingProgressTime: BehaviorSubject<string>;
    meetingElapsedTime: BehaviorSubject<number>;
    ref_participants: BehaviorSubject<Participant[]>;
    updateValidated: (value: boolean) => void;
    updateSocket: (value: Socket) => void;
    updateDevice: (value: Device | null) => void;
    updateRoomData: (value: ResponseJoinRoom | null) => void;
    updateApiKey: (value: string) => void;
    updateApiUserName: (value: string) => void;
    updateApiToken: (value: string) => void;
    updateLink: (value: string) => void;
    updateRoomName: (value: string) => void;
    updateMember: (value: string) => void;
    updateAdminPasscode: (value: string) => void;
    updateIslevel: (value: string) => void;
    updateCoHost: (value: string) => void;
    updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
    updateYouAreCoHost: (value: boolean) => void;
    updateYouAreHost: (value: boolean) => void;
    updateConfirmedToRecord: (value: boolean) => void;
    updateMeetingDisplayType: (value: string) => void;
    updateMeetingVideoOptimized: (value: boolean) => void;
    updateEventType: (value: EventType) => void;
    updateParticipants: (value: Participant[]) => void;
    updateFilteredParticipants: (value: Participant[]) => void;
    updateParticipantsCounter: (value: number) => void;
    updateParticipantsFilter: (value: string) => void;
    updateConsume_sockets: (value: ConsumeSocket[]) => void;
    updateRtpCapabilities: (value: RtpCapabilities | null) => void;
    updateRoomRecvIPs: (value: string[]) => void;
    updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
    updateItemPageLimit: (value: number) => void;
    updateAudioOnlyRoom: (value: boolean) => void;
    updateAddForBasic: (value: boolean) => void;
    updateScreenPageLimit: (value: number) => void;
    updateShareScreenStarted: (value: boolean) => void;
    updateShared: (value: boolean) => void;
    updateTargetOrientation: (value: string) => void;
    updateTargetResolution: (value: string) => void;
    updateTargetResolutionHost: (value: string) => void;
    updateVidCons: (value: VidCons) => void;
    updateFrameRate: (value: number) => void;
    updateHParams: (value: HParamsType) => void;
    updateVParams: (value: VParamsType) => void;
    updateScreenParams: (value: ScreenParamsType) => void;
    updateAParams: (value: AParamsType) => void;
    updateRecordingAudioPausesLimit: (value: number) => void;
    updateRecordingAudioPausesCount: (value: number) => void;
    updateRecordingAudioSupport: (value: boolean) => void;
    updateRecordingAudioPeopleLimit: (value: number) => void;
    updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
    updateRecordingVideoPausesCount: (value: number) => void;
    updateRecordingVideoPausesLimit: (value: number) => void;
    updateRecordingVideoSupport: (value: boolean) => void;
    updateRecordingVideoPeopleLimit: (value: number) => void;
    updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
    updateRecordingAllParticipantsSupport: (value: boolean) => void;
    updateRecordingVideoParticipantsSupport: (value: boolean) => void;
    updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
    updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
    updateRecordingPreferredOrientation: (value: string) => void;
    updateRecordingSupportForOtherOrientation: (value: boolean) => void;
    updateRecordingMultiFormatsSupport: (value: boolean) => void;
    updateUserRecordingParams: (value: UserRecordingParams) => void;
    updateCanRecord: (value: boolean) => void;
    updateStartReport: (value: boolean) => void;
    updateEndReport: (value: boolean) => void;
    updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
    updateRecordStartTime: (value: number) => void;
    updateRecordElapsedTime: (value: number) => void;
    updateIsTimerRunning: (value: boolean) => void;
    updateCanPauseResume: (value: boolean) => void;
    updateRecordChangeSeconds: (value: number) => void;
    updatePauseLimit: (value: number) => void;
    updatePauseRecordCount: (value: number) => void;
    updateCanLaunchRecord: (value: boolean) => void;
    updateStopLaunchRecord: (value: boolean) => void;
    updateParticipantsAll: (value: Participant[]) => void;
    updateFirstAll: (value: boolean) => void;
    updateUpdateMainWindow: (value: boolean) => void;
    updateFirst_round: (value: boolean) => void;
    updateLandScaped: (value: boolean) => void;
    updateLock_screen: (value: boolean) => void;
    updateScreenId: (value: string) => void;
    updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
    updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
    updateNewLimitedStreamsIDs: (value: string[]) => void;
    updateActiveSounds: (value: string[]) => void;
    updateScreenShareIDStream: (value: string) => void;
    updateScreenShareNameStream: (value: string) => void;
    updateAdminIDStream: (value: string) => void;
    updateAdminNameStream: (value: string) => void;
    updateYouYouStream: (value: (Participant | Stream)[]) => void;
    updateYouYouStreamIDs: (value: string[]) => void;
    updateLocalStream: (value: MediaStream | null) => void;
    updateRecordStarted: (value: boolean) => void;
    updateRecordResumed: (value: boolean) => void;
    updateRecordPaused: (value: boolean) => void;
    updateRecordStopped: (value: boolean) => void;
    updateAdminRestrictSetting: (value: boolean) => void;
    updateVideoRequestState: (value: string | null) => void;
    updateVideoRequestTime: (value: number) => void;
    updateVideoAction: (value: boolean) => void;
    updateLocalStreamVideo: (value: MediaStream | null) => void;
    updateUserDefaultVideoInputDevice: (value: string) => void;
    updateCurrentFacingMode: (value: string) => void;
    updatePrevFacingMode: (value: string) => void;
    updateDefVideoID: (value: string) => void;
    updateAllowed: (value: boolean) => void;
    updateDispActiveNames: (value: string[]) => void;
    updateP_dispActiveNames: (value: string[]) => void;
    updateActiveNames: (value: string[]) => void;
    updatePrevActiveNames: (value: string[]) => void;
    updateP_activeNames: (value: string[]) => void;
    updateMembersReceived: (value: boolean) => void;
    updateDeferScreenReceived: (value: boolean) => void;
    updateHostFirstSwitch: (value: boolean) => void;
    updateMicAction: (value: boolean) => void;
    updateScreenAction: (value: boolean) => void;
    updateChatAction: (value: boolean) => void;
    updateAudioRequestState: (value: string | null) => void;
    updateScreenRequestState: (value: string | null) => void;
    updateChatRequestState: (value: string | null) => void;
    updateAudioRequestTime: (value: number) => void;
    updateScreenRequestTime: (value: number) => void;
    updateChatRequestTime: (value: number) => void;
    updateOldSoundIds: (value: string[]) => void;
    updateHostLabel: (value: string) => void;
    updateMainScreenFilled: (value: boolean) => void;
    updateLocalStreamScreen: (value: MediaStream | null) => void;
    updateScreenAlreadyOn: (value: boolean) => void;
    updateChatAlreadyOn: (value: boolean) => void;
    updateRedirectURL: (value: string) => void;
    updateOldAllStreams: (value: (Participant | Stream)[]) => void;
    updateAdminVidID: (value: string) => void;
    updateStreamNames: (value: Stream[]) => void;
    updateNon_alVideoStreams: (value: Participant[]) => void;
    updateSortAudioLoudness: (value: boolean) => void;
    updateAudioDecibels: (value: AudioDecibels[]) => void;
    updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
    updateNon_alVideoStreams_muted: (value: Participant[]) => void;
    updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
    updateLocalStreamAudio: (value: MediaStream | null) => void;
    updateDefAudioID: (value: string) => void;
    updateUserDefaultAudioInputDevice: (value: string) => void;
    updateUserDefaultAudioOutputDevice: (value: string) => void;
    updatePrevAudioInputDevice: (value: string) => void;
    updatePrevVideoInputDevice: (value: string) => void;
    updateAudioPaused: (value: boolean) => void;
    updateMainScreenPerson: (value: string) => void;
    updateAdminOnMainScreen: (value: boolean) => void;
    updateScreenStates: (value: ScreenState[]) => void;
    updatePrevScreenStates: (value: ScreenState[]) => void;
    updateUpdateDateState: (value: number | null) => void;
    updateLastUpdate: (value: number | null) => void;
    updateNForReadjustRecord: (value: number) => void;
    updateFixedPageLimit: (value: number) => void;
    updateRemoveAltGrid: (value: boolean) => void;
    updateNForReadjust: (value: number) => void;
    updateLastReorderTime: (value: number) => void;
    updateAudStreamNames: (value: Stream[]) => void;
    updateCurrentUserPage: (value: number) => void;
    updateMainHeightWidth: (value: number) => void;
    updatePrevMainHeightWidth: (value: number) => void;
    updatePrevDoPaginate: (value: boolean) => void;
    updateDoPaginate: (value: boolean) => void;
    updateShareEnded: (value: boolean) => void;
    updateLStreams: (value: (Participant | Stream)[]) => void;
    updateChatRefStreams: (value: (Participant | Stream)[]) => void;
    updateControlHeight: (value: number) => void;
    updateIsWideScreen: (value: boolean) => void;
    updateIsMediumScreen: (value: boolean) => void;
    updateIsSmallScreen: (value: boolean) => void;
    updateAddGrid: (value: boolean) => void;
    updateAddAltGrid: (value: boolean) => void;
    updateGridRows: (value: number) => void;
    updateGridCols: (value: number) => void;
    updateAltGridRows: (value: number) => void;
    updateAltGridCols: (value: number) => void;
    updateNumberPages: (value: number) => void;
    updateCurrentStreams: (value: (Participant | Stream)[]) => void;
    updateShowMiniView: (value: boolean) => void;
    updateNStream: (value: MediaStream | null) => void;
    updateDefer_receive: (value: boolean) => void;
    updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
    updateRemoteScreenStream: (value: Stream[]) => void;
    updateScreenProducer: (value: Producer | null) => void;
    updateGotAllVids: (value: boolean) => void;
    updatePaginationHeightWidth: (value: number) => void;
    updatePaginationDirection: (value: "horizontal" | "vertical") => void;
    updateGridSizes: (value: GridSizes) => void;
    updateScreenForceFullDisplay: (value: boolean) => void;
    updateMainGridStream: (value: CustomMediaComponent[]) => void;
    updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
    updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
    updateVideoInputs: (value: MediaDeviceInfo[]) => void;
    updateAudioInputs: (value: MediaDeviceInfo[]) => void;
    updateMeetingProgressTime: (value: string) => void;
    updateMeetingElapsedTime: (value: number) => void;
    updateRef_participants: (value: Participant[]) => void;
    messages: BehaviorSubject<Message[]>;
    startDirectMessage: BehaviorSubject<boolean>;
    directMessageDetails: BehaviorSubject<Participant | null>;
    showMessagesBadge: BehaviorSubject<boolean>;
    audioSetting: BehaviorSubject<string>;
    videoSetting: BehaviorSubject<string>;
    screenshareSetting: BehaviorSubject<string>;
    chatSetting: BehaviorSubject<string>;
    displayOption: BehaviorSubject<string>;
    autoWave: BehaviorSubject<boolean>;
    forceFullDisplay: BehaviorSubject<boolean>;
    prevForceFullDisplay: BehaviorSubject<boolean>;
    prevMeetingDisplayType: BehaviorSubject<string>;
    waitingRoomFilter: BehaviorSubject<string>;
    waitingRoomList: BehaviorSubject<WaitingRoomParticipant[]>;
    waitingRoomCounter: BehaviorSubject<number>;
    filteredWaitingRoomList: BehaviorSubject<WaitingRoomParticipant[]>;
    requestFilter: BehaviorSubject<string>;
    requestList: BehaviorSubject<Request[]>;
    requestCounter: BehaviorSubject<number>;
    filteredRequestList: BehaviorSubject<Request[]>;
    totalReqWait: BehaviorSubject<number>;
    alertVisible: BehaviorSubject<boolean>;
    alertMessage: BehaviorSubject<string>;
    alertType: BehaviorSubject<"success" | "danger">;
    alertDuration: BehaviorSubject<number>;
    progressTimerVisible: BehaviorSubject<boolean>;
    progressTimerValue: BehaviorSubject<number>;
    isMenuModalVisible: BehaviorSubject<boolean>;
    isRecordingModalVisible: BehaviorSubject<boolean>;
    isSettingsModalVisible: BehaviorSubject<boolean>;
    isRequestsModalVisible: BehaviorSubject<boolean>;
    isWaitingModalVisible: BehaviorSubject<boolean>;
    isCoHostModalVisible: BehaviorSubject<boolean>;
    isMediaSettingsModalVisible: BehaviorSubject<boolean>;
    isDisplaySettingsModalVisible: BehaviorSubject<boolean>;
    isParticipantsModalVisible: BehaviorSubject<boolean>;
    isMessagesModalVisible: BehaviorSubject<boolean>;
    isConfirmExitModalVisible: BehaviorSubject<boolean>;
    isConfirmHereModalVisible: BehaviorSubject<boolean>;
    isShareEventModalVisible: BehaviorSubject<boolean>;
    isLoadingModalVisible: BehaviorSubject<boolean>;
    recordingMediaOptions: BehaviorSubject<string>;
    recordingAudioOptions: BehaviorSubject<string>;
    recordingVideoOptions: BehaviorSubject<string>;
    recordingVideoType: BehaviorSubject<string>;
    recordingVideoOptimized: BehaviorSubject<boolean>;
    recordingDisplayType: BehaviorSubject<"video" | "media" | "all">;
    recordingAddHLS: BehaviorSubject<boolean>;
    recordingNameTags: BehaviorSubject<boolean>;
    recordingBackgroundColor: BehaviorSubject<string>;
    recordingNameTagsColor: BehaviorSubject<string>;
    recordingAddText: BehaviorSubject<boolean>;
    recordingCustomText: BehaviorSubject<string>;
    recordingCustomTextPosition: BehaviorSubject<string>;
    recordingCustomTextColor: BehaviorSubject<string>;
    recordingOrientationVideo: BehaviorSubject<string>;
    clearedToResume: BehaviorSubject<boolean>;
    clearedToRecord: BehaviorSubject<boolean>;
    recordState: BehaviorSubject<string>;
    showRecordButtons: BehaviorSubject<boolean>;
    recordingProgressTime: BehaviorSubject<string>;
    audioSwitching: BehaviorSubject<boolean>;
    videoSwitching: BehaviorSubject<boolean>;
    videoAlreadyOn: BehaviorSubject<boolean>;
    audioAlreadyOn: BehaviorSubject<boolean>;
    componentSizes: BehaviorSubject<ComponentSizes>;
    hasCameraPermission: BehaviorSubject<boolean>;
    hasAudioPermission: BehaviorSubject<boolean>;
    transportCreated: BehaviorSubject<boolean>;
    transportCreatedVideo: BehaviorSubject<boolean>;
    transportCreatedAudio: BehaviorSubject<boolean>;
    transportCreatedScreen: BehaviorSubject<boolean>;
    producerTransport: BehaviorSubject<Transport<import("mediasoup-client/lib/types").AppData> | null>;
    videoProducer: BehaviorSubject<Producer<import("mediasoup-client/lib/types").AppData> | null>;
    params: BehaviorSubject<ProducerOptions>;
    videoParams: BehaviorSubject<ProducerOptions>;
    audioParams: BehaviorSubject<ProducerOptions>;
    audioProducer: BehaviorSubject<Producer<import("mediasoup-client/lib/types").AppData> | null>;
    consumerTransports: BehaviorSubject<TransportType[]>;
    consumingTransports: BehaviorSubject<string[]>;
    polls: BehaviorSubject<Poll[]>;
    poll: BehaviorSubject<Poll | null>;
    isPollModalVisible: BehaviorSubject<boolean>;
    customImage: BehaviorSubject<string>;
    selectedImage: BehaviorSubject<string>;
    segmentVideo: BehaviorSubject<MediaStream | null>;
    selfieSegmentation: BehaviorSubject<SelfieSegmentation | null>;
    pauseSegmentation: BehaviorSubject<boolean>;
    processedStream: BehaviorSubject<MediaStream | null>;
    keepBackground: BehaviorSubject<boolean>;
    backgroundHasChanged: BehaviorSubject<boolean>;
    virtualStream: BehaviorSubject<MediaStream | null>;
    mainCanvas: BehaviorSubject<HTMLCanvasElement | null>;
    prevKeepBackground: BehaviorSubject<boolean>;
    appliedBackground: BehaviorSubject<boolean>;
    isBackgroundModalVisible: BehaviorSubject<boolean>;
    autoClickBackground: BehaviorSubject<boolean>;
    breakoutRooms: BehaviorSubject<BreakoutParticipant[][]>;
    currentRoomIndex: BehaviorSubject<number>;
    canStartBreakout: BehaviorSubject<boolean>;
    breakOutRoomStarted: BehaviorSubject<boolean>;
    breakOutRoomEnded: BehaviorSubject<boolean>;
    hostNewRoom: BehaviorSubject<number>;
    limitedBreakRoom: BehaviorSubject<BreakoutParticipant[]>;
    mainRoomsLength: BehaviorSubject<number>;
    memberRoom: BehaviorSubject<number>;
    isBreakoutRoomsModalVisible: BehaviorSubject<boolean>;
    whiteboardUsers: BehaviorSubject<WhiteboardUser[]>;
    currentWhiteboardIndex: BehaviorSubject<number>;
    canStartWhiteboard: BehaviorSubject<boolean>;
    whiteboardStarted: BehaviorSubject<boolean>;
    whiteboardEnded: BehaviorSubject<boolean>;
    whiteboardLimit: BehaviorSubject<number>;
    isWhiteboardModalVisible: BehaviorSubject<boolean>;
    isConfigureWhiteboardModalVisible: BehaviorSubject<boolean>;
    shapes: BehaviorSubject<Shape[]>;
    useImageBackground: BehaviorSubject<boolean>;
    redoStack: BehaviorSubject<Shape[]>;
    undoStack: BehaviorSubject<string[]>;
    canvasStream: BehaviorSubject<MediaStream | null>;
    canvasWhiteboard: BehaviorSubject<HTMLCanvasElement | null>;
    canvasScreenboard: BehaviorSubject<HTMLCanvasElement | null>;
    processedScreenStream: BehaviorSubject<MediaStream | null>;
    annotateScreenStream: BehaviorSubject<boolean>;
    mainScreenCanvas: BehaviorSubject<HTMLCanvasElement | null>;
    isScreenboardModalVisible: BehaviorSubject<boolean>;
    micActive: BehaviorSubject<boolean>;
    videoActive: BehaviorSubject<boolean>;
    screenShareActive: BehaviorSubject<boolean>;
    endCallActive: BehaviorSubject<boolean>;
    participantsActive: BehaviorSubject<boolean>;
    menuActive: BehaviorSubject<boolean>;
    commentsActive: BehaviorSubject<boolean>;
    updateMessages: (value: Message[]) => void;
    updateStartDirectMessage: (value: boolean) => void;
    updateDirectMessageDetails: (value: Participant | null) => void;
    updateShowMessagesBadge: (value: boolean) => void;
    updateAudioSetting: (value: string) => void;
    updateVideoSetting: (value: string) => void;
    updateScreenshareSetting: (value: string) => void;
    updateChatSetting: (value: string) => void;
    updateDisplayOption: (value: string) => void;
    updateAutoWave: (value: boolean) => void;
    updateForceFullDisplay: (value: boolean) => void;
    updatePrevForceFullDisplay: (value: boolean) => void;
    updatePrevMeetingDisplayType: (value: string) => void;
    updateWaitingRoomCounter: (value: number) => void;
    updateWaitingRoomFilter: (value: string) => void;
    updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
    onWaitingRoomFilterChange: (value: string) => void;
    onWaitingRoomClose: () => void;
    updateRequestCounter: (value: number) => void;
    updateRequestFilter: (value: string) => void;
    updateRequestList: (value: Request[]) => void;
    onRequestFilterChange: (value: string) => void;
    onRequestClose: () => void;
    updateTotalReqWait: (value: number) => void;
    updateAlertVisible: (value: boolean) => void;
    updateAlertMessage: (value: string) => void;
    updateAlertType: (value: "success" | "danger") => void;
    updateAlertDuration: (value: number) => void;
    updateProgressTimerVisible: (value: boolean) => void;
    updateProgressTimerValue: (value: number) => void;
    updateIsMenuModalVisible: (value: boolean) => void;
    updateIsRecordingModalVisible: (value: boolean) => void;
    updateIsSettingsModalVisible: (value: boolean) => void;
    updateIsRequestsModalVisible: (value: boolean) => void;
    updateIsWaitingModalVisible: (value: boolean) => void;
    updateIsCoHostModalVisible: (value: boolean) => void;
    updateIsMediaSettingsModalVisible: (value: boolean) => void;
    updateIsDisplaySettingsModalVisible: (value: boolean) => void;
    updateIsParticipantsModalVisible: (value: boolean) => void;
    updateIsMessagesModalVisible: (value: boolean) => void;
    updateIsConfirmExitModalVisible: (value: boolean) => void;
    updateIsConfirmHereModalVisible: (value: boolean) => void;
    updateIsLoadingModalVisible: (value: boolean) => void;
    updateIsShareEventModalVisible: (value: boolean) => void;
    updateRecordingMediaOptions: (value: string) => void;
    updateRecordingAudioOptions: (value: string) => void;
    updateRecordingVideoOptions: (value: string) => void;
    updateRecordingVideoType: (value: string) => void;
    updateRecordingVideoOptimized: (value: boolean) => void;
    updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
    updateRecordingAddHLS: (value: boolean) => void;
    updateRecordingAddText: (value: boolean) => void;
    updateRecordingCustomText: (value: string) => void;
    updateRecordingCustomTextPosition: (value: string) => void;
    updateRecordingCustomTextColor: (value: string) => void;
    updateRecordingNameTags: (value: boolean) => void;
    updateRecordingBackgroundColor: (value: string) => void;
    updateRecordingNameTagsColor: (value: string) => void;
    updateRecordingOrientationVideo: (value: string) => void;
    updateClearedToResume: (value: boolean) => void;
    updateClearedToRecord: (value: boolean) => void;
    updateRecordState: (value: string) => void;
    updateShowRecordButtons: (value: boolean) => void;
    updateRecordingProgressTime: (value: string) => void;
    updateAudioSwitching: (value: boolean) => void;
    updateVideoSwitching: (value: boolean) => void;
    updateVideoAlreadyOn: (value: boolean) => void;
    updateAudioAlreadyOn: (value: boolean) => void;
    updateComponentSizes: (sizes: ComponentSizes) => void;
    updateHasCameraPermission: (value: boolean) => void;
    updateHasAudioPermission: (value: boolean) => void;
    requestPermissionCamera(): Promise<string>;
    requestPermissionAudio(): Promise<string>;
    updateTransportCreated: (value: boolean) => void;
    updateTransportCreatedVideo: (value: boolean) => void;
    updateTransportCreatedAudio: (value: boolean) => void;
    updateTransportCreatedScreen: (value: boolean) => void;
    updateProducerTransport: (value: Transport | null) => void;
    updateVideoProducer: (value: Producer | null) => void;
    updateParams: (value: ProducerOptions) => void;
    updateVideoParams: (value: ProducerOptions) => void;
    updateAudioParams: (value: ProducerOptions) => void;
    updateAudioProducer: (value: Producer | null) => void;
    updateConsumerTransports: (value: TransportType[]) => void;
    updateConsumingTransports: (value: string[]) => void;
    updatePolls: (value: Poll[]) => void;
    updatePoll: (value: Poll | null) => void;
    updateIsPollModalVisible: (value: boolean) => void;
    updateCustomImage: (value: string) => void;
    updateSelectedImage: (value: string) => void;
    updateSegmentVideo: (value: MediaStream | null) => void;
    updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
    updatePauseSegmentation: (value: boolean) => void;
    updateProcessedStream: (value: MediaStream | null) => void;
    updateKeepBackground: (value: boolean) => void;
    updateBackgroundHasChanged: (value: boolean) => void;
    updateVirtualStream: (value: MediaStream | null) => void;
    updateMainCanvas: (value: HTMLCanvasElement | null) => void;
    updatePrevKeepBackground: (value: boolean) => void;
    updateAppliedBackground: (value: boolean) => void;
    updateIsBackgroundModalVisible: (value: boolean) => void;
    updateAutoClickBackground: (value: boolean) => void;
    updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
    updateCurrentRoomIndex: (value: number) => void;
    updateCanStartBreakout: (value: boolean) => void;
    updateBreakOutRoomStarted: (value: boolean) => void;
    updateBreakOutRoomEnded: (value: boolean) => void;
    updateHostNewRoom: (value: number) => void;
    updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
    updateMainRoomsLength: (value: number) => void;
    updateMemberRoom: (value: number) => void;
    updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
    updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
    updateCurrentWhiteboardIndex: (value: number) => void;
    updateCanStartWhiteboard: (value: boolean) => void;
    updateWhiteboardStarted: (value: boolean) => void;
    updateWhiteboardEnded: (value: boolean) => void;
    updateWhiteboardLimit: (value: number) => void;
    updateIsWhiteboardModalVisible: (value: boolean) => void;
    updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
    updateShapes: (value: Shape[]) => void;
    updateUseImageBackground: (value: boolean) => void;
    updateRedoStack: (value: Shape[]) => void;
    updateUndoStack: (value: string[]) => void;
    updateCanvasStream: (value: MediaStream | null) => void;
    updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
    updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
    updateProcessedScreenStream: (value: MediaStream | null) => void;
    updateAnnotateScreenStream: (value: boolean) => void;
    updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
    updateIsScreenboardModalVisible: (value: boolean) => void;
    checkOrientation: () => "portrait" | "landscape";
    showAlert: ({ message, type, duration, }: {
        message: string;
        type: "success" | "danger";
        duration?: number;
    }) => void;
    getAllParams(): {
        localUIMode: boolean;
        roomName: string;
        member: string;
        adminPasscode: string;
        youAreCoHost: boolean;
        youAreHost: boolean;
        islevel: string;
        confirmedToRecord: boolean;
        meetingDisplayType: string;
        meetingVideoOptimized: boolean;
        eventType: EventType;
        participants: Participant[];
        filteredParticipants: Participant[];
        participantsCounter: number;
        participantsFilter: string;
        consume_sockets: ConsumeSocket[];
        rtpCapabilities: RtpCapabilities | null;
        roomRecvIPs: string[];
        meetingRoomParams: MeetingRoomParams | null;
        itemPageLimit: number;
        audioOnlyRoom: boolean;
        addForBasic: boolean;
        screenPageLimit: number;
        shareScreenStarted: boolean;
        shared: boolean;
        targetOrientation: string;
        targetResolution: string;
        targetResolutionHost: string;
        vidCons: VidCons;
        frameRate: number;
        hParams: HParamsType;
        vParams: VParamsType;
        screenParams: ScreenParamsType;
        aParams: AParamsType;
        recordingAudioPausesLimit: number;
        recordingAudioPausesCount: number;
        recordingAudioSupport: boolean;
        recordingAudioPeopleLimit: number;
        recordingAudioParticipantsTimeLimit: number;
        recordingVideoPausesCount: number;
        recordingVideoPausesLimit: number;
        recordingVideoSupport: boolean;
        recordingVideoPeopleLimit: number;
        recordingVideoParticipantsTimeLimit: number;
        recordingAllParticipantsSupport: boolean;
        recordingVideoParticipantsSupport: boolean;
        recordingAllParticipantsFullRoomSupport: boolean;
        recordingVideoParticipantsFullRoomSupport: boolean;
        recordingPreferredOrientation: string;
        recordingSupportForOtherOrientation: boolean;
        recordingMultiFormatsSupport: boolean;
        userRecordingParams: UserRecordingParams;
        canRecord: boolean;
        startReport: boolean;
        endReport: boolean;
        recordStartTime: number;
        recordElapsedTime: number;
        isTimerRunning: boolean;
        canPauseResume: boolean;
        recordChangeSeconds: number;
        pauseLimit: number;
        pauseRecordCount: number;
        canLaunchRecord: boolean;
        stopLaunchRecord: boolean;
        participantsAll: Participant[];
        firstAll: boolean;
        updateMainWindow: boolean;
        first_round: boolean;
        landScaped: boolean;
        lock_screen: boolean;
        screenId: string;
        allVideoStreams: (Stream | Participant)[];
        newLimitedStreams: (Stream | Participant)[];
        newLimitedStreamsIDs: string[];
        activeSounds: string[];
        screenShareIDStream: string;
        screenShareNameStream: string;
        adminIDStream: string;
        adminNameStream: string;
        youYouStream: (Stream | Participant)[];
        youYouStreamIDs: string[];
        localStream: MediaStream | null;
        recordStarted: boolean;
        recordResumed: boolean;
        recordPaused: boolean;
        recordStopped: boolean;
        adminRestrictSetting: boolean;
        videoRequestState: string | null;
        videoRequestTime: number;
        videoAction: boolean;
        localStreamVideo: MediaStream | null;
        userDefaultVideoInputDevice: string;
        currentFacingMode: string;
        prevFacingMode: string;
        defVideoID: string;
        allowed: boolean;
        dispActiveNames: string[];
        p_dispActiveNames: string[];
        activeNames: string[];
        prevActiveNames: string[];
        p_activeNames: string[];
        membersReceived: boolean;
        deferScreenReceived: boolean;
        hostFirstSwitch: boolean;
        micAction: boolean;
        screenAction: boolean;
        chatAction: boolean;
        audioRequestState: string | null;
        screenRequestState: string | null;
        chatRequestState: string | null;
        audioRequestTime: number;
        screenRequestTime: number;
        chatRequestTime: number;
        updateRequestIntervalSeconds: number;
        oldSoundIds: string[];
        hostLabel: string;
        mainScreenFilled: boolean;
        localStreamScreen: MediaStream | null;
        screenAlreadyOn: boolean;
        chatAlreadyOn: boolean;
        redirectURL: string;
        oldAllStreams: (Stream | Participant)[];
        adminVidID: string;
        streamNames: Stream[];
        non_alVideoStreams: Participant[];
        sortAudioLoudness: boolean;
        audioDecibels: AudioDecibels[];
        mixed_alVideoStreams: (Stream | Participant)[];
        non_alVideoStreams_muted: Participant[];
        paginatedStreams: (Stream | Participant)[][];
        localStreamAudio: MediaStream | null;
        defAudioID: string;
        userDefaultAudioInputDevice: string;
        userDefaultAudioOutputDevice: string;
        prevAudioInputDevice: string;
        prevVideoInputDevice: string;
        audioPaused: boolean;
        mainScreenPerson: string;
        adminOnMainScreen: boolean;
        screenStates: ScreenState[];
        prevScreenStates: ScreenState[];
        updateDateState: number | null;
        lastUpdate: number | null;
        nForReadjustRecord: number;
        fixedPageLimit: number;
        removeAltGrid: boolean;
        nForReadjust: number;
        lastReorderTime: number;
        reorderInterval: number;
        fastReorderInterval: number;
        audStreamNames: Stream[];
        currentUserPage: number;
        mainHeightWidth: number;
        prevMainHeightWidth: number;
        prevDoPaginate: boolean;
        doPaginate: boolean;
        shareEnded: boolean;
        lStreams: (Stream | Participant)[];
        chatRefStreams: (Stream | Participant)[];
        controlHeight: number;
        isWideScreen: boolean;
        isMediumScreen: boolean;
        isSmallScreen: boolean;
        addGrid: boolean;
        addAltGrid: boolean;
        gridRows: number;
        gridCols: number;
        altGridRows: number;
        altGridCols: number;
        numberPages: number;
        currentStreams: (Stream | Participant)[];
        showMiniView: boolean;
        nStream: MediaStream | null;
        defer_receive: boolean;
        allAudioStreams: (Stream | Participant)[];
        screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        remoteScreenStream: Stream[];
        gotAllVids: boolean;
        paginationHeightWidth: number;
        paginationDirection: "horizontal" | "vertical";
        gridSizes: GridSizes;
        screenForceFullDisplay: boolean;
        mainGridStream: CustomMediaComponent[];
        otherGridStreams: CustomMediaComponent[][];
        audioOnlyStreams: CustomMediaComponent[];
        videoInputs: MediaDeviceInfo[];
        audioInputs: MediaDeviceInfo[];
        meetingProgressTime: string;
        meetingElapsedTime: number;
        ref_participants: Participant[];
        messages: Message[];
        startDirectMessage: boolean;
        directMessageDetails: Participant | null;
        coHost: string;
        coHostResponsibility: CoHostResponsibility[];
        audioSetting: string;
        videoSetting: string;
        screenshareSetting: string;
        chatSetting: string;
        autoWave: boolean;
        forceFullDisplay: boolean;
        prevForceFullDisplay: boolean;
        prevMeetingDisplayType: string;
        waitingRoomFilter: string;
        waitingRoomList: WaitingRoomParticipant[];
        waitingRoomCounter: number;
        filteredWaitingRoomList: WaitingRoomParticipant[];
        requestFilter: string;
        requestList: Request[];
        requestCounter: number;
        filteredRequestList: Request[];
        totalReqWait: number;
        alertVisible: boolean;
        alertMessage: string;
        alertType: "success" | "danger";
        alertDuration: number;
        progressTimerVisible: boolean;
        progressTimerValue: number;
        isMenuModalVisible: boolean;
        isRecordingModalVisible: boolean;
        isSettingsModalVisible: boolean;
        isRequestsModalVisible: boolean;
        isWaitingModalVisible: boolean;
        isCoHostModalVisible: boolean;
        isMediaSettingsModalVisible: boolean;
        isDisplaySettingsModalVisible: boolean;
        isParticipantsModalVisible: boolean;
        isMessagesModalVisible: boolean;
        isConfirmExitModalVisible: boolean;
        isConfirmHereModalVisible: boolean;
        isLoadingModalVisible: boolean;
        recordingMediaOptions: string;
        recordingAudioOptions: string;
        recordingVideoOptions: string;
        recordingVideoType: string;
        recordingVideoOptimized: boolean;
        recordingDisplayType: "video" | "media" | "all";
        recordingAddHLS: boolean;
        recordingAddText: boolean;
        recordingCustomText: string;
        recordingCustomTextPosition: string;
        recordingCustomTextColor: string;
        recordingNameTags: boolean;
        recordingBackgroundColor: string;
        recordingNameTagsColor: string;
        recordingOrientationVideo: string;
        clearedToResume: boolean;
        clearedToRecord: boolean;
        recordState: string;
        showRecordButtons: boolean;
        recordingProgressTime: string;
        audioSwitching: boolean;
        videoSwitching: boolean;
        videoAlreadyOn: boolean;
        audioAlreadyOn: boolean;
        componentSizes: ComponentSizes;
        hasCameraPermission: boolean;
        hasAudioPermission: boolean;
        transportCreated: boolean;
        transportCreatedVideo: boolean;
        transportCreatedAudio: boolean;
        transportCreatedScreen: boolean;
        producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
        videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        params: ProducerOptions;
        videoParams: ProducerOptions;
        audioParams: ProducerOptions;
        audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        consumerTransports: TransportType[];
        consumingTransports: string[];
        polls: Poll[];
        poll: Poll | null;
        isPollModalVisible: boolean;
        customImage: string;
        selectedImage: string;
        segmentVideo: MediaStream | null;
        selfieSegmentation: SelfieSegmentation | null;
        pauseSegmentation: boolean;
        processedStream: MediaStream | null;
        keepBackground: boolean;
        backgroundHasChanged: boolean;
        virtualStream: MediaStream | null;
        mainCanvas: HTMLCanvasElement | null;
        prevKeepBackground: boolean;
        appliedBackground: boolean;
        isBackgroundModalVisible: boolean;
        autoClickBackground: boolean;
        breakoutRooms: BreakoutParticipant[][];
        currentRoomIndex: number;
        canStartBreakout: boolean;
        breakOutRoomStarted: boolean;
        breakOutRoomEnded: boolean;
        hostNewRoom: number;
        limitedBreakRoom: BreakoutParticipant[];
        mainRoomsLength: number;
        memberRoom: number;
        isBreakoutRoomsModalVisible: boolean;
        whiteboardUsers: WhiteboardUser[];
        currentWhiteboardIndex: number;
        canStartWhiteboard: boolean;
        whiteboardStarted: boolean;
        whiteboardEnded: boolean;
        whiteboardLimit: number;
        isWhiteboardModalVisible: boolean;
        isConfigureWhiteboardModalVisible: boolean;
        shapes: Shape[];
        useImageBackground: boolean;
        redoStack: Shape[];
        undoStack: string[];
        canvasStream: MediaStream | null;
        canvasWhiteboard: HTMLCanvasElement | null;
        canvasScreenboard: HTMLCanvasElement | null;
        processedScreenStream: MediaStream | null;
        annotateScreenStream: boolean;
        mainScreenCanvas: HTMLCanvasElement | null;
        isScreenboardModalVisible: boolean;
        validated: boolean;
        device: Device | null;
        socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
        checkMediaPermission: boolean;
        onWeb: boolean;
        updateRoomName: (value: string) => void;
        updateMember: (value: string) => void;
        updateAdminPasscode: (value: string) => void;
        updateYouAreCoHost: (value: boolean) => void;
        updateYouAreHost: (value: boolean) => void;
        updateIslevel: (value: string) => void;
        updateCoHost: (value: string) => void;
        updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
        updateConfirmedToRecord: (value: boolean) => void;
        updateMeetingDisplayType: (value: string) => void;
        updateMeetingVideoOptimized: (value: boolean) => void;
        updateEventType: (value: EventType) => void;
        updateParticipants: (value: Participant[]) => void;
        updateParticipantsCounter: (value: number) => void;
        updateParticipantsFilter: (value: string) => void;
        updateConsume_sockets: (value: ConsumeSocket[]) => void;
        updateRtpCapabilities: (value: RtpCapabilities | null) => void;
        updateRoomRecvIPs: (value: string[]) => void;
        updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
        updateItemPageLimit: (value: number) => void;
        updateAudioOnlyRoom: (value: boolean) => void;
        updateAddForBasic: (value: boolean) => void;
        updateScreenPageLimit: (value: number) => void;
        updateShareScreenStarted: (value: boolean) => void;
        updateShared: (value: boolean) => void;
        updateTargetOrientation: (value: string) => void;
        updateTargetResolution: (value: string) => void;
        updateTargetResolutionHost: (value: string) => void;
        updateVidCons: (value: VidCons) => void;
        updateFrameRate: (value: number) => void;
        updateHParams: (value: HParamsType) => void;
        updateVParams: (value: VParamsType) => void;
        updateScreenParams: (value: ScreenParamsType) => void;
        updateAParams: (value: AParamsType) => void;
        updateRecordingAudioPausesLimit: (value: number) => void;
        updateRecordingAudioPausesCount: (value: number) => void;
        updateRecordingAudioSupport: (value: boolean) => void;
        updateRecordingAudioPeopleLimit: (value: number) => void;
        updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
        updateRecordingVideoPausesCount: (value: number) => void;
        updateRecordingVideoPausesLimit: (value: number) => void;
        updateRecordingVideoSupport: (value: boolean) => void;
        updateRecordingVideoPeopleLimit: (value: number) => void;
        updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
        updateRecordingAllParticipantsSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsSupport: (value: boolean) => void;
        updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingPreferredOrientation: (value: string) => void;
        updateRecordingSupportForOtherOrientation: (value: boolean) => void;
        updateRecordingMultiFormatsSupport: (value: boolean) => void;
        updateUserRecordingParams: (value: UserRecordingParams) => void;
        updateCanRecord: (value: boolean) => void;
        updateStartReport: (value: boolean) => void;
        updateEndReport: (value: boolean) => void;
        updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
        updateRecordStartTime: (value: number) => void;
        updateRecordElapsedTime: (value: number) => void;
        updateIsTimerRunning: (value: boolean) => void;
        updateCanPauseResume: (value: boolean) => void;
        updateRecordChangeSeconds: (value: number) => void;
        updatePauseLimit: (value: number) => void;
        updatePauseRecordCount: (value: number) => void;
        updateCanLaunchRecord: (value: boolean) => void;
        updateStopLaunchRecord: (value: boolean) => void;
        updateParticipantsAll: (value: Participant[]) => void;
        updateFirstAll: (value: boolean) => void;
        updateUpdateMainWindow: (value: boolean) => void;
        updateFirst_round: (value: boolean) => void;
        updateLandScaped: (value: boolean) => void;
        updateLock_screen: (value: boolean) => void;
        updateScreenId: (value: string) => void;
        updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreamsIDs: (value: string[]) => void;
        updateActiveSounds: (value: string[]) => void;
        updateScreenShareIDStream: (value: string) => void;
        updateScreenShareNameStream: (value: string) => void;
        updateAdminIDStream: (value: string) => void;
        updateAdminNameStream: (value: string) => void;
        updateYouYouStream: (value: (Participant | Stream)[]) => void;
        updateYouYouStreamIDs: (value: string[]) => void;
        updateLocalStream: (value: MediaStream | null) => void;
        updateRecordStarted: (value: boolean) => void;
        updateRecordResumed: (value: boolean) => void;
        updateRecordPaused: (value: boolean) => void;
        updateRecordStopped: (value: boolean) => void;
        updateAdminRestrictSetting: (value: boolean) => void;
        updateVideoRequestState: (value: string | null) => void;
        updateVideoRequestTime: (value: number) => void;
        updateVideoAction: (value: boolean) => void;
        updateLocalStreamVideo: (value: MediaStream | null) => void;
        updateUserDefaultVideoInputDevice: (value: string) => void;
        updateCurrentFacingMode: (value: string) => void;
        updatePrevFacingMode: (value: string) => void;
        updateDefVideoID: (value: string) => void;
        updateAllowed: (value: boolean) => void;
        updateDispActiveNames: (value: string[]) => void;
        updateP_dispActiveNames: (value: string[]) => void;
        updateActiveNames: (value: string[]) => void;
        updatePrevActiveNames: (value: string[]) => void;
        updateP_activeNames: (value: string[]) => void;
        updateMembersReceived: (value: boolean) => void;
        updateDeferScreenReceived: (value: boolean) => void;
        updateHostFirstSwitch: (value: boolean) => void;
        updateMicAction: (value: boolean) => void;
        updateScreenAction: (value: boolean) => void;
        updateChatAction: (value: boolean) => void;
        updateAudioRequestState: (value: string | null) => void;
        updateScreenRequestState: (value: string | null) => void;
        updateChatRequestState: (value: string | null) => void;
        updateAudioRequestTime: (value: number) => void;
        updateScreenRequestTime: (value: number) => void;
        updateChatRequestTime: (value: number) => void;
        updateOldSoundIds: (value: string[]) => void;
        updateHostLabel: (value: string) => void;
        updateMainScreenFilled: (value: boolean) => void;
        updateLocalStreamScreen: (value: MediaStream | null) => void;
        updateScreenAlreadyOn: (value: boolean) => void;
        updateChatAlreadyOn: (value: boolean) => void;
        updateRedirectURL: (value: string) => void;
        updateOldAllStreams: (value: (Participant | Stream)[]) => void;
        updateAdminVidID: (value: string) => void;
        updateStreamNames: (value: Stream[]) => void;
        updateNon_alVideoStreams: (value: Participant[]) => void;
        updateSortAudioLoudness: (value: boolean) => void;
        updateAudioDecibels: (value: AudioDecibels[]) => void;
        updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNon_alVideoStreams_muted: (value: Participant[]) => void;
        updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
        updateLocalStreamAudio: (value: MediaStream | null) => void;
        updateDefAudioID: (value: string) => void;
        updateUserDefaultAudioInputDevice: (value: string) => void;
        updateUserDefaultAudioOutputDevice: (value: string) => void;
        updatePrevAudioInputDevice: (value: string) => void;
        updatePrevVideoInputDevice: (value: string) => void;
        updateAudioPaused: (value: boolean) => void;
        updateMainScreenPerson: (value: string) => void;
        updateAdminOnMainScreen: (value: boolean) => void;
        updateScreenStates: (value: ScreenState[]) => void;
        updatePrevScreenStates: (value: ScreenState[]) => void;
        updateUpdateDateState: (value: number | null) => void;
        updateLastUpdate: (value: number | null) => void;
        updateNForReadjustRecord: (value: number) => void;
        updateFixedPageLimit: (value: number) => void;
        updateRemoveAltGrid: (value: boolean) => void;
        updateNForReadjust: (value: number) => void;
        updateLastReorderTime: (value: number) => void;
        updateAudStreamNames: (value: Stream[]) => void;
        updateCurrentUserPage: (value: number) => void;
        updateMainHeightWidth: (value: number) => void;
        updatePrevMainHeightWidth: (value: number) => void;
        updatePrevDoPaginate: (value: boolean) => void;
        updateDoPaginate: (value: boolean) => void;
        updateShareEnded: (value: boolean) => void;
        updateLStreams: (value: (Participant | Stream)[]) => void;
        updateChatRefStreams: (value: (Participant | Stream)[]) => void;
        updateControlHeight: (value: number) => void;
        updateIsWideScreen: (value: boolean) => void;
        updateIsMediumScreen: (value: boolean) => void;
        updateIsSmallScreen: (value: boolean) => void;
        updateAddGrid: (value: boolean) => void;
        updateAddAltGrid: (value: boolean) => void;
        updateGridRows: (value: number) => void;
        updateGridCols: (value: number) => void;
        updateAltGridRows: (value: number) => void;
        updateAltGridCols: (value: number) => void;
        updateNumberPages: (value: number) => void;
        updateCurrentStreams: (value: (Participant | Stream)[]) => void;
        updateShowMiniView: (value: boolean) => void;
        updateNStream: (value: MediaStream | null) => void;
        updateDefer_receive: (value: boolean) => void;
        updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
        updateRemoteScreenStream: (value: Stream[]) => void;
        updateScreenProducer: (value: Producer | null) => void;
        updateGotAllVids: (value: boolean) => void;
        updatePaginationHeightWidth: (value: number) => void;
        updatePaginationDirection: (value: "horizontal" | "vertical") => void;
        updateGridSizes: (value: GridSizes) => void;
        updateScreenForceFullDisplay: (value: boolean) => void;
        updateMainGridStream: (value: CustomMediaComponent[]) => void;
        updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
        updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
        updateVideoInputs: (value: MediaDeviceInfo[]) => void;
        updateAudioInputs: (value: MediaDeviceInfo[]) => void;
        updateMeetingProgressTime: (value: string) => void;
        updateMeetingElapsedTime: (value: number) => void;
        updateRef_participants: (value: Participant[]) => void;
        updateMessages: (value: Message[]) => void;
        updateStartDirectMessage: (value: boolean) => void;
        updateDirectMessageDetails: (value: Participant | null) => void;
        updateShowMessagesBadge: (value: boolean) => void;
        updateAudioSetting: (value: string) => void;
        updateVideoSetting: (value: string) => void;
        updateScreenshareSetting: (value: string) => void;
        updateChatSetting: (value: string) => void;
        updateAutoWave: (value: boolean) => void;
        updateForceFullDisplay: (value: boolean) => void;
        updatePrevForceFullDisplay: (value: boolean) => void;
        updatePrevMeetingDisplayType: (value: string) => void;
        updateWaitingRoomFilter: (value: string) => void;
        updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
        updateWaitingRoomCounter: (value: number) => void;
        updateRequestFilter: (value: string) => void;
        updateRequestList: (value: Request[]) => void;
        updateRequestCounter: (value: number) => void;
        updateTotalReqWait: (value: number) => void;
        updateIsMenuModalVisible: (value: boolean) => void;
        updateIsRecordingModalVisible: (value: boolean) => void;
        updateIsSettingsModalVisible: (value: boolean) => void;
        updateIsRequestsModalVisible: (value: boolean) => void;
        updateIsWaitingModalVisible: (value: boolean) => void;
        updateIsCoHostModalVisible: (value: boolean) => void;
        updateIsMediaSettingsModalVisible: (value: boolean) => void;
        updateIsDisplaySettingsModalVisible: (value: boolean) => void;
        updateIsParticipantsModalVisible: (value: boolean) => void;
        updateIsMessagesModalVisible: (value: boolean) => void;
        updateIsConfirmExitModalVisible: (value: boolean) => void;
        updateIsConfirmHereModalVisible: (value: boolean) => void;
        updateIsLoadingModalVisible: (value: boolean) => void;
        updateRecordingMediaOptions: (value: string) => void;
        updateRecordingAudioOptions: (value: string) => void;
        updateRecordingVideoOptions: (value: string) => void;
        updateRecordingVideoType: (value: string) => void;
        updateRecordingVideoOptimized: (value: boolean) => void;
        updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
        updateRecordingAddHLS: (value: boolean) => void;
        updateRecordingAddText: (value: boolean) => void;
        updateRecordingCustomText: (value: string) => void;
        updateRecordingCustomTextPosition: (value: string) => void;
        updateRecordingCustomTextColor: (value: string) => void;
        updateRecordingNameTags: (value: boolean) => void;
        updateRecordingBackgroundColor: (value: string) => void;
        updateRecordingNameTagsColor: (value: string) => void;
        updateRecordingOrientationVideo: (value: string) => void;
        updateClearedToResume: (value: boolean) => void;
        updateClearedToRecord: (value: boolean) => void;
        updateRecordState: (value: string) => void;
        updateShowRecordButtons: (value: boolean) => void;
        updateRecordingProgressTime: (value: string) => void;
        updateAudioSwitching: (value: boolean) => void;
        updateVideoSwitching: (value: boolean) => void;
        updateVideoAlreadyOn: (value: boolean) => void;
        updateAudioAlreadyOn: (value: boolean) => void;
        updateComponentSizes: (sizes: ComponentSizes) => void;
        updateHasCameraPermission: (value: boolean) => void;
        updateHasAudioPermission: (value: boolean) => void;
        updateTransportCreated: (value: boolean) => void;
        updateTransportCreatedVideo: (value: boolean) => void;
        updateTransportCreatedAudio: (value: boolean) => void;
        updateTransportCreatedScreen: (value: boolean) => void;
        updateProducerTransport: (value: Transport | null) => void;
        updateVideoProducer: (value: Producer | null) => void;
        updateParams: (value: ProducerOptions) => void;
        updateVideoParams: (value: ProducerOptions) => void;
        updateAudioParams: (value: ProducerOptions) => void;
        updateAudioProducer: (value: Producer | null) => void;
        updateConsumerTransports: (value: TransportType[]) => void;
        updateConsumingTransports: (value: string[]) => void;
        updatePolls: (value: Poll[]) => void;
        updatePoll: (value: Poll | null) => void;
        updateIsPollModalVisible: (value: boolean) => void;
        updateCustomImage: (value: string) => void;
        updateSelectedImage: (value: string) => void;
        updateSegmentVideo: (value: MediaStream | null) => void;
        updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
        updatePauseSegmentation: (value: boolean) => void;
        updateProcessedStream: (value: MediaStream | null) => void;
        updateKeepBackground: (value: boolean) => void;
        updateBackgroundHasChanged: (value: boolean) => void;
        updateVirtualStream: (value: MediaStream | null) => void;
        updateMainCanvas: (value: HTMLCanvasElement | null) => void;
        updatePrevKeepBackground: (value: boolean) => void;
        updateAppliedBackground: (value: boolean) => void;
        updateIsBackgroundModalVisible: (value: boolean) => void;
        updateAutoClickBackground: (value: boolean) => void;
        updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
        updateCurrentRoomIndex: (value: number) => void;
        updateCanStartBreakout: (value: boolean) => void;
        updateBreakOutRoomStarted: (value: boolean) => void;
        updateBreakOutRoomEnded: (value: boolean) => void;
        updateHostNewRoom: (value: number) => void;
        updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
        updateMainRoomsLength: (value: number) => void;
        updateMemberRoom: (value: number) => void;
        updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
        updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
        updateCurrentWhiteboardIndex: (value: number) => void;
        updateCanStartWhiteboard: (value: boolean) => void;
        updateWhiteboardStarted: (value: boolean) => void;
        updateWhiteboardEnded: (value: boolean) => void;
        updateWhiteboardLimit: (value: number) => void;
        updateIsWhiteboardModalVisible: (value: boolean) => void;
        updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
        updateShapes: (value: Shape[]) => void;
        updateUseImageBackground: (value: boolean) => void;
        updateRedoStack: (value: Shape[]) => void;
        updateUndoStack: (value: string[]) => void;
        updateCanvasStream: (value: MediaStream | null) => void;
        updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
        updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
        updateProcessedScreenStream: (value: MediaStream | null) => void;
        updateAnnotateScreenStream: (value: boolean) => void;
        updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
        updateIsScreenboardModalVisible: (value: boolean) => void;
        checkOrientation: () => "portrait" | "landscape";
        updateDevice: (value: Device | null) => void;
        updateSocket: (value: Socket) => void;
        updateValidated: (value: boolean) => void;
        showAlert: ({ message, type, duration, }: {
            message: string;
            type: "success" | "danger";
            duration?: number;
        }) => void;
        getUpdatedAllParams: () => {
            updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
            mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
            dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
            stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
            checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
            startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
            requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
            reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
            prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
                component: any;
                inputs: any;
            }[] | void>;
            getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
            rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
            trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
            consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
            connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
            connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
            connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
            connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
            processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
            resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
            readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
            checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
            getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
            calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
            addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
            onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
            sleep: typeof sleep;
            changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
            compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
            compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
            createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
            resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
            receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
            disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
            disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
            disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
            getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
            signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
            connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
            reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
            updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
            closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
            autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
            switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
            switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
                videoPreference: string;
                checkoff: boolean;
                parameters: any;
            }) => Promise<void>;
            switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
            getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
            formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
            connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
            createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
            handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
            handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
            handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
            captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
            resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
            processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
            checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
            streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
            streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
            streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
            streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
            clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
            clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
            clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
            switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
            requestPermissionCamera: () => Promise<string>;
            requestPermissionAudio: () => Promise<string>;
            localUIMode: boolean;
            roomName: string;
            member: string;
            adminPasscode: string;
            youAreCoHost: boolean;
            youAreHost: boolean;
            islevel: string;
            confirmedToRecord: boolean;
            meetingDisplayType: string;
            meetingVideoOptimized: boolean;
            eventType: EventType;
            participants: Participant[];
            filteredParticipants: Participant[];
            participantsCounter: number;
            participantsFilter: string;
            consume_sockets: ConsumeSocket[];
            rtpCapabilities: RtpCapabilities | null;
            roomRecvIPs: string[];
            meetingRoomParams: MeetingRoomParams | null;
            itemPageLimit: number;
            audioOnlyRoom: boolean;
            addForBasic: boolean;
            screenPageLimit: number;
            shareScreenStarted: boolean;
            shared: boolean;
            targetOrientation: string;
            targetResolution: string;
            targetResolutionHost: string;
            vidCons: VidCons;
            frameRate: number;
            hParams: HParamsType;
            vParams: VParamsType;
            screenParams: ScreenParamsType;
            aParams: AParamsType;
            recordingAudioPausesLimit: number;
            recordingAudioPausesCount: number;
            recordingAudioSupport: boolean;
            recordingAudioPeopleLimit: number;
            recordingAudioParticipantsTimeLimit: number;
            recordingVideoPausesCount: number;
            recordingVideoPausesLimit: number;
            recordingVideoSupport: boolean;
            recordingVideoPeopleLimit: number;
            recordingVideoParticipantsTimeLimit: number;
            recordingAllParticipantsSupport: boolean;
            recordingVideoParticipantsSupport: boolean;
            recordingAllParticipantsFullRoomSupport: boolean;
            recordingVideoParticipantsFullRoomSupport: boolean;
            recordingPreferredOrientation: string;
            recordingSupportForOtherOrientation: boolean;
            recordingMultiFormatsSupport: boolean;
            userRecordingParams: UserRecordingParams;
            canRecord: boolean;
            startReport: boolean;
            endReport: boolean;
            recordStartTime: number;
            recordElapsedTime: number;
            isTimerRunning: boolean;
            canPauseResume: boolean;
            recordChangeSeconds: number;
            pauseLimit: number;
            pauseRecordCount: number;
            canLaunchRecord: boolean;
            stopLaunchRecord: boolean;
            participantsAll: Participant[];
            firstAll: boolean;
            updateMainWindow: boolean;
            first_round: boolean;
            landScaped: boolean;
            lock_screen: boolean;
            screenId: string;
            allVideoStreams: (Stream | Participant)[];
            newLimitedStreams: (Stream | Participant)[];
            newLimitedStreamsIDs: string[];
            activeSounds: string[];
            screenShareIDStream: string;
            screenShareNameStream: string;
            adminIDStream: string;
            adminNameStream: string;
            youYouStream: (Stream | Participant)[];
            youYouStreamIDs: string[];
            localStream: MediaStream | null;
            recordStarted: boolean;
            recordResumed: boolean;
            recordPaused: boolean;
            recordStopped: boolean;
            adminRestrictSetting: boolean;
            videoRequestState: string | null;
            videoRequestTime: number;
            videoAction: boolean;
            localStreamVideo: MediaStream | null;
            userDefaultVideoInputDevice: string;
            currentFacingMode: string;
            prevFacingMode: string;
            defVideoID: string;
            allowed: boolean;
            dispActiveNames: string[];
            p_dispActiveNames: string[];
            activeNames: string[];
            prevActiveNames: string[];
            p_activeNames: string[];
            membersReceived: boolean;
            deferScreenReceived: boolean;
            hostFirstSwitch: boolean;
            micAction: boolean;
            screenAction: boolean;
            chatAction: boolean;
            audioRequestState: string | null;
            screenRequestState: string | null;
            chatRequestState: string | null;
            audioRequestTime: number;
            screenRequestTime: number;
            chatRequestTime: number;
            updateRequestIntervalSeconds: number;
            oldSoundIds: string[];
            hostLabel: string;
            mainScreenFilled: boolean;
            localStreamScreen: MediaStream | null;
            screenAlreadyOn: boolean;
            chatAlreadyOn: boolean;
            redirectURL: string;
            oldAllStreams: (Stream | Participant)[];
            adminVidID: string;
            streamNames: Stream[];
            non_alVideoStreams: Participant[];
            sortAudioLoudness: boolean;
            audioDecibels: AudioDecibels[];
            mixed_alVideoStreams: (Stream | Participant)[];
            non_alVideoStreams_muted: Participant[];
            paginatedStreams: (Stream | Participant)[][];
            localStreamAudio: MediaStream | null;
            defAudioID: string;
            userDefaultAudioInputDevice: string;
            userDefaultAudioOutputDevice: string;
            prevAudioInputDevice: string;
            prevVideoInputDevice: string;
            audioPaused: boolean;
            mainScreenPerson: string;
            adminOnMainScreen: boolean;
            screenStates: ScreenState[];
            prevScreenStates: ScreenState[];
            updateDateState: number | null;
            lastUpdate: number | null;
            nForReadjustRecord: number;
            fixedPageLimit: number;
            removeAltGrid: boolean;
            nForReadjust: number;
            lastReorderTime: number;
            reorderInterval: number;
            fastReorderInterval: number;
            audStreamNames: Stream[];
            currentUserPage: number;
            mainHeightWidth: number;
            prevMainHeightWidth: number;
            prevDoPaginate: boolean;
            doPaginate: boolean;
            shareEnded: boolean;
            lStreams: (Stream | Participant)[];
            chatRefStreams: (Stream | Participant)[];
            controlHeight: number;
            isWideScreen: boolean;
            isMediumScreen: boolean;
            isSmallScreen: boolean;
            addGrid: boolean;
            addAltGrid: boolean;
            gridRows: number;
            gridCols: number;
            altGridRows: number;
            altGridCols: number;
            numberPages: number;
            currentStreams: (Stream | Participant)[];
            showMiniView: boolean;
            nStream: MediaStream | null;
            defer_receive: boolean;
            allAudioStreams: (Stream | Participant)[];
            screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            remoteScreenStream: Stream[];
            gotAllVids: boolean;
            paginationHeightWidth: number;
            paginationDirection: "horizontal" | "vertical";
            gridSizes: GridSizes;
            screenForceFullDisplay: boolean;
            mainGridStream: CustomMediaComponent[];
            otherGridStreams: CustomMediaComponent[][];
            audioOnlyStreams: CustomMediaComponent[];
            videoInputs: MediaDeviceInfo[];
            audioInputs: MediaDeviceInfo[];
            meetingProgressTime: string;
            meetingElapsedTime: number;
            ref_participants: Participant[];
            messages: Message[];
            startDirectMessage: boolean;
            directMessageDetails: Participant | null;
            coHost: string;
            coHostResponsibility: CoHostResponsibility[];
            audioSetting: string;
            videoSetting: string;
            screenshareSetting: string;
            chatSetting: string;
            autoWave: boolean;
            forceFullDisplay: boolean;
            prevForceFullDisplay: boolean;
            prevMeetingDisplayType: string;
            waitingRoomFilter: string;
            waitingRoomList: WaitingRoomParticipant[];
            waitingRoomCounter: number;
            filteredWaitingRoomList: WaitingRoomParticipant[];
            requestFilter: string;
            requestList: Request[];
            requestCounter: number;
            filteredRequestList: Request[];
            totalReqWait: number;
            alertVisible: boolean;
            alertMessage: string;
            alertType: "success" | "danger";
            alertDuration: number;
            progressTimerVisible: boolean;
            progressTimerValue: number;
            isMenuModalVisible: boolean;
            isRecordingModalVisible: boolean;
            isSettingsModalVisible: boolean;
            isRequestsModalVisible: boolean;
            isWaitingModalVisible: boolean;
            isCoHostModalVisible: boolean;
            isMediaSettingsModalVisible: boolean;
            isDisplaySettingsModalVisible: boolean;
            isParticipantsModalVisible: boolean;
            isMessagesModalVisible: boolean;
            isConfirmExitModalVisible: boolean;
            isConfirmHereModalVisible: boolean;
            isLoadingModalVisible: boolean;
            recordingMediaOptions: string;
            recordingAudioOptions: string;
            recordingVideoOptions: string;
            recordingVideoType: string;
            recordingVideoOptimized: boolean;
            recordingDisplayType: "video" | "media" | "all";
            recordingAddHLS: boolean;
            recordingAddText: boolean;
            recordingCustomText: string;
            recordingCustomTextPosition: string;
            recordingCustomTextColor: string;
            recordingNameTags: boolean;
            recordingBackgroundColor: string;
            recordingNameTagsColor: string;
            recordingOrientationVideo: string;
            clearedToResume: boolean;
            clearedToRecord: boolean;
            recordState: string;
            showRecordButtons: boolean;
            recordingProgressTime: string;
            audioSwitching: boolean;
            videoSwitching: boolean;
            videoAlreadyOn: boolean;
            audioAlreadyOn: boolean;
            componentSizes: ComponentSizes;
            hasCameraPermission: boolean;
            hasAudioPermission: boolean;
            transportCreated: boolean;
            transportCreatedVideo: boolean;
            transportCreatedAudio: boolean;
            transportCreatedScreen: boolean;
            producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
            videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            params: ProducerOptions;
            videoParams: ProducerOptions;
            audioParams: ProducerOptions;
            audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            consumerTransports: TransportType[];
            consumingTransports: string[];
            polls: Poll[];
            poll: Poll | null;
            isPollModalVisible: boolean;
            customImage: string;
            selectedImage: string;
            segmentVideo: MediaStream | null;
            selfieSegmentation: SelfieSegmentation | null;
            pauseSegmentation: boolean;
            processedStream: MediaStream | null;
            keepBackground: boolean;
            backgroundHasChanged: boolean;
            virtualStream: MediaStream | null;
            mainCanvas: HTMLCanvasElement | null;
            prevKeepBackground: boolean;
            appliedBackground: boolean;
            isBackgroundModalVisible: boolean;
            autoClickBackground: boolean;
            breakoutRooms: BreakoutParticipant[][];
            currentRoomIndex: number;
            canStartBreakout: boolean;
            breakOutRoomStarted: boolean;
            breakOutRoomEnded: boolean;
            hostNewRoom: number;
            limitedBreakRoom: BreakoutParticipant[];
            mainRoomsLength: number;
            memberRoom: number;
            isBreakoutRoomsModalVisible: boolean;
            whiteboardUsers: WhiteboardUser[];
            currentWhiteboardIndex: number;
            canStartWhiteboard: boolean;
            whiteboardStarted: boolean;
            whiteboardEnded: boolean;
            whiteboardLimit: number;
            isWhiteboardModalVisible: boolean;
            isConfigureWhiteboardModalVisible: boolean;
            shapes: Shape[];
            useImageBackground: boolean;
            redoStack: Shape[];
            undoStack: string[];
            canvasStream: MediaStream | null;
            canvasWhiteboard: HTMLCanvasElement | null;
            canvasScreenboard: HTMLCanvasElement | null;
            processedScreenStream: MediaStream | null;
            annotateScreenStream: boolean;
            mainScreenCanvas: HTMLCanvasElement | null;
            isScreenboardModalVisible: boolean;
            validated: boolean;
            device: Device | null;
            socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
            checkMediaPermission: boolean;
            onWeb: boolean;
            updateRoomName: (value: string) => void;
            updateMember: (value: string) => void;
            updateAdminPasscode: (value: string) => void;
            updateYouAreCoHost: (value: boolean) => void;
            updateYouAreHost: (value: boolean) => void;
            updateIslevel: (value: string) => void;
            updateCoHost: (value: string) => void;
            updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
            updateConfirmedToRecord: (value: boolean) => void;
            updateMeetingDisplayType: (value: string) => void;
            updateMeetingVideoOptimized: (value: boolean) => void;
            updateEventType: (value: EventType) => void;
            updateParticipants: (value: Participant[]) => void;
            updateParticipantsCounter: (value: number) => void;
            updateParticipantsFilter: (value: string) => void;
            updateConsume_sockets: (value: ConsumeSocket[]) => void;
            updateRtpCapabilities: (value: RtpCapabilities | null) => void;
            updateRoomRecvIPs: (value: string[]) => void;
            updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
            updateItemPageLimit: (value: number) => void;
            updateAudioOnlyRoom: (value: boolean) => void;
            updateAddForBasic: (value: boolean) => void;
            updateScreenPageLimit: (value: number) => void;
            updateShareScreenStarted: (value: boolean) => void;
            updateShared: (value: boolean) => void;
            updateTargetOrientation: (value: string) => void;
            updateTargetResolution: (value: string) => void;
            updateTargetResolutionHost: (value: string) => void;
            updateVidCons: (value: VidCons) => void;
            updateFrameRate: (value: number) => void;
            updateHParams: (value: HParamsType) => void;
            updateVParams: (value: VParamsType) => void;
            updateScreenParams: (value: ScreenParamsType) => void;
            updateAParams: (value: AParamsType) => void;
            updateRecordingAudioPausesLimit: (value: number) => void;
            updateRecordingAudioPausesCount: (value: number) => void;
            updateRecordingAudioSupport: (value: boolean) => void;
            updateRecordingAudioPeopleLimit: (value: number) => void;
            updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
            updateRecordingVideoPausesCount: (value: number) => void;
            updateRecordingVideoPausesLimit: (value: number) => void;
            updateRecordingVideoSupport: (value: boolean) => void;
            updateRecordingVideoPeopleLimit: (value: number) => void;
            updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
            updateRecordingAllParticipantsSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsSupport: (value: boolean) => void;
            updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingPreferredOrientation: (value: string) => void;
            updateRecordingSupportForOtherOrientation: (value: boolean) => void;
            updateRecordingMultiFormatsSupport: (value: boolean) => void;
            updateUserRecordingParams: (value: UserRecordingParams) => void;
            updateCanRecord: (value: boolean) => void;
            updateStartReport: (value: boolean) => void;
            updateEndReport: (value: boolean) => void;
            updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
            updateRecordStartTime: (value: number) => void;
            updateRecordElapsedTime: (value: number) => void;
            updateIsTimerRunning: (value: boolean) => void;
            updateCanPauseResume: (value: boolean) => void;
            updateRecordChangeSeconds: (value: number) => void;
            updatePauseLimit: (value: number) => void;
            updatePauseRecordCount: (value: number) => void;
            updateCanLaunchRecord: (value: boolean) => void;
            updateStopLaunchRecord: (value: boolean) => void;
            updateParticipantsAll: (value: Participant[]) => void;
            updateFirstAll: (value: boolean) => void;
            updateUpdateMainWindow: (value: boolean) => void;
            updateFirst_round: (value: boolean) => void;
            updateLandScaped: (value: boolean) => void;
            updateLock_screen: (value: boolean) => void;
            updateScreenId: (value: string) => void;
            updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreamsIDs: (value: string[]) => void;
            updateActiveSounds: (value: string[]) => void;
            updateScreenShareIDStream: (value: string) => void;
            updateScreenShareNameStream: (value: string) => void;
            updateAdminIDStream: (value: string) => void;
            updateAdminNameStream: (value: string) => void;
            updateYouYouStream: (value: (Participant | Stream)[]) => void;
            updateYouYouStreamIDs: (value: string[]) => void;
            updateLocalStream: (value: MediaStream | null) => void;
            updateRecordStarted: (value: boolean) => void;
            updateRecordResumed: (value: boolean) => void;
            updateRecordPaused: (value: boolean) => void;
            updateRecordStopped: (value: boolean) => void;
            updateAdminRestrictSetting: (value: boolean) => void;
            updateVideoRequestState: (value: string | null) => void;
            updateVideoRequestTime: (value: number) => void;
            updateVideoAction: (value: boolean) => void;
            updateLocalStreamVideo: (value: MediaStream | null) => void;
            updateUserDefaultVideoInputDevice: (value: string) => void;
            updateCurrentFacingMode: (value: string) => void;
            updatePrevFacingMode: (value: string) => void;
            updateDefVideoID: (value: string) => void;
            updateAllowed: (value: boolean) => void;
            updateDispActiveNames: (value: string[]) => void;
            updateP_dispActiveNames: (value: string[]) => void;
            updateActiveNames: (value: string[]) => void;
            updatePrevActiveNames: (value: string[]) => void;
            updateP_activeNames: (value: string[]) => void;
            updateMembersReceived: (value: boolean) => void;
            updateDeferScreenReceived: (value: boolean) => void;
            updateHostFirstSwitch: (value: boolean) => void;
            updateMicAction: (value: boolean) => void;
            updateScreenAction: (value: boolean) => void;
            updateChatAction: (value: boolean) => void;
            updateAudioRequestState: (value: string | null) => void;
            updateScreenRequestState: (value: string | null) => void;
            updateChatRequestState: (value: string | null) => void;
            updateAudioRequestTime: (value: number) => void;
            updateScreenRequestTime: (value: number) => void;
            updateChatRequestTime: (value: number) => void;
            updateOldSoundIds: (value: string[]) => void;
            updateHostLabel: (value: string) => void;
            updateMainScreenFilled: (value: boolean) => void;
            updateLocalStreamScreen: (value: MediaStream | null) => void;
            updateScreenAlreadyOn: (value: boolean) => void;
            updateChatAlreadyOn: (value: boolean) => void;
            updateRedirectURL: (value: string) => void;
            updateOldAllStreams: (value: (Participant | Stream)[]) => void;
            updateAdminVidID: (value: string) => void;
            updateStreamNames: (value: Stream[]) => void;
            updateNon_alVideoStreams: (value: Participant[]) => void;
            updateSortAudioLoudness: (value: boolean) => void;
            updateAudioDecibels: (value: AudioDecibels[]) => void;
            updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNon_alVideoStreams_muted: (value: Participant[]) => void;
            updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
            updateLocalStreamAudio: (value: MediaStream | null) => void;
            updateDefAudioID: (value: string) => void;
            updateUserDefaultAudioInputDevice: (value: string) => void;
            updateUserDefaultAudioOutputDevice: (value: string) => void;
            updatePrevAudioInputDevice: (value: string) => void;
            updatePrevVideoInputDevice: (value: string) => void;
            updateAudioPaused: (value: boolean) => void;
            updateMainScreenPerson: (value: string) => void;
            updateAdminOnMainScreen: (value: boolean) => void;
            updateScreenStates: (value: ScreenState[]) => void;
            updatePrevScreenStates: (value: ScreenState[]) => void;
            updateUpdateDateState: (value: number | null) => void;
            updateLastUpdate: (value: number | null) => void;
            updateNForReadjustRecord: (value: number) => void;
            updateFixedPageLimit: (value: number) => void;
            updateRemoveAltGrid: (value: boolean) => void;
            updateNForReadjust: (value: number) => void;
            updateLastReorderTime: (value: number) => void;
            updateAudStreamNames: (value: Stream[]) => void;
            updateCurrentUserPage: (value: number) => void;
            updateMainHeightWidth: (value: number) => void;
            updatePrevMainHeightWidth: (value: number) => void;
            updatePrevDoPaginate: (value: boolean) => void;
            updateDoPaginate: (value: boolean) => void;
            updateShareEnded: (value: boolean) => void;
            updateLStreams: (value: (Participant | Stream)[]) => void;
            updateChatRefStreams: (value: (Participant | Stream)[]) => void;
            updateControlHeight: (value: number) => void;
            updateIsWideScreen: (value: boolean) => void;
            updateIsMediumScreen: (value: boolean) => void;
            updateIsSmallScreen: (value: boolean) => void;
            updateAddGrid: (value: boolean) => void;
            updateAddAltGrid: (value: boolean) => void;
            updateGridRows: (value: number) => void;
            updateGridCols: (value: number) => void;
            updateAltGridRows: (value: number) => void;
            updateAltGridCols: (value: number) => void;
            updateNumberPages: (value: number) => void;
            updateCurrentStreams: (value: (Participant | Stream)[]) => void;
            updateShowMiniView: (value: boolean) => void;
            updateNStream: (value: MediaStream | null) => void;
            updateDefer_receive: (value: boolean) => void;
            updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
            updateRemoteScreenStream: (value: Stream[]) => void;
            updateScreenProducer: (value: Producer | null) => void;
            updateGotAllVids: (value: boolean) => void;
            updatePaginationHeightWidth: (value: number) => void;
            updatePaginationDirection: (value: "horizontal" | "vertical") => void;
            updateGridSizes: (value: GridSizes) => void;
            updateScreenForceFullDisplay: (value: boolean) => void;
            updateMainGridStream: (value: CustomMediaComponent[]) => void;
            updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
            updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
            updateVideoInputs: (value: MediaDeviceInfo[]) => void;
            updateAudioInputs: (value: MediaDeviceInfo[]) => void;
            updateMeetingProgressTime: (value: string) => void;
            updateMeetingElapsedTime: (value: number) => void;
            updateRef_participants: (value: Participant[]) => void;
            updateMessages: (value: Message[]) => void;
            updateStartDirectMessage: (value: boolean) => void;
            updateDirectMessageDetails: (value: Participant | null) => void;
            updateShowMessagesBadge: (value: boolean) => void;
            updateAudioSetting: (value: string) => void;
            updateVideoSetting: (value: string) => void;
            updateScreenshareSetting: (value: string) => void;
            updateChatSetting: (value: string) => void;
            updateAutoWave: (value: boolean) => void;
            updateForceFullDisplay: (value: boolean) => void;
            updatePrevForceFullDisplay: (value: boolean) => void;
            updatePrevMeetingDisplayType: (value: string) => void;
            updateWaitingRoomFilter: (value: string) => void;
            updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
            updateWaitingRoomCounter: (value: number) => void;
            updateRequestFilter: (value: string) => void;
            updateRequestList: (value: Request[]) => void;
            updateRequestCounter: (value: number) => void;
            updateTotalReqWait: (value: number) => void;
            updateIsMenuModalVisible: (value: boolean) => void;
            updateIsRecordingModalVisible: (value: boolean) => void;
            updateIsSettingsModalVisible: (value: boolean) => void;
            updateIsRequestsModalVisible: (value: boolean) => void;
            updateIsWaitingModalVisible: (value: boolean) => void;
            updateIsCoHostModalVisible: (value: boolean) => void;
            updateIsMediaSettingsModalVisible: (value: boolean) => void;
            updateIsDisplaySettingsModalVisible: (value: boolean) => void;
            updateIsParticipantsModalVisible: (value: boolean) => void;
            updateIsMessagesModalVisible: (value: boolean) => void;
            updateIsConfirmExitModalVisible: (value: boolean) => void;
            updateIsConfirmHereModalVisible: (value: boolean) => void;
            updateIsLoadingModalVisible: (value: boolean) => void;
            updateRecordingMediaOptions: (value: string) => void;
            updateRecordingAudioOptions: (value: string) => void;
            updateRecordingVideoOptions: (value: string) => void;
            updateRecordingVideoType: (value: string) => void;
            updateRecordingVideoOptimized: (value: boolean) => void;
            updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
            updateRecordingAddHLS: (value: boolean) => void;
            updateRecordingAddText: (value: boolean) => void;
            updateRecordingCustomText: (value: string) => void;
            updateRecordingCustomTextPosition: (value: string) => void;
            updateRecordingCustomTextColor: (value: string) => void;
            updateRecordingNameTags: (value: boolean) => void;
            updateRecordingBackgroundColor: (value: string) => void;
            updateRecordingNameTagsColor: (value: string) => void;
            updateRecordingOrientationVideo: (value: string) => void;
            updateClearedToResume: (value: boolean) => void;
            updateClearedToRecord: (value: boolean) => void;
            updateRecordState: (value: string) => void;
            updateShowRecordButtons: (value: boolean) => void;
            updateRecordingProgressTime: (value: string) => void;
            updateAudioSwitching: (value: boolean) => void;
            updateVideoSwitching: (value: boolean) => void;
            updateVideoAlreadyOn: (value: boolean) => void;
            updateAudioAlreadyOn: (value: boolean) => void;
            updateComponentSizes: (sizes: ComponentSizes) => void;
            updateHasCameraPermission: (value: boolean) => void;
            updateHasAudioPermission: (value: boolean) => void;
            updateTransportCreated: (value: boolean) => void;
            updateTransportCreatedVideo: (value: boolean) => void;
            updateTransportCreatedAudio: (value: boolean) => void;
            updateTransportCreatedScreen: (value: boolean) => void;
            updateProducerTransport: (value: Transport | null) => void;
            updateVideoProducer: (value: Producer | null) => void;
            updateParams: (value: ProducerOptions) => void;
            updateVideoParams: (value: ProducerOptions) => void;
            updateAudioParams: (value: ProducerOptions) => void;
            updateAudioProducer: (value: Producer | null) => void;
            updateConsumerTransports: (value: TransportType[]) => void;
            updateConsumingTransports: (value: string[]) => void;
            updatePolls: (value: Poll[]) => void;
            updatePoll: (value: Poll | null) => void;
            updateIsPollModalVisible: (value: boolean) => void;
            updateCustomImage: (value: string) => void;
            updateSelectedImage: (value: string) => void;
            updateSegmentVideo: (value: MediaStream | null) => void;
            updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
            updatePauseSegmentation: (value: boolean) => void;
            updateProcessedStream: (value: MediaStream | null) => void;
            updateKeepBackground: (value: boolean) => void;
            updateBackgroundHasChanged: (value: boolean) => void;
            updateVirtualStream: (value: MediaStream | null) => void;
            updateMainCanvas: (value: HTMLCanvasElement | null) => void;
            updatePrevKeepBackground: (value: boolean) => void;
            updateAppliedBackground: (value: boolean) => void;
            updateIsBackgroundModalVisible: (value: boolean) => void;
            updateAutoClickBackground: (value: boolean) => void;
            updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
            updateCurrentRoomIndex: (value: number) => void;
            updateCanStartBreakout: (value: boolean) => void;
            updateBreakOutRoomStarted: (value: boolean) => void;
            updateBreakOutRoomEnded: (value: boolean) => void;
            updateHostNewRoom: (value: number) => void;
            updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
            updateMainRoomsLength: (value: number) => void;
            updateMemberRoom: (value: number) => void;
            updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
            updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
            updateCurrentWhiteboardIndex: (value: number) => void;
            updateCanStartWhiteboard: (value: boolean) => void;
            updateWhiteboardStarted: (value: boolean) => void;
            updateWhiteboardEnded: (value: boolean) => void;
            updateWhiteboardLimit: (value: number) => void;
            updateIsWhiteboardModalVisible: (value: boolean) => void;
            updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
            updateShapes: (value: Shape[]) => void;
            updateUseImageBackground: (value: boolean) => void;
            updateRedoStack: (value: Shape[]) => void;
            updateUndoStack: (value: string[]) => void;
            updateCanvasStream: (value: MediaStream | null) => void;
            updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
            updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
            updateProcessedScreenStream: (value: MediaStream | null) => void;
            updateAnnotateScreenStream: (value: boolean) => void;
            updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
            updateIsScreenboardModalVisible: (value: boolean) => void;
            checkOrientation: () => "portrait" | "landscape";
            updateDevice: (value: Device | null) => void;
            updateSocket: (value: Socket) => void;
            updateValidated: (value: boolean) => void;
            showAlert: ({ message, type, duration, }: {
                message: string;
                type: "success" | "danger";
                duration?: number;
            }) => void;
            getUpdatedAllParams: any;
        };
    };
    mediaSFUParameters: {
        updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
        mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
        dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
        stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
        checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
        startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
        requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
        reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
        prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
            component: any;
            inputs: any;
        }[] | void>;
        getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
        rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
        trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
        consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
        connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
        connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
        connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
        connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
        processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
        resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
        readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
        checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
        getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
        calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
        addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
        onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
        sleep: typeof sleep;
        changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
        compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
        compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
        createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
        resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
        receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
        disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
        disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
        disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
        getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
        signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
        connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
        reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
        updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
        closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
        autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
        switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
        switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
            videoPreference: string;
            checkoff: boolean;
            parameters: any;
        }) => Promise<void>;
        switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
        getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
        formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
        connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
        createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
        handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
        handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
        handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
        captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
        resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
        processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
        checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
        streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
        streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
        streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
        streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
        clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
        clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
        clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
        switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
        requestPermissionCamera: () => Promise<string>;
        requestPermissionAudio: () => Promise<string>;
        localUIMode: boolean;
        roomName: string;
        member: string;
        adminPasscode: string;
        youAreCoHost: boolean;
        youAreHost: boolean;
        islevel: string;
        confirmedToRecord: boolean;
        meetingDisplayType: string;
        meetingVideoOptimized: boolean;
        eventType: EventType;
        participants: Participant[];
        filteredParticipants: Participant[];
        participantsCounter: number;
        participantsFilter: string;
        consume_sockets: ConsumeSocket[];
        rtpCapabilities: RtpCapabilities | null;
        roomRecvIPs: string[];
        meetingRoomParams: MeetingRoomParams | null;
        itemPageLimit: number;
        audioOnlyRoom: boolean;
        addForBasic: boolean;
        screenPageLimit: number;
        shareScreenStarted: boolean;
        shared: boolean;
        targetOrientation: string;
        targetResolution: string;
        targetResolutionHost: string;
        vidCons: VidCons;
        frameRate: number;
        hParams: HParamsType;
        vParams: VParamsType;
        screenParams: ScreenParamsType;
        aParams: AParamsType;
        recordingAudioPausesLimit: number;
        recordingAudioPausesCount: number;
        recordingAudioSupport: boolean;
        recordingAudioPeopleLimit: number;
        recordingAudioParticipantsTimeLimit: number;
        recordingVideoPausesCount: number;
        recordingVideoPausesLimit: number;
        recordingVideoSupport: boolean;
        recordingVideoPeopleLimit: number;
        recordingVideoParticipantsTimeLimit: number;
        recordingAllParticipantsSupport: boolean;
        recordingVideoParticipantsSupport: boolean;
        recordingAllParticipantsFullRoomSupport: boolean;
        recordingVideoParticipantsFullRoomSupport: boolean;
        recordingPreferredOrientation: string;
        recordingSupportForOtherOrientation: boolean;
        recordingMultiFormatsSupport: boolean;
        userRecordingParams: UserRecordingParams;
        canRecord: boolean;
        startReport: boolean;
        endReport: boolean;
        recordStartTime: number;
        recordElapsedTime: number;
        isTimerRunning: boolean;
        canPauseResume: boolean;
        recordChangeSeconds: number;
        pauseLimit: number;
        pauseRecordCount: number;
        canLaunchRecord: boolean;
        stopLaunchRecord: boolean;
        participantsAll: Participant[];
        firstAll: boolean;
        updateMainWindow: boolean;
        first_round: boolean;
        landScaped: boolean;
        lock_screen: boolean;
        screenId: string;
        allVideoStreams: (Stream | Participant)[];
        newLimitedStreams: (Stream | Participant)[];
        newLimitedStreamsIDs: string[];
        activeSounds: string[];
        screenShareIDStream: string;
        screenShareNameStream: string;
        adminIDStream: string;
        adminNameStream: string;
        youYouStream: (Stream | Participant)[];
        youYouStreamIDs: string[];
        localStream: MediaStream | null;
        recordStarted: boolean;
        recordResumed: boolean;
        recordPaused: boolean;
        recordStopped: boolean;
        adminRestrictSetting: boolean;
        videoRequestState: string | null;
        videoRequestTime: number;
        videoAction: boolean;
        localStreamVideo: MediaStream | null;
        userDefaultVideoInputDevice: string;
        currentFacingMode: string;
        prevFacingMode: string;
        defVideoID: string;
        allowed: boolean;
        dispActiveNames: string[];
        p_dispActiveNames: string[];
        activeNames: string[];
        prevActiveNames: string[];
        p_activeNames: string[];
        membersReceived: boolean;
        deferScreenReceived: boolean;
        hostFirstSwitch: boolean;
        micAction: boolean;
        screenAction: boolean;
        chatAction: boolean;
        audioRequestState: string | null;
        screenRequestState: string | null;
        chatRequestState: string | null;
        audioRequestTime: number;
        screenRequestTime: number;
        chatRequestTime: number;
        updateRequestIntervalSeconds: number;
        oldSoundIds: string[];
        hostLabel: string;
        mainScreenFilled: boolean;
        localStreamScreen: MediaStream | null;
        screenAlreadyOn: boolean;
        chatAlreadyOn: boolean;
        redirectURL: string;
        oldAllStreams: (Stream | Participant)[];
        adminVidID: string;
        streamNames: Stream[];
        non_alVideoStreams: Participant[];
        sortAudioLoudness: boolean;
        audioDecibels: AudioDecibels[];
        mixed_alVideoStreams: (Stream | Participant)[];
        non_alVideoStreams_muted: Participant[];
        paginatedStreams: (Stream | Participant)[][];
        localStreamAudio: MediaStream | null;
        defAudioID: string;
        userDefaultAudioInputDevice: string;
        userDefaultAudioOutputDevice: string;
        prevAudioInputDevice: string;
        prevVideoInputDevice: string;
        audioPaused: boolean;
        mainScreenPerson: string;
        adminOnMainScreen: boolean;
        screenStates: ScreenState[];
        prevScreenStates: ScreenState[];
        updateDateState: number | null;
        lastUpdate: number | null;
        nForReadjustRecord: number;
        fixedPageLimit: number;
        removeAltGrid: boolean;
        nForReadjust: number;
        lastReorderTime: number;
        reorderInterval: number;
        fastReorderInterval: number;
        audStreamNames: Stream[];
        currentUserPage: number;
        mainHeightWidth: number;
        prevMainHeightWidth: number;
        prevDoPaginate: boolean;
        doPaginate: boolean;
        shareEnded: boolean;
        lStreams: (Stream | Participant)[];
        chatRefStreams: (Stream | Participant)[];
        controlHeight: number;
        isWideScreen: boolean;
        isMediumScreen: boolean;
        isSmallScreen: boolean;
        addGrid: boolean;
        addAltGrid: boolean;
        gridRows: number;
        gridCols: number;
        altGridRows: number;
        altGridCols: number;
        numberPages: number;
        currentStreams: (Stream | Participant)[];
        showMiniView: boolean;
        nStream: MediaStream | null;
        defer_receive: boolean;
        allAudioStreams: (Stream | Participant)[];
        screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        remoteScreenStream: Stream[];
        gotAllVids: boolean;
        paginationHeightWidth: number;
        paginationDirection: "horizontal" | "vertical";
        gridSizes: GridSizes;
        screenForceFullDisplay: boolean;
        mainGridStream: CustomMediaComponent[];
        otherGridStreams: CustomMediaComponent[][];
        audioOnlyStreams: CustomMediaComponent[];
        videoInputs: MediaDeviceInfo[];
        audioInputs: MediaDeviceInfo[];
        meetingProgressTime: string;
        meetingElapsedTime: number;
        ref_participants: Participant[];
        messages: Message[];
        startDirectMessage: boolean;
        directMessageDetails: Participant | null;
        coHost: string;
        coHostResponsibility: CoHostResponsibility[];
        audioSetting: string;
        videoSetting: string;
        screenshareSetting: string;
        chatSetting: string;
        autoWave: boolean;
        forceFullDisplay: boolean;
        prevForceFullDisplay: boolean;
        prevMeetingDisplayType: string;
        waitingRoomFilter: string;
        waitingRoomList: WaitingRoomParticipant[];
        waitingRoomCounter: number;
        filteredWaitingRoomList: WaitingRoomParticipant[];
        requestFilter: string;
        requestList: Request[];
        requestCounter: number;
        filteredRequestList: Request[];
        totalReqWait: number;
        alertVisible: boolean;
        alertMessage: string;
        alertType: "success" | "danger";
        alertDuration: number;
        progressTimerVisible: boolean;
        progressTimerValue: number;
        isMenuModalVisible: boolean;
        isRecordingModalVisible: boolean;
        isSettingsModalVisible: boolean;
        isRequestsModalVisible: boolean;
        isWaitingModalVisible: boolean;
        isCoHostModalVisible: boolean;
        isMediaSettingsModalVisible: boolean;
        isDisplaySettingsModalVisible: boolean;
        isParticipantsModalVisible: boolean;
        isMessagesModalVisible: boolean;
        isConfirmExitModalVisible: boolean;
        isConfirmHereModalVisible: boolean;
        isLoadingModalVisible: boolean;
        recordingMediaOptions: string;
        recordingAudioOptions: string;
        recordingVideoOptions: string;
        recordingVideoType: string;
        recordingVideoOptimized: boolean;
        recordingDisplayType: "video" | "media" | "all";
        recordingAddHLS: boolean;
        recordingAddText: boolean;
        recordingCustomText: string;
        recordingCustomTextPosition: string;
        recordingCustomTextColor: string;
        recordingNameTags: boolean;
        recordingBackgroundColor: string;
        recordingNameTagsColor: string;
        recordingOrientationVideo: string;
        clearedToResume: boolean;
        clearedToRecord: boolean;
        recordState: string;
        showRecordButtons: boolean;
        recordingProgressTime: string;
        audioSwitching: boolean;
        videoSwitching: boolean;
        videoAlreadyOn: boolean;
        audioAlreadyOn: boolean;
        componentSizes: ComponentSizes;
        hasCameraPermission: boolean;
        hasAudioPermission: boolean;
        transportCreated: boolean;
        transportCreatedVideo: boolean;
        transportCreatedAudio: boolean;
        transportCreatedScreen: boolean;
        producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
        videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        params: ProducerOptions;
        videoParams: ProducerOptions;
        audioParams: ProducerOptions;
        audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        consumerTransports: TransportType[];
        consumingTransports: string[];
        polls: Poll[];
        poll: Poll | null;
        isPollModalVisible: boolean;
        customImage: string;
        selectedImage: string;
        segmentVideo: MediaStream | null;
        selfieSegmentation: SelfieSegmentation | null;
        pauseSegmentation: boolean;
        processedStream: MediaStream | null;
        keepBackground: boolean;
        backgroundHasChanged: boolean;
        virtualStream: MediaStream | null;
        mainCanvas: HTMLCanvasElement | null;
        prevKeepBackground: boolean;
        appliedBackground: boolean;
        isBackgroundModalVisible: boolean;
        autoClickBackground: boolean;
        breakoutRooms: BreakoutParticipant[][];
        currentRoomIndex: number;
        canStartBreakout: boolean;
        breakOutRoomStarted: boolean;
        breakOutRoomEnded: boolean;
        hostNewRoom: number;
        limitedBreakRoom: BreakoutParticipant[];
        mainRoomsLength: number;
        memberRoom: number;
        isBreakoutRoomsModalVisible: boolean;
        whiteboardUsers: WhiteboardUser[];
        currentWhiteboardIndex: number;
        canStartWhiteboard: boolean;
        whiteboardStarted: boolean;
        whiteboardEnded: boolean;
        whiteboardLimit: number;
        isWhiteboardModalVisible: boolean;
        isConfigureWhiteboardModalVisible: boolean;
        shapes: Shape[];
        useImageBackground: boolean;
        redoStack: Shape[];
        undoStack: string[];
        canvasStream: MediaStream | null;
        canvasWhiteboard: HTMLCanvasElement | null;
        canvasScreenboard: HTMLCanvasElement | null;
        processedScreenStream: MediaStream | null;
        annotateScreenStream: boolean;
        mainScreenCanvas: HTMLCanvasElement | null;
        isScreenboardModalVisible: boolean;
        validated: boolean;
        device: Device | null;
        socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
        checkMediaPermission: boolean;
        onWeb: boolean;
        updateRoomName: (value: string) => void;
        updateMember: (value: string) => void;
        updateAdminPasscode: (value: string) => void;
        updateYouAreCoHost: (value: boolean) => void;
        updateYouAreHost: (value: boolean) => void;
        updateIslevel: (value: string) => void;
        updateCoHost: (value: string) => void;
        updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
        updateConfirmedToRecord: (value: boolean) => void;
        updateMeetingDisplayType: (value: string) => void;
        updateMeetingVideoOptimized: (value: boolean) => void;
        updateEventType: (value: EventType) => void;
        updateParticipants: (value: Participant[]) => void;
        updateParticipantsCounter: (value: number) => void;
        updateParticipantsFilter: (value: string) => void;
        updateConsume_sockets: (value: ConsumeSocket[]) => void;
        updateRtpCapabilities: (value: RtpCapabilities | null) => void;
        updateRoomRecvIPs: (value: string[]) => void;
        updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
        updateItemPageLimit: (value: number) => void;
        updateAudioOnlyRoom: (value: boolean) => void;
        updateAddForBasic: (value: boolean) => void;
        updateScreenPageLimit: (value: number) => void;
        updateShareScreenStarted: (value: boolean) => void;
        updateShared: (value: boolean) => void;
        updateTargetOrientation: (value: string) => void;
        updateTargetResolution: (value: string) => void;
        updateTargetResolutionHost: (value: string) => void;
        updateVidCons: (value: VidCons) => void;
        updateFrameRate: (value: number) => void;
        updateHParams: (value: HParamsType) => void;
        updateVParams: (value: VParamsType) => void;
        updateScreenParams: (value: ScreenParamsType) => void;
        updateAParams: (value: AParamsType) => void;
        updateRecordingAudioPausesLimit: (value: number) => void;
        updateRecordingAudioPausesCount: (value: number) => void;
        updateRecordingAudioSupport: (value: boolean) => void;
        updateRecordingAudioPeopleLimit: (value: number) => void;
        updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
        updateRecordingVideoPausesCount: (value: number) => void;
        updateRecordingVideoPausesLimit: (value: number) => void;
        updateRecordingVideoSupport: (value: boolean) => void;
        updateRecordingVideoPeopleLimit: (value: number) => void;
        updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
        updateRecordingAllParticipantsSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsSupport: (value: boolean) => void;
        updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingPreferredOrientation: (value: string) => void;
        updateRecordingSupportForOtherOrientation: (value: boolean) => void;
        updateRecordingMultiFormatsSupport: (value: boolean) => void;
        updateUserRecordingParams: (value: UserRecordingParams) => void;
        updateCanRecord: (value: boolean) => void;
        updateStartReport: (value: boolean) => void;
        updateEndReport: (value: boolean) => void;
        updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
        updateRecordStartTime: (value: number) => void;
        updateRecordElapsedTime: (value: number) => void;
        updateIsTimerRunning: (value: boolean) => void;
        updateCanPauseResume: (value: boolean) => void;
        updateRecordChangeSeconds: (value: number) => void;
        updatePauseLimit: (value: number) => void;
        updatePauseRecordCount: (value: number) => void;
        updateCanLaunchRecord: (value: boolean) => void;
        updateStopLaunchRecord: (value: boolean) => void;
        updateParticipantsAll: (value: Participant[]) => void;
        updateFirstAll: (value: boolean) => void;
        updateUpdateMainWindow: (value: boolean) => void;
        updateFirst_round: (value: boolean) => void;
        updateLandScaped: (value: boolean) => void;
        updateLock_screen: (value: boolean) => void;
        updateScreenId: (value: string) => void;
        updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreamsIDs: (value: string[]) => void;
        updateActiveSounds: (value: string[]) => void;
        updateScreenShareIDStream: (value: string) => void;
        updateScreenShareNameStream: (value: string) => void;
        updateAdminIDStream: (value: string) => void;
        updateAdminNameStream: (value: string) => void;
        updateYouYouStream: (value: (Participant | Stream)[]) => void;
        updateYouYouStreamIDs: (value: string[]) => void;
        updateLocalStream: (value: MediaStream | null) => void;
        updateRecordStarted: (value: boolean) => void;
        updateRecordResumed: (value: boolean) => void;
        updateRecordPaused: (value: boolean) => void;
        updateRecordStopped: (value: boolean) => void;
        updateAdminRestrictSetting: (value: boolean) => void;
        updateVideoRequestState: (value: string | null) => void;
        updateVideoRequestTime: (value: number) => void;
        updateVideoAction: (value: boolean) => void;
        updateLocalStreamVideo: (value: MediaStream | null) => void;
        updateUserDefaultVideoInputDevice: (value: string) => void;
        updateCurrentFacingMode: (value: string) => void;
        updatePrevFacingMode: (value: string) => void;
        updateDefVideoID: (value: string) => void;
        updateAllowed: (value: boolean) => void;
        updateDispActiveNames: (value: string[]) => void;
        updateP_dispActiveNames: (value: string[]) => void;
        updateActiveNames: (value: string[]) => void;
        updatePrevActiveNames: (value: string[]) => void;
        updateP_activeNames: (value: string[]) => void;
        updateMembersReceived: (value: boolean) => void;
        updateDeferScreenReceived: (value: boolean) => void;
        updateHostFirstSwitch: (value: boolean) => void;
        updateMicAction: (value: boolean) => void;
        updateScreenAction: (value: boolean) => void;
        updateChatAction: (value: boolean) => void;
        updateAudioRequestState: (value: string | null) => void;
        updateScreenRequestState: (value: string | null) => void;
        updateChatRequestState: (value: string | null) => void;
        updateAudioRequestTime: (value: number) => void;
        updateScreenRequestTime: (value: number) => void;
        updateChatRequestTime: (value: number) => void;
        updateOldSoundIds: (value: string[]) => void;
        updateHostLabel: (value: string) => void;
        updateMainScreenFilled: (value: boolean) => void;
        updateLocalStreamScreen: (value: MediaStream | null) => void;
        updateScreenAlreadyOn: (value: boolean) => void;
        updateChatAlreadyOn: (value: boolean) => void;
        updateRedirectURL: (value: string) => void;
        updateOldAllStreams: (value: (Participant | Stream)[]) => void;
        updateAdminVidID: (value: string) => void;
        updateStreamNames: (value: Stream[]) => void;
        updateNon_alVideoStreams: (value: Participant[]) => void;
        updateSortAudioLoudness: (value: boolean) => void;
        updateAudioDecibels: (value: AudioDecibels[]) => void;
        updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNon_alVideoStreams_muted: (value: Participant[]) => void;
        updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
        updateLocalStreamAudio: (value: MediaStream | null) => void;
        updateDefAudioID: (value: string) => void;
        updateUserDefaultAudioInputDevice: (value: string) => void;
        updateUserDefaultAudioOutputDevice: (value: string) => void;
        updatePrevAudioInputDevice: (value: string) => void;
        updatePrevVideoInputDevice: (value: string) => void;
        updateAudioPaused: (value: boolean) => void;
        updateMainScreenPerson: (value: string) => void;
        updateAdminOnMainScreen: (value: boolean) => void;
        updateScreenStates: (value: ScreenState[]) => void;
        updatePrevScreenStates: (value: ScreenState[]) => void;
        updateUpdateDateState: (value: number | null) => void;
        updateLastUpdate: (value: number | null) => void;
        updateNForReadjustRecord: (value: number) => void;
        updateFixedPageLimit: (value: number) => void;
        updateRemoveAltGrid: (value: boolean) => void;
        updateNForReadjust: (value: number) => void;
        updateLastReorderTime: (value: number) => void;
        updateAudStreamNames: (value: Stream[]) => void;
        updateCurrentUserPage: (value: number) => void;
        updateMainHeightWidth: (value: number) => void;
        updatePrevMainHeightWidth: (value: number) => void;
        updatePrevDoPaginate: (value: boolean) => void;
        updateDoPaginate: (value: boolean) => void;
        updateShareEnded: (value: boolean) => void;
        updateLStreams: (value: (Participant | Stream)[]) => void;
        updateChatRefStreams: (value: (Participant | Stream)[]) => void;
        updateControlHeight: (value: number) => void;
        updateIsWideScreen: (value: boolean) => void;
        updateIsMediumScreen: (value: boolean) => void;
        updateIsSmallScreen: (value: boolean) => void;
        updateAddGrid: (value: boolean) => void;
        updateAddAltGrid: (value: boolean) => void;
        updateGridRows: (value: number) => void;
        updateGridCols: (value: number) => void;
        updateAltGridRows: (value: number) => void;
        updateAltGridCols: (value: number) => void;
        updateNumberPages: (value: number) => void;
        updateCurrentStreams: (value: (Participant | Stream)[]) => void;
        updateShowMiniView: (value: boolean) => void;
        updateNStream: (value: MediaStream | null) => void;
        updateDefer_receive: (value: boolean) => void;
        updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
        updateRemoteScreenStream: (value: Stream[]) => void;
        updateScreenProducer: (value: Producer | null) => void;
        updateGotAllVids: (value: boolean) => void;
        updatePaginationHeightWidth: (value: number) => void;
        updatePaginationDirection: (value: "horizontal" | "vertical") => void;
        updateGridSizes: (value: GridSizes) => void;
        updateScreenForceFullDisplay: (value: boolean) => void;
        updateMainGridStream: (value: CustomMediaComponent[]) => void;
        updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
        updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
        updateVideoInputs: (value: MediaDeviceInfo[]) => void;
        updateAudioInputs: (value: MediaDeviceInfo[]) => void;
        updateMeetingProgressTime: (value: string) => void;
        updateMeetingElapsedTime: (value: number) => void;
        updateRef_participants: (value: Participant[]) => void;
        updateMessages: (value: Message[]) => void;
        updateStartDirectMessage: (value: boolean) => void;
        updateDirectMessageDetails: (value: Participant | null) => void;
        updateShowMessagesBadge: (value: boolean) => void;
        updateAudioSetting: (value: string) => void;
        updateVideoSetting: (value: string) => void;
        updateScreenshareSetting: (value: string) => void;
        updateChatSetting: (value: string) => void;
        updateAutoWave: (value: boolean) => void;
        updateForceFullDisplay: (value: boolean) => void;
        updatePrevForceFullDisplay: (value: boolean) => void;
        updatePrevMeetingDisplayType: (value: string) => void;
        updateWaitingRoomFilter: (value: string) => void;
        updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
        updateWaitingRoomCounter: (value: number) => void;
        updateRequestFilter: (value: string) => void;
        updateRequestList: (value: Request[]) => void;
        updateRequestCounter: (value: number) => void;
        updateTotalReqWait: (value: number) => void;
        updateIsMenuModalVisible: (value: boolean) => void;
        updateIsRecordingModalVisible: (value: boolean) => void;
        updateIsSettingsModalVisible: (value: boolean) => void;
        updateIsRequestsModalVisible: (value: boolean) => void;
        updateIsWaitingModalVisible: (value: boolean) => void;
        updateIsCoHostModalVisible: (value: boolean) => void;
        updateIsMediaSettingsModalVisible: (value: boolean) => void;
        updateIsDisplaySettingsModalVisible: (value: boolean) => void;
        updateIsParticipantsModalVisible: (value: boolean) => void;
        updateIsMessagesModalVisible: (value: boolean) => void;
        updateIsConfirmExitModalVisible: (value: boolean) => void;
        updateIsConfirmHereModalVisible: (value: boolean) => void;
        updateIsLoadingModalVisible: (value: boolean) => void;
        updateRecordingMediaOptions: (value: string) => void;
        updateRecordingAudioOptions: (value: string) => void;
        updateRecordingVideoOptions: (value: string) => void;
        updateRecordingVideoType: (value: string) => void;
        updateRecordingVideoOptimized: (value: boolean) => void;
        updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
        updateRecordingAddHLS: (value: boolean) => void;
        updateRecordingAddText: (value: boolean) => void;
        updateRecordingCustomText: (value: string) => void;
        updateRecordingCustomTextPosition: (value: string) => void;
        updateRecordingCustomTextColor: (value: string) => void;
        updateRecordingNameTags: (value: boolean) => void;
        updateRecordingBackgroundColor: (value: string) => void;
        updateRecordingNameTagsColor: (value: string) => void;
        updateRecordingOrientationVideo: (value: string) => void;
        updateClearedToResume: (value: boolean) => void;
        updateClearedToRecord: (value: boolean) => void;
        updateRecordState: (value: string) => void;
        updateShowRecordButtons: (value: boolean) => void;
        updateRecordingProgressTime: (value: string) => void;
        updateAudioSwitching: (value: boolean) => void;
        updateVideoSwitching: (value: boolean) => void;
        updateVideoAlreadyOn: (value: boolean) => void;
        updateAudioAlreadyOn: (value: boolean) => void;
        updateComponentSizes: (sizes: ComponentSizes) => void;
        updateHasCameraPermission: (value: boolean) => void;
        updateHasAudioPermission: (value: boolean) => void;
        updateTransportCreated: (value: boolean) => void;
        updateTransportCreatedVideo: (value: boolean) => void;
        updateTransportCreatedAudio: (value: boolean) => void;
        updateTransportCreatedScreen: (value: boolean) => void;
        updateProducerTransport: (value: Transport | null) => void;
        updateVideoProducer: (value: Producer | null) => void;
        updateParams: (value: ProducerOptions) => void;
        updateVideoParams: (value: ProducerOptions) => void;
        updateAudioParams: (value: ProducerOptions) => void;
        updateAudioProducer: (value: Producer | null) => void;
        updateConsumerTransports: (value: TransportType[]) => void;
        updateConsumingTransports: (value: string[]) => void;
        updatePolls: (value: Poll[]) => void;
        updatePoll: (value: Poll | null) => void;
        updateIsPollModalVisible: (value: boolean) => void;
        updateCustomImage: (value: string) => void;
        updateSelectedImage: (value: string) => void;
        updateSegmentVideo: (value: MediaStream | null) => void;
        updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
        updatePauseSegmentation: (value: boolean) => void;
        updateProcessedStream: (value: MediaStream | null) => void;
        updateKeepBackground: (value: boolean) => void;
        updateBackgroundHasChanged: (value: boolean) => void;
        updateVirtualStream: (value: MediaStream | null) => void;
        updateMainCanvas: (value: HTMLCanvasElement | null) => void;
        updatePrevKeepBackground: (value: boolean) => void;
        updateAppliedBackground: (value: boolean) => void;
        updateIsBackgroundModalVisible: (value: boolean) => void;
        updateAutoClickBackground: (value: boolean) => void;
        updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
        updateCurrentRoomIndex: (value: number) => void;
        updateCanStartBreakout: (value: boolean) => void;
        updateBreakOutRoomStarted: (value: boolean) => void;
        updateBreakOutRoomEnded: (value: boolean) => void;
        updateHostNewRoom: (value: number) => void;
        updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
        updateMainRoomsLength: (value: number) => void;
        updateMemberRoom: (value: number) => void;
        updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
        updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
        updateCurrentWhiteboardIndex: (value: number) => void;
        updateCanStartWhiteboard: (value: boolean) => void;
        updateWhiteboardStarted: (value: boolean) => void;
        updateWhiteboardEnded: (value: boolean) => void;
        updateWhiteboardLimit: (value: number) => void;
        updateIsWhiteboardModalVisible: (value: boolean) => void;
        updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
        updateShapes: (value: Shape[]) => void;
        updateUseImageBackground: (value: boolean) => void;
        updateRedoStack: (value: Shape[]) => void;
        updateUndoStack: (value: string[]) => void;
        updateCanvasStream: (value: MediaStream | null) => void;
        updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
        updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
        updateProcessedScreenStream: (value: MediaStream | null) => void;
        updateAnnotateScreenStream: (value: boolean) => void;
        updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
        updateIsScreenboardModalVisible: (value: boolean) => void;
        checkOrientation: () => "portrait" | "landscape";
        updateDevice: (value: Device | null) => void;
        updateSocket: (value: Socket) => void;
        updateValidated: (value: boolean) => void;
        showAlert: ({ message, type, duration, }: {
            message: string;
            type: "success" | "danger";
            duration?: number;
        }) => void;
        getUpdatedAllParams: () => {
            updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
            mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
            dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
            stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
            checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
            startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
            requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
            reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
            prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
                component: any;
                inputs: any;
            }[] | void>;
            getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
            rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
            trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
            consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
            connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
            connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
            connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
            connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
            processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
            resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
            readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
            checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
            getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
            calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
            addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
            onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
            sleep: typeof sleep;
            changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
            compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
            compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
            createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
            resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
            receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
            disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
            disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
            disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
            getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
            signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
            connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
            reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
            updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
            closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
            autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
            switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
            switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
                videoPreference: string;
                checkoff: boolean;
                parameters: any;
            }) => Promise<void>;
            switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
            getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
            formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
            connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
            createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
            handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
            handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
            handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
            captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
            resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
            processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
            checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
            streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
            streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
            streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
            streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
            clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
            clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
            clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
            switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
            requestPermissionCamera: () => Promise<string>;
            requestPermissionAudio: () => Promise<string>;
            localUIMode: boolean;
            roomName: string;
            member: string;
            adminPasscode: string;
            youAreCoHost: boolean;
            youAreHost: boolean;
            islevel: string;
            confirmedToRecord: boolean;
            meetingDisplayType: string;
            meetingVideoOptimized: boolean;
            eventType: EventType;
            participants: Participant[];
            filteredParticipants: Participant[];
            participantsCounter: number;
            participantsFilter: string;
            consume_sockets: ConsumeSocket[];
            rtpCapabilities: RtpCapabilities | null;
            roomRecvIPs: string[];
            meetingRoomParams: MeetingRoomParams | null;
            itemPageLimit: number;
            audioOnlyRoom: boolean;
            addForBasic: boolean;
            screenPageLimit: number;
            shareScreenStarted: boolean;
            shared: boolean;
            targetOrientation: string;
            targetResolution: string;
            targetResolutionHost: string;
            vidCons: VidCons;
            frameRate: number;
            hParams: HParamsType;
            vParams: VParamsType;
            screenParams: ScreenParamsType;
            aParams: AParamsType;
            recordingAudioPausesLimit: number;
            recordingAudioPausesCount: number;
            recordingAudioSupport: boolean;
            recordingAudioPeopleLimit: number;
            recordingAudioParticipantsTimeLimit: number;
            recordingVideoPausesCount: number;
            recordingVideoPausesLimit: number;
            recordingVideoSupport: boolean;
            recordingVideoPeopleLimit: number;
            recordingVideoParticipantsTimeLimit: number;
            recordingAllParticipantsSupport: boolean;
            recordingVideoParticipantsSupport: boolean;
            recordingAllParticipantsFullRoomSupport: boolean;
            recordingVideoParticipantsFullRoomSupport: boolean;
            recordingPreferredOrientation: string;
            recordingSupportForOtherOrientation: boolean;
            recordingMultiFormatsSupport: boolean;
            userRecordingParams: UserRecordingParams;
            canRecord: boolean;
            startReport: boolean;
            endReport: boolean;
            recordStartTime: number;
            recordElapsedTime: number;
            isTimerRunning: boolean;
            canPauseResume: boolean;
            recordChangeSeconds: number;
            pauseLimit: number;
            pauseRecordCount: number;
            canLaunchRecord: boolean;
            stopLaunchRecord: boolean;
            participantsAll: Participant[];
            firstAll: boolean;
            updateMainWindow: boolean;
            first_round: boolean;
            landScaped: boolean;
            lock_screen: boolean;
            screenId: string;
            allVideoStreams: (Stream | Participant)[];
            newLimitedStreams: (Stream | Participant)[];
            newLimitedStreamsIDs: string[];
            activeSounds: string[];
            screenShareIDStream: string;
            screenShareNameStream: string;
            adminIDStream: string;
            adminNameStream: string;
            youYouStream: (Stream | Participant)[];
            youYouStreamIDs: string[];
            localStream: MediaStream | null;
            recordStarted: boolean;
            recordResumed: boolean;
            recordPaused: boolean;
            recordStopped: boolean;
            adminRestrictSetting: boolean;
            videoRequestState: string | null;
            videoRequestTime: number;
            videoAction: boolean;
            localStreamVideo: MediaStream | null;
            userDefaultVideoInputDevice: string;
            currentFacingMode: string;
            prevFacingMode: string;
            defVideoID: string;
            allowed: boolean;
            dispActiveNames: string[];
            p_dispActiveNames: string[];
            activeNames: string[];
            prevActiveNames: string[];
            p_activeNames: string[];
            membersReceived: boolean;
            deferScreenReceived: boolean;
            hostFirstSwitch: boolean;
            micAction: boolean;
            screenAction: boolean;
            chatAction: boolean;
            audioRequestState: string | null;
            screenRequestState: string | null;
            chatRequestState: string | null;
            audioRequestTime: number;
            screenRequestTime: number;
            chatRequestTime: number;
            updateRequestIntervalSeconds: number;
            oldSoundIds: string[];
            hostLabel: string;
            mainScreenFilled: boolean;
            localStreamScreen: MediaStream | null;
            screenAlreadyOn: boolean;
            chatAlreadyOn: boolean;
            redirectURL: string;
            oldAllStreams: (Stream | Participant)[];
            adminVidID: string;
            streamNames: Stream[];
            non_alVideoStreams: Participant[];
            sortAudioLoudness: boolean;
            audioDecibels: AudioDecibels[];
            mixed_alVideoStreams: (Stream | Participant)[];
            non_alVideoStreams_muted: Participant[];
            paginatedStreams: (Stream | Participant)[][];
            localStreamAudio: MediaStream | null;
            defAudioID: string;
            userDefaultAudioInputDevice: string;
            userDefaultAudioOutputDevice: string;
            prevAudioInputDevice: string;
            prevVideoInputDevice: string;
            audioPaused: boolean;
            mainScreenPerson: string;
            adminOnMainScreen: boolean;
            screenStates: ScreenState[];
            prevScreenStates: ScreenState[];
            updateDateState: number | null;
            lastUpdate: number | null;
            nForReadjustRecord: number;
            fixedPageLimit: number;
            removeAltGrid: boolean;
            nForReadjust: number;
            lastReorderTime: number;
            reorderInterval: number;
            fastReorderInterval: number;
            audStreamNames: Stream[];
            currentUserPage: number;
            mainHeightWidth: number;
            prevMainHeightWidth: number;
            prevDoPaginate: boolean;
            doPaginate: boolean;
            shareEnded: boolean;
            lStreams: (Stream | Participant)[];
            chatRefStreams: (Stream | Participant)[];
            controlHeight: number;
            isWideScreen: boolean;
            isMediumScreen: boolean;
            isSmallScreen: boolean;
            addGrid: boolean;
            addAltGrid: boolean;
            gridRows: number;
            gridCols: number;
            altGridRows: number;
            altGridCols: number;
            numberPages: number;
            currentStreams: (Stream | Participant)[];
            showMiniView: boolean;
            nStream: MediaStream | null;
            defer_receive: boolean;
            allAudioStreams: (Stream | Participant)[];
            screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            remoteScreenStream: Stream[];
            gotAllVids: boolean;
            paginationHeightWidth: number;
            paginationDirection: "horizontal" | "vertical";
            gridSizes: GridSizes;
            screenForceFullDisplay: boolean;
            mainGridStream: CustomMediaComponent[];
            otherGridStreams: CustomMediaComponent[][];
            audioOnlyStreams: CustomMediaComponent[];
            videoInputs: MediaDeviceInfo[];
            audioInputs: MediaDeviceInfo[];
            meetingProgressTime: string;
            meetingElapsedTime: number;
            ref_participants: Participant[];
            messages: Message[];
            startDirectMessage: boolean;
            directMessageDetails: Participant | null;
            coHost: string;
            coHostResponsibility: CoHostResponsibility[];
            audioSetting: string;
            videoSetting: string;
            screenshareSetting: string;
            chatSetting: string;
            autoWave: boolean;
            forceFullDisplay: boolean;
            prevForceFullDisplay: boolean;
            prevMeetingDisplayType: string;
            waitingRoomFilter: string;
            waitingRoomList: WaitingRoomParticipant[];
            waitingRoomCounter: number;
            filteredWaitingRoomList: WaitingRoomParticipant[];
            requestFilter: string;
            requestList: Request[];
            requestCounter: number;
            filteredRequestList: Request[];
            totalReqWait: number;
            alertVisible: boolean;
            alertMessage: string;
            alertType: "success" | "danger";
            alertDuration: number;
            progressTimerVisible: boolean;
            progressTimerValue: number;
            isMenuModalVisible: boolean;
            isRecordingModalVisible: boolean;
            isSettingsModalVisible: boolean;
            isRequestsModalVisible: boolean;
            isWaitingModalVisible: boolean;
            isCoHostModalVisible: boolean;
            isMediaSettingsModalVisible: boolean;
            isDisplaySettingsModalVisible: boolean;
            isParticipantsModalVisible: boolean;
            isMessagesModalVisible: boolean;
            isConfirmExitModalVisible: boolean;
            isConfirmHereModalVisible: boolean;
            isLoadingModalVisible: boolean;
            recordingMediaOptions: string;
            recordingAudioOptions: string;
            recordingVideoOptions: string;
            recordingVideoType: string;
            recordingVideoOptimized: boolean;
            recordingDisplayType: "video" | "media" | "all";
            recordingAddHLS: boolean;
            recordingAddText: boolean;
            recordingCustomText: string;
            recordingCustomTextPosition: string;
            recordingCustomTextColor: string;
            recordingNameTags: boolean;
            recordingBackgroundColor: string;
            recordingNameTagsColor: string;
            recordingOrientationVideo: string;
            clearedToResume: boolean;
            clearedToRecord: boolean;
            recordState: string;
            showRecordButtons: boolean;
            recordingProgressTime: string;
            audioSwitching: boolean;
            videoSwitching: boolean;
            videoAlreadyOn: boolean;
            audioAlreadyOn: boolean;
            componentSizes: ComponentSizes;
            hasCameraPermission: boolean;
            hasAudioPermission: boolean;
            transportCreated: boolean;
            transportCreatedVideo: boolean;
            transportCreatedAudio: boolean;
            transportCreatedScreen: boolean;
            producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
            videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            params: ProducerOptions;
            videoParams: ProducerOptions;
            audioParams: ProducerOptions;
            audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            consumerTransports: TransportType[];
            consumingTransports: string[];
            polls: Poll[];
            poll: Poll | null;
            isPollModalVisible: boolean;
            customImage: string;
            selectedImage: string;
            segmentVideo: MediaStream | null;
            selfieSegmentation: SelfieSegmentation | null;
            pauseSegmentation: boolean;
            processedStream: MediaStream | null;
            keepBackground: boolean;
            backgroundHasChanged: boolean;
            virtualStream: MediaStream | null;
            mainCanvas: HTMLCanvasElement | null;
            prevKeepBackground: boolean;
            appliedBackground: boolean;
            isBackgroundModalVisible: boolean;
            autoClickBackground: boolean;
            breakoutRooms: BreakoutParticipant[][];
            currentRoomIndex: number;
            canStartBreakout: boolean;
            breakOutRoomStarted: boolean;
            breakOutRoomEnded: boolean;
            hostNewRoom: number;
            limitedBreakRoom: BreakoutParticipant[];
            mainRoomsLength: number;
            memberRoom: number;
            isBreakoutRoomsModalVisible: boolean;
            whiteboardUsers: WhiteboardUser[];
            currentWhiteboardIndex: number;
            canStartWhiteboard: boolean;
            whiteboardStarted: boolean;
            whiteboardEnded: boolean;
            whiteboardLimit: number;
            isWhiteboardModalVisible: boolean;
            isConfigureWhiteboardModalVisible: boolean;
            shapes: Shape[];
            useImageBackground: boolean;
            redoStack: Shape[];
            undoStack: string[];
            canvasStream: MediaStream | null;
            canvasWhiteboard: HTMLCanvasElement | null;
            canvasScreenboard: HTMLCanvasElement | null;
            processedScreenStream: MediaStream | null;
            annotateScreenStream: boolean;
            mainScreenCanvas: HTMLCanvasElement | null;
            isScreenboardModalVisible: boolean;
            validated: boolean;
            device: Device | null;
            socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
            checkMediaPermission: boolean;
            onWeb: boolean;
            updateRoomName: (value: string) => void;
            updateMember: (value: string) => void;
            updateAdminPasscode: (value: string) => void;
            updateYouAreCoHost: (value: boolean) => void;
            updateYouAreHost: (value: boolean) => void;
            updateIslevel: (value: string) => void;
            updateCoHost: (value: string) => void;
            updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
            updateConfirmedToRecord: (value: boolean) => void;
            updateMeetingDisplayType: (value: string) => void;
            updateMeetingVideoOptimized: (value: boolean) => void;
            updateEventType: (value: EventType) => void;
            updateParticipants: (value: Participant[]) => void;
            updateParticipantsCounter: (value: number) => void;
            updateParticipantsFilter: (value: string) => void;
            updateConsume_sockets: (value: ConsumeSocket[]) => void;
            updateRtpCapabilities: (value: RtpCapabilities | null) => void;
            updateRoomRecvIPs: (value: string[]) => void;
            updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
            updateItemPageLimit: (value: number) => void;
            updateAudioOnlyRoom: (value: boolean) => void;
            updateAddForBasic: (value: boolean) => void;
            updateScreenPageLimit: (value: number) => void;
            updateShareScreenStarted: (value: boolean) => void;
            updateShared: (value: boolean) => void;
            updateTargetOrientation: (value: string) => void;
            updateTargetResolution: (value: string) => void;
            updateTargetResolutionHost: (value: string) => void;
            updateVidCons: (value: VidCons) => void;
            updateFrameRate: (value: number) => void;
            updateHParams: (value: HParamsType) => void;
            updateVParams: (value: VParamsType) => void;
            updateScreenParams: (value: ScreenParamsType) => void;
            updateAParams: (value: AParamsType) => void;
            updateRecordingAudioPausesLimit: (value: number) => void;
            updateRecordingAudioPausesCount: (value: number) => void;
            updateRecordingAudioSupport: (value: boolean) => void;
            updateRecordingAudioPeopleLimit: (value: number) => void;
            updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
            updateRecordingVideoPausesCount: (value: number) => void;
            updateRecordingVideoPausesLimit: (value: number) => void;
            updateRecordingVideoSupport: (value: boolean) => void;
            updateRecordingVideoPeopleLimit: (value: number) => void;
            updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
            updateRecordingAllParticipantsSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsSupport: (value: boolean) => void;
            updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingPreferredOrientation: (value: string) => void;
            updateRecordingSupportForOtherOrientation: (value: boolean) => void;
            updateRecordingMultiFormatsSupport: (value: boolean) => void;
            updateUserRecordingParams: (value: UserRecordingParams) => void;
            updateCanRecord: (value: boolean) => void;
            updateStartReport: (value: boolean) => void;
            updateEndReport: (value: boolean) => void;
            updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
            updateRecordStartTime: (value: number) => void;
            updateRecordElapsedTime: (value: number) => void;
            updateIsTimerRunning: (value: boolean) => void;
            updateCanPauseResume: (value: boolean) => void;
            updateRecordChangeSeconds: (value: number) => void;
            updatePauseLimit: (value: number) => void;
            updatePauseRecordCount: (value: number) => void;
            updateCanLaunchRecord: (value: boolean) => void;
            updateStopLaunchRecord: (value: boolean) => void;
            updateParticipantsAll: (value: Participant[]) => void;
            updateFirstAll: (value: boolean) => void;
            updateUpdateMainWindow: (value: boolean) => void;
            updateFirst_round: (value: boolean) => void;
            updateLandScaped: (value: boolean) => void;
            updateLock_screen: (value: boolean) => void;
            updateScreenId: (value: string) => void;
            updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreamsIDs: (value: string[]) => void;
            updateActiveSounds: (value: string[]) => void;
            updateScreenShareIDStream: (value: string) => void;
            updateScreenShareNameStream: (value: string) => void;
            updateAdminIDStream: (value: string) => void;
            updateAdminNameStream: (value: string) => void;
            updateYouYouStream: (value: (Participant | Stream)[]) => void;
            updateYouYouStreamIDs: (value: string[]) => void;
            updateLocalStream: (value: MediaStream | null) => void;
            updateRecordStarted: (value: boolean) => void;
            updateRecordResumed: (value: boolean) => void;
            updateRecordPaused: (value: boolean) => void;
            updateRecordStopped: (value: boolean) => void;
            updateAdminRestrictSetting: (value: boolean) => void;
            updateVideoRequestState: (value: string | null) => void;
            updateVideoRequestTime: (value: number) => void;
            updateVideoAction: (value: boolean) => void;
            updateLocalStreamVideo: (value: MediaStream | null) => void;
            updateUserDefaultVideoInputDevice: (value: string) => void;
            updateCurrentFacingMode: (value: string) => void;
            updatePrevFacingMode: (value: string) => void;
            updateDefVideoID: (value: string) => void;
            updateAllowed: (value: boolean) => void;
            updateDispActiveNames: (value: string[]) => void;
            updateP_dispActiveNames: (value: string[]) => void;
            updateActiveNames: (value: string[]) => void;
            updatePrevActiveNames: (value: string[]) => void;
            updateP_activeNames: (value: string[]) => void;
            updateMembersReceived: (value: boolean) => void;
            updateDeferScreenReceived: (value: boolean) => void;
            updateHostFirstSwitch: (value: boolean) => void;
            updateMicAction: (value: boolean) => void;
            updateScreenAction: (value: boolean) => void;
            updateChatAction: (value: boolean) => void;
            updateAudioRequestState: (value: string | null) => void;
            updateScreenRequestState: (value: string | null) => void;
            updateChatRequestState: (value: string | null) => void;
            updateAudioRequestTime: (value: number) => void;
            updateScreenRequestTime: (value: number) => void;
            updateChatRequestTime: (value: number) => void;
            updateOldSoundIds: (value: string[]) => void;
            updateHostLabel: (value: string) => void;
            updateMainScreenFilled: (value: boolean) => void;
            updateLocalStreamScreen: (value: MediaStream | null) => void;
            updateScreenAlreadyOn: (value: boolean) => void;
            updateChatAlreadyOn: (value: boolean) => void;
            updateRedirectURL: (value: string) => void;
            updateOldAllStreams: (value: (Participant | Stream)[]) => void;
            updateAdminVidID: (value: string) => void;
            updateStreamNames: (value: Stream[]) => void;
            updateNon_alVideoStreams: (value: Participant[]) => void;
            updateSortAudioLoudness: (value: boolean) => void;
            updateAudioDecibels: (value: AudioDecibels[]) => void;
            updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNon_alVideoStreams_muted: (value: Participant[]) => void;
            updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
            updateLocalStreamAudio: (value: MediaStream | null) => void;
            updateDefAudioID: (value: string) => void;
            updateUserDefaultAudioInputDevice: (value: string) => void;
            updateUserDefaultAudioOutputDevice: (value: string) => void;
            updatePrevAudioInputDevice: (value: string) => void;
            updatePrevVideoInputDevice: (value: string) => void;
            updateAudioPaused: (value: boolean) => void;
            updateMainScreenPerson: (value: string) => void;
            updateAdminOnMainScreen: (value: boolean) => void;
            updateScreenStates: (value: ScreenState[]) => void;
            updatePrevScreenStates: (value: ScreenState[]) => void;
            updateUpdateDateState: (value: number | null) => void;
            updateLastUpdate: (value: number | null) => void;
            updateNForReadjustRecord: (value: number) => void;
            updateFixedPageLimit: (value: number) => void;
            updateRemoveAltGrid: (value: boolean) => void;
            updateNForReadjust: (value: number) => void;
            updateLastReorderTime: (value: number) => void;
            updateAudStreamNames: (value: Stream[]) => void;
            updateCurrentUserPage: (value: number) => void;
            updateMainHeightWidth: (value: number) => void;
            updatePrevMainHeightWidth: (value: number) => void;
            updatePrevDoPaginate: (value: boolean) => void;
            updateDoPaginate: (value: boolean) => void;
            updateShareEnded: (value: boolean) => void;
            updateLStreams: (value: (Participant | Stream)[]) => void;
            updateChatRefStreams: (value: (Participant | Stream)[]) => void;
            updateControlHeight: (value: number) => void;
            updateIsWideScreen: (value: boolean) => void;
            updateIsMediumScreen: (value: boolean) => void;
            updateIsSmallScreen: (value: boolean) => void;
            updateAddGrid: (value: boolean) => void;
            updateAddAltGrid: (value: boolean) => void;
            updateGridRows: (value: number) => void;
            updateGridCols: (value: number) => void;
            updateAltGridRows: (value: number) => void;
            updateAltGridCols: (value: number) => void;
            updateNumberPages: (value: number) => void;
            updateCurrentStreams: (value: (Participant | Stream)[]) => void;
            updateShowMiniView: (value: boolean) => void;
            updateNStream: (value: MediaStream | null) => void;
            updateDefer_receive: (value: boolean) => void;
            updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
            updateRemoteScreenStream: (value: Stream[]) => void;
            updateScreenProducer: (value: Producer | null) => void;
            updateGotAllVids: (value: boolean) => void;
            updatePaginationHeightWidth: (value: number) => void;
            updatePaginationDirection: (value: "horizontal" | "vertical") => void;
            updateGridSizes: (value: GridSizes) => void;
            updateScreenForceFullDisplay: (value: boolean) => void;
            updateMainGridStream: (value: CustomMediaComponent[]) => void;
            updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
            updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
            updateVideoInputs: (value: MediaDeviceInfo[]) => void;
            updateAudioInputs: (value: MediaDeviceInfo[]) => void;
            updateMeetingProgressTime: (value: string) => void;
            updateMeetingElapsedTime: (value: number) => void;
            updateRef_participants: (value: Participant[]) => void;
            updateMessages: (value: Message[]) => void;
            updateStartDirectMessage: (value: boolean) => void;
            updateDirectMessageDetails: (value: Participant | null) => void;
            updateShowMessagesBadge: (value: boolean) => void;
            updateAudioSetting: (value: string) => void;
            updateVideoSetting: (value: string) => void;
            updateScreenshareSetting: (value: string) => void;
            updateChatSetting: (value: string) => void;
            updateAutoWave: (value: boolean) => void;
            updateForceFullDisplay: (value: boolean) => void;
            updatePrevForceFullDisplay: (value: boolean) => void;
            updatePrevMeetingDisplayType: (value: string) => void;
            updateWaitingRoomFilter: (value: string) => void;
            updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
            updateWaitingRoomCounter: (value: number) => void;
            updateRequestFilter: (value: string) => void;
            updateRequestList: (value: Request[]) => void;
            updateRequestCounter: (value: number) => void;
            updateTotalReqWait: (value: number) => void;
            updateIsMenuModalVisible: (value: boolean) => void;
            updateIsRecordingModalVisible: (value: boolean) => void;
            updateIsSettingsModalVisible: (value: boolean) => void;
            updateIsRequestsModalVisible: (value: boolean) => void;
            updateIsWaitingModalVisible: (value: boolean) => void;
            updateIsCoHostModalVisible: (value: boolean) => void;
            updateIsMediaSettingsModalVisible: (value: boolean) => void;
            updateIsDisplaySettingsModalVisible: (value: boolean) => void;
            updateIsParticipantsModalVisible: (value: boolean) => void;
            updateIsMessagesModalVisible: (value: boolean) => void;
            updateIsConfirmExitModalVisible: (value: boolean) => void;
            updateIsConfirmHereModalVisible: (value: boolean) => void;
            updateIsLoadingModalVisible: (value: boolean) => void;
            updateRecordingMediaOptions: (value: string) => void;
            updateRecordingAudioOptions: (value: string) => void;
            updateRecordingVideoOptions: (value: string) => void;
            updateRecordingVideoType: (value: string) => void;
            updateRecordingVideoOptimized: (value: boolean) => void;
            updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
            updateRecordingAddHLS: (value: boolean) => void;
            updateRecordingAddText: (value: boolean) => void;
            updateRecordingCustomText: (value: string) => void;
            updateRecordingCustomTextPosition: (value: string) => void;
            updateRecordingCustomTextColor: (value: string) => void;
            updateRecordingNameTags: (value: boolean) => void;
            updateRecordingBackgroundColor: (value: string) => void;
            updateRecordingNameTagsColor: (value: string) => void;
            updateRecordingOrientationVideo: (value: string) => void;
            updateClearedToResume: (value: boolean) => void;
            updateClearedToRecord: (value: boolean) => void;
            updateRecordState: (value: string) => void;
            updateShowRecordButtons: (value: boolean) => void;
            updateRecordingProgressTime: (value: string) => void;
            updateAudioSwitching: (value: boolean) => void;
            updateVideoSwitching: (value: boolean) => void;
            updateVideoAlreadyOn: (value: boolean) => void;
            updateAudioAlreadyOn: (value: boolean) => void;
            updateComponentSizes: (sizes: ComponentSizes) => void;
            updateHasCameraPermission: (value: boolean) => void;
            updateHasAudioPermission: (value: boolean) => void;
            updateTransportCreated: (value: boolean) => void;
            updateTransportCreatedVideo: (value: boolean) => void;
            updateTransportCreatedAudio: (value: boolean) => void;
            updateTransportCreatedScreen: (value: boolean) => void;
            updateProducerTransport: (value: Transport | null) => void;
            updateVideoProducer: (value: Producer | null) => void;
            updateParams: (value: ProducerOptions) => void;
            updateVideoParams: (value: ProducerOptions) => void;
            updateAudioParams: (value: ProducerOptions) => void;
            updateAudioProducer: (value: Producer | null) => void;
            updateConsumerTransports: (value: TransportType[]) => void;
            updateConsumingTransports: (value: string[]) => void;
            updatePolls: (value: Poll[]) => void;
            updatePoll: (value: Poll | null) => void;
            updateIsPollModalVisible: (value: boolean) => void;
            updateCustomImage: (value: string) => void;
            updateSelectedImage: (value: string) => void;
            updateSegmentVideo: (value: MediaStream | null) => void;
            updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
            updatePauseSegmentation: (value: boolean) => void;
            updateProcessedStream: (value: MediaStream | null) => void;
            updateKeepBackground: (value: boolean) => void;
            updateBackgroundHasChanged: (value: boolean) => void;
            updateVirtualStream: (value: MediaStream | null) => void;
            updateMainCanvas: (value: HTMLCanvasElement | null) => void;
            updatePrevKeepBackground: (value: boolean) => void;
            updateAppliedBackground: (value: boolean) => void;
            updateIsBackgroundModalVisible: (value: boolean) => void;
            updateAutoClickBackground: (value: boolean) => void;
            updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
            updateCurrentRoomIndex: (value: number) => void;
            updateCanStartBreakout: (value: boolean) => void;
            updateBreakOutRoomStarted: (value: boolean) => void;
            updateBreakOutRoomEnded: (value: boolean) => void;
            updateHostNewRoom: (value: number) => void;
            updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
            updateMainRoomsLength: (value: number) => void;
            updateMemberRoom: (value: number) => void;
            updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
            updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
            updateCurrentWhiteboardIndex: (value: number) => void;
            updateCanStartWhiteboard: (value: boolean) => void;
            updateWhiteboardStarted: (value: boolean) => void;
            updateWhiteboardEnded: (value: boolean) => void;
            updateWhiteboardLimit: (value: number) => void;
            updateIsWhiteboardModalVisible: (value: boolean) => void;
            updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
            updateShapes: (value: Shape[]) => void;
            updateUseImageBackground: (value: boolean) => void;
            updateRedoStack: (value: Shape[]) => void;
            updateUndoStack: (value: string[]) => void;
            updateCanvasStream: (value: MediaStream | null) => void;
            updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
            updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
            updateProcessedScreenStream: (value: MediaStream | null) => void;
            updateAnnotateScreenStream: (value: boolean) => void;
            updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
            updateIsScreenboardModalVisible: (value: boolean) => void;
            checkOrientation: () => "portrait" | "landscape";
            updateDevice: (value: Device | null) => void;
            updateSocket: (value: Socket) => void;
            updateValidated: (value: boolean) => void;
            showAlert: ({ message, type, duration, }: {
                message: string;
                type: "success" | "danger";
                duration?: number;
            }) => void;
            getUpdatedAllParams: any;
        };
    };
    getUpdatedAllParams: () => {
        updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
        mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
        dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
        stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
        checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
        startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
        requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
        reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
        prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
            component: any;
            inputs: any;
        }[] | void>;
        getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
        rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
        trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
        consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
        connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
        connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
        connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
        connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
        processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
        resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
        readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
        checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
        getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
        calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
        addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
        onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
        sleep: typeof sleep;
        changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
        compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
        compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
        createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
        resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
        receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
        disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
        disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
        disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
        getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
        signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
        connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
        reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
        updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
        closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
        autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
        switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
        switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
            videoPreference: string;
            checkoff: boolean;
            parameters: any;
        }) => Promise<void>;
        switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
        getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
        formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
        connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
        createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
        handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
        handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
        handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
        captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
        resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
        processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
        checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
        streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
        streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
        streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
        streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
        clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
        clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
        clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
        switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
        requestPermissionCamera: () => Promise<string>;
        requestPermissionAudio: () => Promise<string>;
        localUIMode: boolean;
        roomName: string;
        member: string;
        adminPasscode: string;
        youAreCoHost: boolean;
        youAreHost: boolean;
        islevel: string;
        confirmedToRecord: boolean;
        meetingDisplayType: string;
        meetingVideoOptimized: boolean;
        eventType: EventType;
        participants: Participant[];
        filteredParticipants: Participant[];
        participantsCounter: number;
        participantsFilter: string;
        consume_sockets: ConsumeSocket[];
        rtpCapabilities: RtpCapabilities | null;
        roomRecvIPs: string[];
        meetingRoomParams: MeetingRoomParams | null;
        itemPageLimit: number;
        audioOnlyRoom: boolean;
        addForBasic: boolean;
        screenPageLimit: number;
        shareScreenStarted: boolean;
        shared: boolean;
        targetOrientation: string;
        targetResolution: string;
        targetResolutionHost: string;
        vidCons: VidCons;
        frameRate: number;
        hParams: HParamsType;
        vParams: VParamsType;
        screenParams: ScreenParamsType;
        aParams: AParamsType;
        recordingAudioPausesLimit: number;
        recordingAudioPausesCount: number;
        recordingAudioSupport: boolean;
        recordingAudioPeopleLimit: number;
        recordingAudioParticipantsTimeLimit: number;
        recordingVideoPausesCount: number;
        recordingVideoPausesLimit: number;
        recordingVideoSupport: boolean;
        recordingVideoPeopleLimit: number;
        recordingVideoParticipantsTimeLimit: number;
        recordingAllParticipantsSupport: boolean;
        recordingVideoParticipantsSupport: boolean;
        recordingAllParticipantsFullRoomSupport: boolean;
        recordingVideoParticipantsFullRoomSupport: boolean;
        recordingPreferredOrientation: string;
        recordingSupportForOtherOrientation: boolean;
        recordingMultiFormatsSupport: boolean;
        userRecordingParams: UserRecordingParams;
        canRecord: boolean;
        startReport: boolean;
        endReport: boolean;
        recordStartTime: number;
        recordElapsedTime: number;
        isTimerRunning: boolean;
        canPauseResume: boolean;
        recordChangeSeconds: number;
        pauseLimit: number;
        pauseRecordCount: number;
        canLaunchRecord: boolean;
        stopLaunchRecord: boolean;
        participantsAll: Participant[];
        firstAll: boolean;
        updateMainWindow: boolean;
        first_round: boolean;
        landScaped: boolean;
        lock_screen: boolean;
        screenId: string;
        allVideoStreams: (Stream | Participant)[];
        newLimitedStreams: (Stream | Participant)[];
        newLimitedStreamsIDs: string[];
        activeSounds: string[];
        screenShareIDStream: string;
        screenShareNameStream: string;
        adminIDStream: string;
        adminNameStream: string;
        youYouStream: (Stream | Participant)[];
        youYouStreamIDs: string[];
        localStream: MediaStream | null;
        recordStarted: boolean;
        recordResumed: boolean;
        recordPaused: boolean;
        recordStopped: boolean;
        adminRestrictSetting: boolean;
        videoRequestState: string | null;
        videoRequestTime: number;
        videoAction: boolean;
        localStreamVideo: MediaStream | null;
        userDefaultVideoInputDevice: string;
        currentFacingMode: string;
        prevFacingMode: string;
        defVideoID: string;
        allowed: boolean;
        dispActiveNames: string[];
        p_dispActiveNames: string[];
        activeNames: string[];
        prevActiveNames: string[];
        p_activeNames: string[];
        membersReceived: boolean;
        deferScreenReceived: boolean;
        hostFirstSwitch: boolean;
        micAction: boolean;
        screenAction: boolean;
        chatAction: boolean;
        audioRequestState: string | null;
        screenRequestState: string | null;
        chatRequestState: string | null;
        audioRequestTime: number;
        screenRequestTime: number;
        chatRequestTime: number;
        updateRequestIntervalSeconds: number;
        oldSoundIds: string[];
        hostLabel: string;
        mainScreenFilled: boolean;
        localStreamScreen: MediaStream | null;
        screenAlreadyOn: boolean;
        chatAlreadyOn: boolean;
        redirectURL: string;
        oldAllStreams: (Stream | Participant)[];
        adminVidID: string;
        streamNames: Stream[];
        non_alVideoStreams: Participant[];
        sortAudioLoudness: boolean;
        audioDecibels: AudioDecibels[];
        mixed_alVideoStreams: (Stream | Participant)[];
        non_alVideoStreams_muted: Participant[];
        paginatedStreams: (Stream | Participant)[][];
        localStreamAudio: MediaStream | null;
        defAudioID: string;
        userDefaultAudioInputDevice: string;
        userDefaultAudioOutputDevice: string;
        prevAudioInputDevice: string;
        prevVideoInputDevice: string;
        audioPaused: boolean;
        mainScreenPerson: string;
        adminOnMainScreen: boolean;
        screenStates: ScreenState[];
        prevScreenStates: ScreenState[];
        updateDateState: number | null;
        lastUpdate: number | null;
        nForReadjustRecord: number;
        fixedPageLimit: number;
        removeAltGrid: boolean;
        nForReadjust: number;
        lastReorderTime: number;
        reorderInterval: number;
        fastReorderInterval: number;
        audStreamNames: Stream[];
        currentUserPage: number;
        mainHeightWidth: number;
        prevMainHeightWidth: number;
        prevDoPaginate: boolean;
        doPaginate: boolean;
        shareEnded: boolean;
        lStreams: (Stream | Participant)[];
        chatRefStreams: (Stream | Participant)[];
        controlHeight: number;
        isWideScreen: boolean;
        isMediumScreen: boolean;
        isSmallScreen: boolean;
        addGrid: boolean;
        addAltGrid: boolean;
        gridRows: number;
        gridCols: number;
        altGridRows: number;
        altGridCols: number;
        numberPages: number;
        currentStreams: (Stream | Participant)[];
        showMiniView: boolean;
        nStream: MediaStream | null;
        defer_receive: boolean;
        allAudioStreams: (Stream | Participant)[];
        screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        remoteScreenStream: Stream[];
        gotAllVids: boolean;
        paginationHeightWidth: number;
        paginationDirection: "horizontal" | "vertical";
        gridSizes: GridSizes;
        screenForceFullDisplay: boolean;
        mainGridStream: CustomMediaComponent[];
        otherGridStreams: CustomMediaComponent[][];
        audioOnlyStreams: CustomMediaComponent[];
        videoInputs: MediaDeviceInfo[];
        audioInputs: MediaDeviceInfo[];
        meetingProgressTime: string;
        meetingElapsedTime: number;
        ref_participants: Participant[];
        messages: Message[];
        startDirectMessage: boolean;
        directMessageDetails: Participant | null;
        coHost: string;
        coHostResponsibility: CoHostResponsibility[];
        audioSetting: string;
        videoSetting: string;
        screenshareSetting: string;
        chatSetting: string;
        autoWave: boolean;
        forceFullDisplay: boolean;
        prevForceFullDisplay: boolean;
        prevMeetingDisplayType: string;
        waitingRoomFilter: string;
        waitingRoomList: WaitingRoomParticipant[];
        waitingRoomCounter: number;
        filteredWaitingRoomList: WaitingRoomParticipant[];
        requestFilter: string;
        requestList: Request[];
        requestCounter: number;
        filteredRequestList: Request[];
        totalReqWait: number;
        alertVisible: boolean;
        alertMessage: string;
        alertType: "success" | "danger";
        alertDuration: number;
        progressTimerVisible: boolean;
        progressTimerValue: number;
        isMenuModalVisible: boolean;
        isRecordingModalVisible: boolean;
        isSettingsModalVisible: boolean;
        isRequestsModalVisible: boolean;
        isWaitingModalVisible: boolean;
        isCoHostModalVisible: boolean;
        isMediaSettingsModalVisible: boolean;
        isDisplaySettingsModalVisible: boolean;
        isParticipantsModalVisible: boolean;
        isMessagesModalVisible: boolean;
        isConfirmExitModalVisible: boolean;
        isConfirmHereModalVisible: boolean;
        isLoadingModalVisible: boolean;
        recordingMediaOptions: string;
        recordingAudioOptions: string;
        recordingVideoOptions: string;
        recordingVideoType: string;
        recordingVideoOptimized: boolean;
        recordingDisplayType: "video" | "media" | "all";
        recordingAddHLS: boolean;
        recordingAddText: boolean;
        recordingCustomText: string;
        recordingCustomTextPosition: string;
        recordingCustomTextColor: string;
        recordingNameTags: boolean;
        recordingBackgroundColor: string;
        recordingNameTagsColor: string;
        recordingOrientationVideo: string;
        clearedToResume: boolean;
        clearedToRecord: boolean;
        recordState: string;
        showRecordButtons: boolean;
        recordingProgressTime: string;
        audioSwitching: boolean;
        videoSwitching: boolean;
        videoAlreadyOn: boolean;
        audioAlreadyOn: boolean;
        componentSizes: ComponentSizes;
        hasCameraPermission: boolean;
        hasAudioPermission: boolean;
        transportCreated: boolean;
        transportCreatedVideo: boolean;
        transportCreatedAudio: boolean;
        transportCreatedScreen: boolean;
        producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
        videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        params: ProducerOptions;
        videoParams: ProducerOptions;
        audioParams: ProducerOptions;
        audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
        consumerTransports: TransportType[];
        consumingTransports: string[];
        polls: Poll[];
        poll: Poll | null;
        isPollModalVisible: boolean;
        customImage: string;
        selectedImage: string;
        segmentVideo: MediaStream | null;
        selfieSegmentation: SelfieSegmentation | null;
        pauseSegmentation: boolean;
        processedStream: MediaStream | null;
        keepBackground: boolean;
        backgroundHasChanged: boolean;
        virtualStream: MediaStream | null;
        mainCanvas: HTMLCanvasElement | null;
        prevKeepBackground: boolean;
        appliedBackground: boolean;
        isBackgroundModalVisible: boolean;
        autoClickBackground: boolean;
        breakoutRooms: BreakoutParticipant[][];
        currentRoomIndex: number;
        canStartBreakout: boolean;
        breakOutRoomStarted: boolean;
        breakOutRoomEnded: boolean;
        hostNewRoom: number;
        limitedBreakRoom: BreakoutParticipant[];
        mainRoomsLength: number;
        memberRoom: number;
        isBreakoutRoomsModalVisible: boolean;
        whiteboardUsers: WhiteboardUser[];
        currentWhiteboardIndex: number;
        canStartWhiteboard: boolean;
        whiteboardStarted: boolean;
        whiteboardEnded: boolean;
        whiteboardLimit: number;
        isWhiteboardModalVisible: boolean;
        isConfigureWhiteboardModalVisible: boolean;
        shapes: Shape[];
        useImageBackground: boolean;
        redoStack: Shape[];
        undoStack: string[];
        canvasStream: MediaStream | null;
        canvasWhiteboard: HTMLCanvasElement | null;
        canvasScreenboard: HTMLCanvasElement | null;
        processedScreenStream: MediaStream | null;
        annotateScreenStream: boolean;
        mainScreenCanvas: HTMLCanvasElement | null;
        isScreenboardModalVisible: boolean;
        validated: boolean;
        device: Device | null;
        socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
        checkMediaPermission: boolean;
        onWeb: boolean;
        updateRoomName: (value: string) => void;
        updateMember: (value: string) => void;
        updateAdminPasscode: (value: string) => void;
        updateYouAreCoHost: (value: boolean) => void;
        updateYouAreHost: (value: boolean) => void;
        updateIslevel: (value: string) => void;
        updateCoHost: (value: string) => void;
        updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
        updateConfirmedToRecord: (value: boolean) => void;
        updateMeetingDisplayType: (value: string) => void;
        updateMeetingVideoOptimized: (value: boolean) => void;
        updateEventType: (value: EventType) => void;
        updateParticipants: (value: Participant[]) => void;
        updateParticipantsCounter: (value: number) => void;
        updateParticipantsFilter: (value: string) => void;
        updateConsume_sockets: (value: ConsumeSocket[]) => void;
        updateRtpCapabilities: (value: RtpCapabilities | null) => void;
        updateRoomRecvIPs: (value: string[]) => void;
        updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
        updateItemPageLimit: (value: number) => void;
        updateAudioOnlyRoom: (value: boolean) => void;
        updateAddForBasic: (value: boolean) => void;
        updateScreenPageLimit: (value: number) => void;
        updateShareScreenStarted: (value: boolean) => void;
        updateShared: (value: boolean) => void;
        updateTargetOrientation: (value: string) => void;
        updateTargetResolution: (value: string) => void;
        updateTargetResolutionHost: (value: string) => void;
        updateVidCons: (value: VidCons) => void;
        updateFrameRate: (value: number) => void;
        updateHParams: (value: HParamsType) => void;
        updateVParams: (value: VParamsType) => void;
        updateScreenParams: (value: ScreenParamsType) => void;
        updateAParams: (value: AParamsType) => void;
        updateRecordingAudioPausesLimit: (value: number) => void;
        updateRecordingAudioPausesCount: (value: number) => void;
        updateRecordingAudioSupport: (value: boolean) => void;
        updateRecordingAudioPeopleLimit: (value: number) => void;
        updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
        updateRecordingVideoPausesCount: (value: number) => void;
        updateRecordingVideoPausesLimit: (value: number) => void;
        updateRecordingVideoSupport: (value: boolean) => void;
        updateRecordingVideoPeopleLimit: (value: number) => void;
        updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
        updateRecordingAllParticipantsSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsSupport: (value: boolean) => void;
        updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
        updateRecordingPreferredOrientation: (value: string) => void;
        updateRecordingSupportForOtherOrientation: (value: boolean) => void;
        updateRecordingMultiFormatsSupport: (value: boolean) => void;
        updateUserRecordingParams: (value: UserRecordingParams) => void;
        updateCanRecord: (value: boolean) => void;
        updateStartReport: (value: boolean) => void;
        updateEndReport: (value: boolean) => void;
        updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
        updateRecordStartTime: (value: number) => void;
        updateRecordElapsedTime: (value: number) => void;
        updateIsTimerRunning: (value: boolean) => void;
        updateCanPauseResume: (value: boolean) => void;
        updateRecordChangeSeconds: (value: number) => void;
        updatePauseLimit: (value: number) => void;
        updatePauseRecordCount: (value: number) => void;
        updateCanLaunchRecord: (value: boolean) => void;
        updateStopLaunchRecord: (value: boolean) => void;
        updateParticipantsAll: (value: Participant[]) => void;
        updateFirstAll: (value: boolean) => void;
        updateUpdateMainWindow: (value: boolean) => void;
        updateFirst_round: (value: boolean) => void;
        updateLandScaped: (value: boolean) => void;
        updateLock_screen: (value: boolean) => void;
        updateScreenId: (value: string) => void;
        updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
        updateNewLimitedStreamsIDs: (value: string[]) => void;
        updateActiveSounds: (value: string[]) => void;
        updateScreenShareIDStream: (value: string) => void;
        updateScreenShareNameStream: (value: string) => void;
        updateAdminIDStream: (value: string) => void;
        updateAdminNameStream: (value: string) => void;
        updateYouYouStream: (value: (Participant | Stream)[]) => void;
        updateYouYouStreamIDs: (value: string[]) => void;
        updateLocalStream: (value: MediaStream | null) => void;
        updateRecordStarted: (value: boolean) => void;
        updateRecordResumed: (value: boolean) => void;
        updateRecordPaused: (value: boolean) => void;
        updateRecordStopped: (value: boolean) => void;
        updateAdminRestrictSetting: (value: boolean) => void;
        updateVideoRequestState: (value: string | null) => void;
        updateVideoRequestTime: (value: number) => void;
        updateVideoAction: (value: boolean) => void;
        updateLocalStreamVideo: (value: MediaStream | null) => void;
        updateUserDefaultVideoInputDevice: (value: string) => void;
        updateCurrentFacingMode: (value: string) => void;
        updatePrevFacingMode: (value: string) => void;
        updateDefVideoID: (value: string) => void;
        updateAllowed: (value: boolean) => void;
        updateDispActiveNames: (value: string[]) => void;
        updateP_dispActiveNames: (value: string[]) => void;
        updateActiveNames: (value: string[]) => void;
        updatePrevActiveNames: (value: string[]) => void;
        updateP_activeNames: (value: string[]) => void;
        updateMembersReceived: (value: boolean) => void;
        updateDeferScreenReceived: (value: boolean) => void;
        updateHostFirstSwitch: (value: boolean) => void;
        updateMicAction: (value: boolean) => void;
        updateScreenAction: (value: boolean) => void;
        updateChatAction: (value: boolean) => void;
        updateAudioRequestState: (value: string | null) => void;
        updateScreenRequestState: (value: string | null) => void;
        updateChatRequestState: (value: string | null) => void;
        updateAudioRequestTime: (value: number) => void;
        updateScreenRequestTime: (value: number) => void;
        updateChatRequestTime: (value: number) => void;
        updateOldSoundIds: (value: string[]) => void;
        updateHostLabel: (value: string) => void;
        updateMainScreenFilled: (value: boolean) => void;
        updateLocalStreamScreen: (value: MediaStream | null) => void;
        updateScreenAlreadyOn: (value: boolean) => void;
        updateChatAlreadyOn: (value: boolean) => void;
        updateRedirectURL: (value: string) => void;
        updateOldAllStreams: (value: (Participant | Stream)[]) => void;
        updateAdminVidID: (value: string) => void;
        updateStreamNames: (value: Stream[]) => void;
        updateNon_alVideoStreams: (value: Participant[]) => void;
        updateSortAudioLoudness: (value: boolean) => void;
        updateAudioDecibels: (value: AudioDecibels[]) => void;
        updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
        updateNon_alVideoStreams_muted: (value: Participant[]) => void;
        updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
        updateLocalStreamAudio: (value: MediaStream | null) => void;
        updateDefAudioID: (value: string) => void;
        updateUserDefaultAudioInputDevice: (value: string) => void;
        updateUserDefaultAudioOutputDevice: (value: string) => void;
        updatePrevAudioInputDevice: (value: string) => void;
        updatePrevVideoInputDevice: (value: string) => void;
        updateAudioPaused: (value: boolean) => void;
        updateMainScreenPerson: (value: string) => void;
        updateAdminOnMainScreen: (value: boolean) => void;
        updateScreenStates: (value: ScreenState[]) => void;
        updatePrevScreenStates: (value: ScreenState[]) => void;
        updateUpdateDateState: (value: number | null) => void;
        updateLastUpdate: (value: number | null) => void;
        updateNForReadjustRecord: (value: number) => void;
        updateFixedPageLimit: (value: number) => void;
        updateRemoveAltGrid: (value: boolean) => void;
        updateNForReadjust: (value: number) => void;
        updateLastReorderTime: (value: number) => void;
        updateAudStreamNames: (value: Stream[]) => void;
        updateCurrentUserPage: (value: number) => void;
        updateMainHeightWidth: (value: number) => void;
        updatePrevMainHeightWidth: (value: number) => void;
        updatePrevDoPaginate: (value: boolean) => void;
        updateDoPaginate: (value: boolean) => void;
        updateShareEnded: (value: boolean) => void;
        updateLStreams: (value: (Participant | Stream)[]) => void;
        updateChatRefStreams: (value: (Participant | Stream)[]) => void;
        updateControlHeight: (value: number) => void;
        updateIsWideScreen: (value: boolean) => void;
        updateIsMediumScreen: (value: boolean) => void;
        updateIsSmallScreen: (value: boolean) => void;
        updateAddGrid: (value: boolean) => void;
        updateAddAltGrid: (value: boolean) => void;
        updateGridRows: (value: number) => void;
        updateGridCols: (value: number) => void;
        updateAltGridRows: (value: number) => void;
        updateAltGridCols: (value: number) => void;
        updateNumberPages: (value: number) => void;
        updateCurrentStreams: (value: (Participant | Stream)[]) => void;
        updateShowMiniView: (value: boolean) => void;
        updateNStream: (value: MediaStream | null) => void;
        updateDefer_receive: (value: boolean) => void;
        updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
        updateRemoteScreenStream: (value: Stream[]) => void;
        updateScreenProducer: (value: Producer | null) => void;
        updateGotAllVids: (value: boolean) => void;
        updatePaginationHeightWidth: (value: number) => void;
        updatePaginationDirection: (value: "horizontal" | "vertical") => void;
        updateGridSizes: (value: GridSizes) => void;
        updateScreenForceFullDisplay: (value: boolean) => void;
        updateMainGridStream: (value: CustomMediaComponent[]) => void;
        updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
        updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
        updateVideoInputs: (value: MediaDeviceInfo[]) => void;
        updateAudioInputs: (value: MediaDeviceInfo[]) => void;
        updateMeetingProgressTime: (value: string) => void;
        updateMeetingElapsedTime: (value: number) => void;
        updateRef_participants: (value: Participant[]) => void;
        updateMessages: (value: Message[]) => void;
        updateStartDirectMessage: (value: boolean) => void;
        updateDirectMessageDetails: (value: Participant | null) => void;
        updateShowMessagesBadge: (value: boolean) => void;
        updateAudioSetting: (value: string) => void;
        updateVideoSetting: (value: string) => void;
        updateScreenshareSetting: (value: string) => void;
        updateChatSetting: (value: string) => void;
        updateAutoWave: (value: boolean) => void;
        updateForceFullDisplay: (value: boolean) => void;
        updatePrevForceFullDisplay: (value: boolean) => void;
        updatePrevMeetingDisplayType: (value: string) => void;
        updateWaitingRoomFilter: (value: string) => void;
        updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
        updateWaitingRoomCounter: (value: number) => void;
        updateRequestFilter: (value: string) => void;
        updateRequestList: (value: Request[]) => void;
        updateRequestCounter: (value: number) => void;
        updateTotalReqWait: (value: number) => void;
        updateIsMenuModalVisible: (value: boolean) => void;
        updateIsRecordingModalVisible: (value: boolean) => void;
        updateIsSettingsModalVisible: (value: boolean) => void;
        updateIsRequestsModalVisible: (value: boolean) => void;
        updateIsWaitingModalVisible: (value: boolean) => void;
        updateIsCoHostModalVisible: (value: boolean) => void;
        updateIsMediaSettingsModalVisible: (value: boolean) => void;
        updateIsDisplaySettingsModalVisible: (value: boolean) => void;
        updateIsParticipantsModalVisible: (value: boolean) => void;
        updateIsMessagesModalVisible: (value: boolean) => void;
        updateIsConfirmExitModalVisible: (value: boolean) => void;
        updateIsConfirmHereModalVisible: (value: boolean) => void;
        updateIsLoadingModalVisible: (value: boolean) => void;
        updateRecordingMediaOptions: (value: string) => void;
        updateRecordingAudioOptions: (value: string) => void;
        updateRecordingVideoOptions: (value: string) => void;
        updateRecordingVideoType: (value: string) => void;
        updateRecordingVideoOptimized: (value: boolean) => void;
        updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
        updateRecordingAddHLS: (value: boolean) => void;
        updateRecordingAddText: (value: boolean) => void;
        updateRecordingCustomText: (value: string) => void;
        updateRecordingCustomTextPosition: (value: string) => void;
        updateRecordingCustomTextColor: (value: string) => void;
        updateRecordingNameTags: (value: boolean) => void;
        updateRecordingBackgroundColor: (value: string) => void;
        updateRecordingNameTagsColor: (value: string) => void;
        updateRecordingOrientationVideo: (value: string) => void;
        updateClearedToResume: (value: boolean) => void;
        updateClearedToRecord: (value: boolean) => void;
        updateRecordState: (value: string) => void;
        updateShowRecordButtons: (value: boolean) => void;
        updateRecordingProgressTime: (value: string) => void;
        updateAudioSwitching: (value: boolean) => void;
        updateVideoSwitching: (value: boolean) => void;
        updateVideoAlreadyOn: (value: boolean) => void;
        updateAudioAlreadyOn: (value: boolean) => void;
        updateComponentSizes: (sizes: ComponentSizes) => void;
        updateHasCameraPermission: (value: boolean) => void;
        updateHasAudioPermission: (value: boolean) => void;
        updateTransportCreated: (value: boolean) => void;
        updateTransportCreatedVideo: (value: boolean) => void;
        updateTransportCreatedAudio: (value: boolean) => void;
        updateTransportCreatedScreen: (value: boolean) => void;
        updateProducerTransport: (value: Transport | null) => void;
        updateVideoProducer: (value: Producer | null) => void;
        updateParams: (value: ProducerOptions) => void;
        updateVideoParams: (value: ProducerOptions) => void;
        updateAudioParams: (value: ProducerOptions) => void;
        updateAudioProducer: (value: Producer | null) => void;
        updateConsumerTransports: (value: TransportType[]) => void;
        updateConsumingTransports: (value: string[]) => void;
        updatePolls: (value: Poll[]) => void;
        updatePoll: (value: Poll | null) => void;
        updateIsPollModalVisible: (value: boolean) => void;
        updateCustomImage: (value: string) => void;
        updateSelectedImage: (value: string) => void;
        updateSegmentVideo: (value: MediaStream | null) => void;
        updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
        updatePauseSegmentation: (value: boolean) => void;
        updateProcessedStream: (value: MediaStream | null) => void;
        updateKeepBackground: (value: boolean) => void;
        updateBackgroundHasChanged: (value: boolean) => void;
        updateVirtualStream: (value: MediaStream | null) => void;
        updateMainCanvas: (value: HTMLCanvasElement | null) => void;
        updatePrevKeepBackground: (value: boolean) => void;
        updateAppliedBackground: (value: boolean) => void;
        updateIsBackgroundModalVisible: (value: boolean) => void;
        updateAutoClickBackground: (value: boolean) => void;
        updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
        updateCurrentRoomIndex: (value: number) => void;
        updateCanStartBreakout: (value: boolean) => void;
        updateBreakOutRoomStarted: (value: boolean) => void;
        updateBreakOutRoomEnded: (value: boolean) => void;
        updateHostNewRoom: (value: number) => void;
        updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
        updateMainRoomsLength: (value: number) => void;
        updateMemberRoom: (value: number) => void;
        updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
        updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
        updateCurrentWhiteboardIndex: (value: number) => void;
        updateCanStartWhiteboard: (value: boolean) => void;
        updateWhiteboardStarted: (value: boolean) => void;
        updateWhiteboardEnded: (value: boolean) => void;
        updateWhiteboardLimit: (value: number) => void;
        updateIsWhiteboardModalVisible: (value: boolean) => void;
        updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
        updateShapes: (value: Shape[]) => void;
        updateUseImageBackground: (value: boolean) => void;
        updateRedoStack: (value: Shape[]) => void;
        updateUndoStack: (value: string[]) => void;
        updateCanvasStream: (value: MediaStream | null) => void;
        updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
        updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
        updateProcessedScreenStream: (value: MediaStream | null) => void;
        updateAnnotateScreenStream: (value: boolean) => void;
        updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
        updateIsScreenboardModalVisible: (value: boolean) => void;
        checkOrientation: () => "portrait" | "landscape";
        updateDevice: (value: Device | null) => void;
        updateSocket: (value: Socket) => void;
        updateValidated: (value: boolean) => void;
        showAlert: ({ message, type, duration, }: {
            message: string;
            type: "success" | "danger";
            duration?: number;
        }) => void;
        getUpdatedAllParams: () => {
            updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
            mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
            dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
            stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
            checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
            startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
            requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
            reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
            prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
                component: any;
                inputs: any;
            }[] | void>;
            getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
            rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
            trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
            consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
            connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
            connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
            connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
            connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
            processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
            resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
            readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
            checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
            getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
            calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
            addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
            onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
            sleep: typeof sleep;
            changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
            compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
            compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
            createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
            resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
            receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
            disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
            disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
            disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
            getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
            signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
            connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
            reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
            updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
            closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
            autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
            switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
            switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
                videoPreference: string;
                checkoff: boolean;
                parameters: any;
            }) => Promise<void>;
            switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
            getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
            formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
            connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
            createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
            handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
            handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
            handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
            captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
            resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
            processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
            checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
            streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
            streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
            streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
            streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
            clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
            clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
            clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
            switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
            requestPermissionCamera: () => Promise<string>;
            requestPermissionAudio: () => Promise<string>;
            localUIMode: boolean;
            roomName: string;
            member: string;
            adminPasscode: string;
            youAreCoHost: boolean;
            youAreHost: boolean;
            islevel: string;
            confirmedToRecord: boolean;
            meetingDisplayType: string;
            meetingVideoOptimized: boolean;
            eventType: EventType;
            participants: Participant[];
            filteredParticipants: Participant[];
            participantsCounter: number;
            participantsFilter: string;
            consume_sockets: ConsumeSocket[];
            rtpCapabilities: RtpCapabilities | null;
            roomRecvIPs: string[];
            meetingRoomParams: MeetingRoomParams | null;
            itemPageLimit: number;
            audioOnlyRoom: boolean;
            addForBasic: boolean;
            screenPageLimit: number;
            shareScreenStarted: boolean;
            shared: boolean;
            targetOrientation: string;
            targetResolution: string;
            targetResolutionHost: string;
            vidCons: VidCons;
            frameRate: number;
            hParams: HParamsType;
            vParams: VParamsType;
            screenParams: ScreenParamsType;
            aParams: AParamsType;
            recordingAudioPausesLimit: number;
            recordingAudioPausesCount: number;
            recordingAudioSupport: boolean;
            recordingAudioPeopleLimit: number;
            recordingAudioParticipantsTimeLimit: number;
            recordingVideoPausesCount: number;
            recordingVideoPausesLimit: number;
            recordingVideoSupport: boolean;
            recordingVideoPeopleLimit: number;
            recordingVideoParticipantsTimeLimit: number;
            recordingAllParticipantsSupport: boolean;
            recordingVideoParticipantsSupport: boolean;
            recordingAllParticipantsFullRoomSupport: boolean;
            recordingVideoParticipantsFullRoomSupport: boolean;
            recordingPreferredOrientation: string;
            recordingSupportForOtherOrientation: boolean;
            recordingMultiFormatsSupport: boolean;
            userRecordingParams: UserRecordingParams;
            canRecord: boolean;
            startReport: boolean;
            endReport: boolean;
            recordStartTime: number;
            recordElapsedTime: number;
            isTimerRunning: boolean;
            canPauseResume: boolean;
            recordChangeSeconds: number;
            pauseLimit: number;
            pauseRecordCount: number;
            canLaunchRecord: boolean;
            stopLaunchRecord: boolean;
            participantsAll: Participant[];
            firstAll: boolean;
            updateMainWindow: boolean;
            first_round: boolean;
            landScaped: boolean;
            lock_screen: boolean;
            screenId: string;
            allVideoStreams: (Stream | Participant)[];
            newLimitedStreams: (Stream | Participant)[];
            newLimitedStreamsIDs: string[];
            activeSounds: string[];
            screenShareIDStream: string;
            screenShareNameStream: string;
            adminIDStream: string;
            adminNameStream: string;
            youYouStream: (Stream | Participant)[];
            youYouStreamIDs: string[];
            localStream: MediaStream | null;
            recordStarted: boolean;
            recordResumed: boolean;
            recordPaused: boolean;
            recordStopped: boolean;
            adminRestrictSetting: boolean;
            videoRequestState: string | null;
            videoRequestTime: number;
            videoAction: boolean;
            localStreamVideo: MediaStream | null;
            userDefaultVideoInputDevice: string;
            currentFacingMode: string;
            prevFacingMode: string;
            defVideoID: string;
            allowed: boolean;
            dispActiveNames: string[];
            p_dispActiveNames: string[];
            activeNames: string[];
            prevActiveNames: string[];
            p_activeNames: string[];
            membersReceived: boolean;
            deferScreenReceived: boolean;
            hostFirstSwitch: boolean;
            micAction: boolean;
            screenAction: boolean;
            chatAction: boolean;
            audioRequestState: string | null;
            screenRequestState: string | null;
            chatRequestState: string | null;
            audioRequestTime: number;
            screenRequestTime: number;
            chatRequestTime: number;
            updateRequestIntervalSeconds: number;
            oldSoundIds: string[];
            hostLabel: string;
            mainScreenFilled: boolean;
            localStreamScreen: MediaStream | null;
            screenAlreadyOn: boolean;
            chatAlreadyOn: boolean;
            redirectURL: string;
            oldAllStreams: (Stream | Participant)[];
            adminVidID: string;
            streamNames: Stream[];
            non_alVideoStreams: Participant[];
            sortAudioLoudness: boolean;
            audioDecibels: AudioDecibels[];
            mixed_alVideoStreams: (Stream | Participant)[];
            non_alVideoStreams_muted: Participant[];
            paginatedStreams: (Stream | Participant)[][];
            localStreamAudio: MediaStream | null;
            defAudioID: string;
            userDefaultAudioInputDevice: string;
            userDefaultAudioOutputDevice: string;
            prevAudioInputDevice: string;
            prevVideoInputDevice: string;
            audioPaused: boolean;
            mainScreenPerson: string;
            adminOnMainScreen: boolean;
            screenStates: ScreenState[];
            prevScreenStates: ScreenState[];
            updateDateState: number | null;
            lastUpdate: number | null;
            nForReadjustRecord: number;
            fixedPageLimit: number;
            removeAltGrid: boolean;
            nForReadjust: number;
            lastReorderTime: number;
            reorderInterval: number;
            fastReorderInterval: number;
            audStreamNames: Stream[];
            currentUserPage: number;
            mainHeightWidth: number;
            prevMainHeightWidth: number;
            prevDoPaginate: boolean;
            doPaginate: boolean;
            shareEnded: boolean;
            lStreams: (Stream | Participant)[];
            chatRefStreams: (Stream | Participant)[];
            controlHeight: number;
            isWideScreen: boolean;
            isMediumScreen: boolean;
            isSmallScreen: boolean;
            addGrid: boolean;
            addAltGrid: boolean;
            gridRows: number;
            gridCols: number;
            altGridRows: number;
            altGridCols: number;
            numberPages: number;
            currentStreams: (Stream | Participant)[];
            showMiniView: boolean;
            nStream: MediaStream | null;
            defer_receive: boolean;
            allAudioStreams: (Stream | Participant)[];
            screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            remoteScreenStream: Stream[];
            gotAllVids: boolean;
            paginationHeightWidth: number;
            paginationDirection: "horizontal" | "vertical";
            gridSizes: GridSizes;
            screenForceFullDisplay: boolean;
            mainGridStream: CustomMediaComponent[];
            otherGridStreams: CustomMediaComponent[][];
            audioOnlyStreams: CustomMediaComponent[];
            videoInputs: MediaDeviceInfo[];
            audioInputs: MediaDeviceInfo[];
            meetingProgressTime: string;
            meetingElapsedTime: number;
            ref_participants: Participant[];
            messages: Message[];
            startDirectMessage: boolean;
            directMessageDetails: Participant | null;
            coHost: string;
            coHostResponsibility: CoHostResponsibility[];
            audioSetting: string;
            videoSetting: string;
            screenshareSetting: string;
            chatSetting: string;
            autoWave: boolean;
            forceFullDisplay: boolean;
            prevForceFullDisplay: boolean;
            prevMeetingDisplayType: string;
            waitingRoomFilter: string;
            waitingRoomList: WaitingRoomParticipant[];
            waitingRoomCounter: number;
            filteredWaitingRoomList: WaitingRoomParticipant[];
            requestFilter: string;
            requestList: Request[];
            requestCounter: number;
            filteredRequestList: Request[];
            totalReqWait: number;
            alertVisible: boolean;
            alertMessage: string;
            alertType: "success" | "danger";
            alertDuration: number;
            progressTimerVisible: boolean;
            progressTimerValue: number;
            isMenuModalVisible: boolean;
            isRecordingModalVisible: boolean;
            isSettingsModalVisible: boolean;
            isRequestsModalVisible: boolean;
            isWaitingModalVisible: boolean;
            isCoHostModalVisible: boolean;
            isMediaSettingsModalVisible: boolean;
            isDisplaySettingsModalVisible: boolean;
            isParticipantsModalVisible: boolean;
            isMessagesModalVisible: boolean;
            isConfirmExitModalVisible: boolean;
            isConfirmHereModalVisible: boolean;
            isLoadingModalVisible: boolean;
            recordingMediaOptions: string;
            recordingAudioOptions: string;
            recordingVideoOptions: string;
            recordingVideoType: string;
            recordingVideoOptimized: boolean;
            recordingDisplayType: "video" | "media" | "all";
            recordingAddHLS: boolean;
            recordingAddText: boolean;
            recordingCustomText: string;
            recordingCustomTextPosition: string;
            recordingCustomTextColor: string;
            recordingNameTags: boolean;
            recordingBackgroundColor: string;
            recordingNameTagsColor: string;
            recordingOrientationVideo: string;
            clearedToResume: boolean;
            clearedToRecord: boolean;
            recordState: string;
            showRecordButtons: boolean;
            recordingProgressTime: string;
            audioSwitching: boolean;
            videoSwitching: boolean;
            videoAlreadyOn: boolean;
            audioAlreadyOn: boolean;
            componentSizes: ComponentSizes;
            hasCameraPermission: boolean;
            hasAudioPermission: boolean;
            transportCreated: boolean;
            transportCreatedVideo: boolean;
            transportCreatedAudio: boolean;
            transportCreatedScreen: boolean;
            producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
            videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            params: ProducerOptions;
            videoParams: ProducerOptions;
            audioParams: ProducerOptions;
            audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
            consumerTransports: TransportType[];
            consumingTransports: string[];
            polls: Poll[];
            poll: Poll | null;
            isPollModalVisible: boolean;
            customImage: string;
            selectedImage: string;
            segmentVideo: MediaStream | null;
            selfieSegmentation: SelfieSegmentation | null;
            pauseSegmentation: boolean;
            processedStream: MediaStream | null;
            keepBackground: boolean;
            backgroundHasChanged: boolean;
            virtualStream: MediaStream | null;
            mainCanvas: HTMLCanvasElement | null;
            prevKeepBackground: boolean;
            appliedBackground: boolean;
            isBackgroundModalVisible: boolean;
            autoClickBackground: boolean;
            breakoutRooms: BreakoutParticipant[][];
            currentRoomIndex: number;
            canStartBreakout: boolean;
            breakOutRoomStarted: boolean;
            breakOutRoomEnded: boolean;
            hostNewRoom: number;
            limitedBreakRoom: BreakoutParticipant[];
            mainRoomsLength: number;
            memberRoom: number;
            isBreakoutRoomsModalVisible: boolean;
            whiteboardUsers: WhiteboardUser[];
            currentWhiteboardIndex: number;
            canStartWhiteboard: boolean;
            whiteboardStarted: boolean;
            whiteboardEnded: boolean;
            whiteboardLimit: number;
            isWhiteboardModalVisible: boolean;
            isConfigureWhiteboardModalVisible: boolean;
            shapes: Shape[];
            useImageBackground: boolean;
            redoStack: Shape[];
            undoStack: string[];
            canvasStream: MediaStream | null;
            canvasWhiteboard: HTMLCanvasElement | null;
            canvasScreenboard: HTMLCanvasElement | null;
            processedScreenStream: MediaStream | null;
            annotateScreenStream: boolean;
            mainScreenCanvas: HTMLCanvasElement | null;
            isScreenboardModalVisible: boolean;
            validated: boolean;
            device: Device | null;
            socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
            checkMediaPermission: boolean;
            onWeb: boolean;
            updateRoomName: (value: string) => void;
            updateMember: (value: string) => void;
            updateAdminPasscode: (value: string) => void;
            updateYouAreCoHost: (value: boolean) => void;
            updateYouAreHost: (value: boolean) => void;
            updateIslevel: (value: string) => void;
            updateCoHost: (value: string) => void;
            updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
            updateConfirmedToRecord: (value: boolean) => void;
            updateMeetingDisplayType: (value: string) => void;
            updateMeetingVideoOptimized: (value: boolean) => void;
            updateEventType: (value: EventType) => void;
            updateParticipants: (value: Participant[]) => void;
            updateParticipantsCounter: (value: number) => void;
            updateParticipantsFilter: (value: string) => void;
            updateConsume_sockets: (value: ConsumeSocket[]) => void;
            updateRtpCapabilities: (value: RtpCapabilities | null) => void;
            updateRoomRecvIPs: (value: string[]) => void;
            updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
            updateItemPageLimit: (value: number) => void;
            updateAudioOnlyRoom: (value: boolean) => void;
            updateAddForBasic: (value: boolean) => void;
            updateScreenPageLimit: (value: number) => void;
            updateShareScreenStarted: (value: boolean) => void;
            updateShared: (value: boolean) => void;
            updateTargetOrientation: (value: string) => void;
            updateTargetResolution: (value: string) => void;
            updateTargetResolutionHost: (value: string) => void;
            updateVidCons: (value: VidCons) => void;
            updateFrameRate: (value: number) => void;
            updateHParams: (value: HParamsType) => void;
            updateVParams: (value: VParamsType) => void;
            updateScreenParams: (value: ScreenParamsType) => void;
            updateAParams: (value: AParamsType) => void;
            updateRecordingAudioPausesLimit: (value: number) => void;
            updateRecordingAudioPausesCount: (value: number) => void;
            updateRecordingAudioSupport: (value: boolean) => void;
            updateRecordingAudioPeopleLimit: (value: number) => void;
            updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
            updateRecordingVideoPausesCount: (value: number) => void;
            updateRecordingVideoPausesLimit: (value: number) => void;
            updateRecordingVideoSupport: (value: boolean) => void;
            updateRecordingVideoPeopleLimit: (value: number) => void;
            updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
            updateRecordingAllParticipantsSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsSupport: (value: boolean) => void;
            updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
            updateRecordingPreferredOrientation: (value: string) => void;
            updateRecordingSupportForOtherOrientation: (value: boolean) => void;
            updateRecordingMultiFormatsSupport: (value: boolean) => void;
            updateUserRecordingParams: (value: UserRecordingParams) => void;
            updateCanRecord: (value: boolean) => void;
            updateStartReport: (value: boolean) => void;
            updateEndReport: (value: boolean) => void;
            updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
            updateRecordStartTime: (value: number) => void;
            updateRecordElapsedTime: (value: number) => void;
            updateIsTimerRunning: (value: boolean) => void;
            updateCanPauseResume: (value: boolean) => void;
            updateRecordChangeSeconds: (value: number) => void;
            updatePauseLimit: (value: number) => void;
            updatePauseRecordCount: (value: number) => void;
            updateCanLaunchRecord: (value: boolean) => void;
            updateStopLaunchRecord: (value: boolean) => void;
            updateParticipantsAll: (value: Participant[]) => void;
            updateFirstAll: (value: boolean) => void;
            updateUpdateMainWindow: (value: boolean) => void;
            updateFirst_round: (value: boolean) => void;
            updateLandScaped: (value: boolean) => void;
            updateLock_screen: (value: boolean) => void;
            updateScreenId: (value: string) => void;
            updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
            updateNewLimitedStreamsIDs: (value: string[]) => void;
            updateActiveSounds: (value: string[]) => void;
            updateScreenShareIDStream: (value: string) => void;
            updateScreenShareNameStream: (value: string) => void;
            updateAdminIDStream: (value: string) => void;
            updateAdminNameStream: (value: string) => void;
            updateYouYouStream: (value: (Participant | Stream)[]) => void;
            updateYouYouStreamIDs: (value: string[]) => void;
            updateLocalStream: (value: MediaStream | null) => void;
            updateRecordStarted: (value: boolean) => void;
            updateRecordResumed: (value: boolean) => void;
            updateRecordPaused: (value: boolean) => void;
            updateRecordStopped: (value: boolean) => void;
            updateAdminRestrictSetting: (value: boolean) => void;
            updateVideoRequestState: (value: string | null) => void;
            updateVideoRequestTime: (value: number) => void;
            updateVideoAction: (value: boolean) => void;
            updateLocalStreamVideo: (value: MediaStream | null) => void;
            updateUserDefaultVideoInputDevice: (value: string) => void;
            updateCurrentFacingMode: (value: string) => void;
            updatePrevFacingMode: (value: string) => void;
            updateDefVideoID: (value: string) => void;
            updateAllowed: (value: boolean) => void;
            updateDispActiveNames: (value: string[]) => void;
            updateP_dispActiveNames: (value: string[]) => void;
            updateActiveNames: (value: string[]) => void;
            updatePrevActiveNames: (value: string[]) => void;
            updateP_activeNames: (value: string[]) => void;
            updateMembersReceived: (value: boolean) => void;
            updateDeferScreenReceived: (value: boolean) => void;
            updateHostFirstSwitch: (value: boolean) => void;
            updateMicAction: (value: boolean) => void;
            updateScreenAction: (value: boolean) => void;
            updateChatAction: (value: boolean) => void;
            updateAudioRequestState: (value: string | null) => void;
            updateScreenRequestState: (value: string | null) => void;
            updateChatRequestState: (value: string | null) => void;
            updateAudioRequestTime: (value: number) => void;
            updateScreenRequestTime: (value: number) => void;
            updateChatRequestTime: (value: number) => void;
            updateOldSoundIds: (value: string[]) => void;
            updateHostLabel: (value: string) => void;
            updateMainScreenFilled: (value: boolean) => void;
            updateLocalStreamScreen: (value: MediaStream | null) => void;
            updateScreenAlreadyOn: (value: boolean) => void;
            updateChatAlreadyOn: (value: boolean) => void;
            updateRedirectURL: (value: string) => void;
            updateOldAllStreams: (value: (Participant | Stream)[]) => void;
            updateAdminVidID: (value: string) => void;
            updateStreamNames: (value: Stream[]) => void;
            updateNon_alVideoStreams: (value: Participant[]) => void;
            updateSortAudioLoudness: (value: boolean) => void;
            updateAudioDecibels: (value: AudioDecibels[]) => void;
            updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
            updateNon_alVideoStreams_muted: (value: Participant[]) => void;
            updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
            updateLocalStreamAudio: (value: MediaStream | null) => void;
            updateDefAudioID: (value: string) => void;
            updateUserDefaultAudioInputDevice: (value: string) => void;
            updateUserDefaultAudioOutputDevice: (value: string) => void;
            updatePrevAudioInputDevice: (value: string) => void;
            updatePrevVideoInputDevice: (value: string) => void;
            updateAudioPaused: (value: boolean) => void;
            updateMainScreenPerson: (value: string) => void;
            updateAdminOnMainScreen: (value: boolean) => void;
            updateScreenStates: (value: ScreenState[]) => void;
            updatePrevScreenStates: (value: ScreenState[]) => void;
            updateUpdateDateState: (value: number | null) => void;
            updateLastUpdate: (value: number | null) => void;
            updateNForReadjustRecord: (value: number) => void;
            updateFixedPageLimit: (value: number) => void;
            updateRemoveAltGrid: (value: boolean) => void;
            updateNForReadjust: (value: number) => void;
            updateLastReorderTime: (value: number) => void;
            updateAudStreamNames: (value: Stream[]) => void;
            updateCurrentUserPage: (value: number) => void;
            updateMainHeightWidth: (value: number) => void;
            updatePrevMainHeightWidth: (value: number) => void;
            updatePrevDoPaginate: (value: boolean) => void;
            updateDoPaginate: (value: boolean) => void;
            updateShareEnded: (value: boolean) => void;
            updateLStreams: (value: (Participant | Stream)[]) => void;
            updateChatRefStreams: (value: (Participant | Stream)[]) => void;
            updateControlHeight: (value: number) => void;
            updateIsWideScreen: (value: boolean) => void;
            updateIsMediumScreen: (value: boolean) => void;
            updateIsSmallScreen: (value: boolean) => void;
            updateAddGrid: (value: boolean) => void;
            updateAddAltGrid: (value: boolean) => void;
            updateGridRows: (value: number) => void;
            updateGridCols: (value: number) => void;
            updateAltGridRows: (value: number) => void;
            updateAltGridCols: (value: number) => void;
            updateNumberPages: (value: number) => void;
            updateCurrentStreams: (value: (Participant | Stream)[]) => void;
            updateShowMiniView: (value: boolean) => void;
            updateNStream: (value: MediaStream | null) => void;
            updateDefer_receive: (value: boolean) => void;
            updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
            updateRemoteScreenStream: (value: Stream[]) => void;
            updateScreenProducer: (value: Producer | null) => void;
            updateGotAllVids: (value: boolean) => void;
            updatePaginationHeightWidth: (value: number) => void;
            updatePaginationDirection: (value: "horizontal" | "vertical") => void;
            updateGridSizes: (value: GridSizes) => void;
            updateScreenForceFullDisplay: (value: boolean) => void;
            updateMainGridStream: (value: CustomMediaComponent[]) => void;
            updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
            updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
            updateVideoInputs: (value: MediaDeviceInfo[]) => void;
            updateAudioInputs: (value: MediaDeviceInfo[]) => void;
            updateMeetingProgressTime: (value: string) => void;
            updateMeetingElapsedTime: (value: number) => void;
            updateRef_participants: (value: Participant[]) => void;
            updateMessages: (value: Message[]) => void;
            updateStartDirectMessage: (value: boolean) => void;
            updateDirectMessageDetails: (value: Participant | null) => void;
            updateShowMessagesBadge: (value: boolean) => void;
            updateAudioSetting: (value: string) => void;
            updateVideoSetting: (value: string) => void;
            updateScreenshareSetting: (value: string) => void;
            updateChatSetting: (value: string) => void;
            updateAutoWave: (value: boolean) => void;
            updateForceFullDisplay: (value: boolean) => void;
            updatePrevForceFullDisplay: (value: boolean) => void;
            updatePrevMeetingDisplayType: (value: string) => void;
            updateWaitingRoomFilter: (value: string) => void;
            updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
            updateWaitingRoomCounter: (value: number) => void;
            updateRequestFilter: (value: string) => void;
            updateRequestList: (value: Request[]) => void;
            updateRequestCounter: (value: number) => void;
            updateTotalReqWait: (value: number) => void;
            updateIsMenuModalVisible: (value: boolean) => void;
            updateIsRecordingModalVisible: (value: boolean) => void;
            updateIsSettingsModalVisible: (value: boolean) => void;
            updateIsRequestsModalVisible: (value: boolean) => void;
            updateIsWaitingModalVisible: (value: boolean) => void;
            updateIsCoHostModalVisible: (value: boolean) => void;
            updateIsMediaSettingsModalVisible: (value: boolean) => void;
            updateIsDisplaySettingsModalVisible: (value: boolean) => void;
            updateIsParticipantsModalVisible: (value: boolean) => void;
            updateIsMessagesModalVisible: (value: boolean) => void;
            updateIsConfirmExitModalVisible: (value: boolean) => void;
            updateIsConfirmHereModalVisible: (value: boolean) => void;
            updateIsLoadingModalVisible: (value: boolean) => void;
            updateRecordingMediaOptions: (value: string) => void;
            updateRecordingAudioOptions: (value: string) => void;
            updateRecordingVideoOptions: (value: string) => void;
            updateRecordingVideoType: (value: string) => void;
            updateRecordingVideoOptimized: (value: boolean) => void;
            updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
            updateRecordingAddHLS: (value: boolean) => void;
            updateRecordingAddText: (value: boolean) => void;
            updateRecordingCustomText: (value: string) => void;
            updateRecordingCustomTextPosition: (value: string) => void;
            updateRecordingCustomTextColor: (value: string) => void;
            updateRecordingNameTags: (value: boolean) => void;
            updateRecordingBackgroundColor: (value: string) => void;
            updateRecordingNameTagsColor: (value: string) => void;
            updateRecordingOrientationVideo: (value: string) => void;
            updateClearedToResume: (value: boolean) => void;
            updateClearedToRecord: (value: boolean) => void;
            updateRecordState: (value: string) => void;
            updateShowRecordButtons: (value: boolean) => void;
            updateRecordingProgressTime: (value: string) => void;
            updateAudioSwitching: (value: boolean) => void;
            updateVideoSwitching: (value: boolean) => void;
            updateVideoAlreadyOn: (value: boolean) => void;
            updateAudioAlreadyOn: (value: boolean) => void;
            updateComponentSizes: (sizes: ComponentSizes) => void;
            updateHasCameraPermission: (value: boolean) => void;
            updateHasAudioPermission: (value: boolean) => void;
            updateTransportCreated: (value: boolean) => void;
            updateTransportCreatedVideo: (value: boolean) => void;
            updateTransportCreatedAudio: (value: boolean) => void;
            updateTransportCreatedScreen: (value: boolean) => void;
            updateProducerTransport: (value: Transport | null) => void;
            updateVideoProducer: (value: Producer | null) => void;
            updateParams: (value: ProducerOptions) => void;
            updateVideoParams: (value: ProducerOptions) => void;
            updateAudioParams: (value: ProducerOptions) => void;
            updateAudioProducer: (value: Producer | null) => void;
            updateConsumerTransports: (value: TransportType[]) => void;
            updateConsumingTransports: (value: string[]) => void;
            updatePolls: (value: Poll[]) => void;
            updatePoll: (value: Poll | null) => void;
            updateIsPollModalVisible: (value: boolean) => void;
            updateCustomImage: (value: string) => void;
            updateSelectedImage: (value: string) => void;
            updateSegmentVideo: (value: MediaStream | null) => void;
            updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
            updatePauseSegmentation: (value: boolean) => void;
            updateProcessedStream: (value: MediaStream | null) => void;
            updateKeepBackground: (value: boolean) => void;
            updateBackgroundHasChanged: (value: boolean) => void;
            updateVirtualStream: (value: MediaStream | null) => void;
            updateMainCanvas: (value: HTMLCanvasElement | null) => void;
            updatePrevKeepBackground: (value: boolean) => void;
            updateAppliedBackground: (value: boolean) => void;
            updateIsBackgroundModalVisible: (value: boolean) => void;
            updateAutoClickBackground: (value: boolean) => void;
            updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
            updateCurrentRoomIndex: (value: number) => void;
            updateCanStartBreakout: (value: boolean) => void;
            updateBreakOutRoomStarted: (value: boolean) => void;
            updateBreakOutRoomEnded: (value: boolean) => void;
            updateHostNewRoom: (value: number) => void;
            updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
            updateMainRoomsLength: (value: number) => void;
            updateMemberRoom: (value: number) => void;
            updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
            updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
            updateCurrentWhiteboardIndex: (value: number) => void;
            updateCanStartWhiteboard: (value: boolean) => void;
            updateWhiteboardStarted: (value: boolean) => void;
            updateWhiteboardEnded: (value: boolean) => void;
            updateWhiteboardLimit: (value: number) => void;
            updateIsWhiteboardModalVisible: (value: boolean) => void;
            updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
            updateShapes: (value: Shape[]) => void;
            updateUseImageBackground: (value: boolean) => void;
            updateRedoStack: (value: Shape[]) => void;
            updateUndoStack: (value: string[]) => void;
            updateCanvasStream: (value: MediaStream | null) => void;
            updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
            updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
            updateProcessedScreenStream: (value: MediaStream | null) => void;
            updateAnnotateScreenStream: (value: boolean) => void;
            updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
            updateIsScreenboardModalVisible: (value: boolean) => void;
            checkOrientation: () => "portrait" | "landscape";
            updateDevice: (value: Device | null) => void;
            updateSocket: (value: Socket) => void;
            updateValidated: (value: boolean) => void;
            showAlert: ({ message, type, duration, }: {
                message: string;
                type: "success" | "danger";
                duration?: number;
            }) => void;
            getUpdatedAllParams: any;
        };
    };
    updateButtonState(buttonType: string, value: boolean): void;
    PrejoinPageComponent: any;
    updatePrejoinPageComponent: () => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    updateMainVideoSize: () => Promise<void>;
    connectAndAddSocketMethods(): Promise<void>;
    handleValidated(): Promise<void>;
    handleResize(): Promise<void>;
    disconnectAllSockets(consume_sockets: ConsumeSocket[]): Promise<void>;
    closeAndReset(): Promise<void>;
    computeDimensionsMethod: ({ containerWidthFraction, containerHeightFraction, mainSize, doStack, defaultFraction, }: {
        containerWidthFraction?: number;
        containerHeightFraction?: number;
        mainSize: number;
        doStack?: boolean;
        defaultFraction: number;
    }) => ComponentSizes;
    calculateDimensions({ parentWidth, parentHeight, isWideScreen, mainSize, doStack, }: {
        parentWidth: number;
        parentHeight: number;
        isWideScreen: boolean;
        mainSize: number;
        doStack: boolean;
    }): ComponentSizes;
    handleOrientationChange(): void;
    setupResizeListener(): void;
    orientation: string;
    joinRoom(data: {
        socket: Socket;
        roomName: string;
        islevel: string;
        member: string;
        sec: string;
        apiUserName: string;
    }): Promise<ResponseJoinRoom | null>;
    join_Room({ socket, roomName, islevel, member, sec, apiUserName, }: {
        socket: Socket;
        roomName: string;
        islevel: string;
        member: string;
        sec: string;
        apiUserName: string;
    }): Promise<void>;
    onParticipantsFilterChange: (value: string) => void;
    updateStatesToInitialValues: () => Promise<void>;
    faRecordVinyl: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faPlayCircle: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faPauseCircle: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faStopCircle: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faDotCircle: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faCog: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faUsers: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faClock: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faUserPlus: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faTools: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faDesktop: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faPoll: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faUserFriends: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faChalkboardTeacher: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faMicrophone: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faMicrophoneSlash: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faVideo: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faVideoSlash: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faSync: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faPhone: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faShareAlt: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faBars: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faComments: import("@fortawesome/fontawesome-common-types").IconDefinition;
    faChartBar: import("@fortawesome/fontawesome-common-types").IconDefinition;
    onCloseMenuModal: () => void;
    onEventSettingsClose: () => void;
    onCoHostClose: () => void;
    onMediaSettingsClose: () => void;
    onDisplaySettingsClose: () => void;
    onPollClose: () => void;
    onBreakoutRoomsClose: () => void;
    onConfigureWhiteboardClose: () => void;
    onMessagesClose: () => void;
    onRecordingClose: () => void;
    onParticipantsClose: () => void;
    onBackgroundClose: () => void;
    onConfirmExitClose: () => void;
    onConfirmHereClose: () => void;
    onScreenboardClose: () => void;
    onShareEventClose: () => void;
    onAlertHide: () => void;
    ScreenboardWidget: {
        component: typeof Screenboard;
        inputs: {
            customWidth: number;
            customHeight: number;
            parameters: {
                updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
                mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
                dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
                stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
                checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
                startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
                requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
                reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
                prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
                    component: any;
                    inputs: any;
                }[] | void>;
                getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
                rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
                trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
                consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
                connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
                connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
                connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
                connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
                processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
                resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
                readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
                checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
                getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
                calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
                addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
                onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
                sleep: typeof sleep;
                changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
                compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
                compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
                createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
                resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
                receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
                disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
                disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
                disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
                getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
                signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
                connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
                reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
                updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
                closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
                autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
                switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
                switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
                    videoPreference: string;
                    checkoff: boolean;
                    parameters: any;
                }) => Promise<void>;
                switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
                getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
                formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
                connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
                createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
                handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
                handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
                handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
                captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
                resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
                processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
                checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
                streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
                streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
                streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
                streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
                clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
                clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
                clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
                switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
                requestPermissionCamera: () => Promise<string>;
                requestPermissionAudio: () => Promise<string>;
                localUIMode: boolean;
                roomName: string;
                member: string;
                adminPasscode: string;
                youAreCoHost: boolean;
                youAreHost: boolean;
                islevel: string;
                confirmedToRecord: boolean;
                meetingDisplayType: string;
                meetingVideoOptimized: boolean;
                eventType: EventType;
                participants: Participant[];
                filteredParticipants: Participant[];
                participantsCounter: number;
                participantsFilter: string;
                consume_sockets: ConsumeSocket[];
                rtpCapabilities: RtpCapabilities | null;
                roomRecvIPs: string[];
                meetingRoomParams: MeetingRoomParams | null;
                itemPageLimit: number;
                audioOnlyRoom: boolean;
                addForBasic: boolean;
                screenPageLimit: number;
                shareScreenStarted: boolean;
                shared: boolean;
                targetOrientation: string;
                targetResolution: string;
                targetResolutionHost: string;
                vidCons: VidCons;
                frameRate: number;
                hParams: HParamsType;
                vParams: VParamsType;
                screenParams: ScreenParamsType;
                aParams: AParamsType;
                recordingAudioPausesLimit: number;
                recordingAudioPausesCount: number;
                recordingAudioSupport: boolean;
                recordingAudioPeopleLimit: number;
                recordingAudioParticipantsTimeLimit: number;
                recordingVideoPausesCount: number;
                recordingVideoPausesLimit: number;
                recordingVideoSupport: boolean;
                recordingVideoPeopleLimit: number;
                recordingVideoParticipantsTimeLimit: number;
                recordingAllParticipantsSupport: boolean;
                recordingVideoParticipantsSupport: boolean;
                recordingAllParticipantsFullRoomSupport: boolean;
                recordingVideoParticipantsFullRoomSupport: boolean;
                recordingPreferredOrientation: string;
                recordingSupportForOtherOrientation: boolean;
                recordingMultiFormatsSupport: boolean;
                userRecordingParams: UserRecordingParams;
                canRecord: boolean;
                startReport: boolean;
                endReport: boolean;
                recordStartTime: number;
                recordElapsedTime: number;
                isTimerRunning: boolean;
                canPauseResume: boolean;
                recordChangeSeconds: number;
                pauseLimit: number;
                pauseRecordCount: number;
                canLaunchRecord: boolean;
                stopLaunchRecord: boolean;
                participantsAll: Participant[];
                firstAll: boolean;
                updateMainWindow: boolean;
                first_round: boolean;
                landScaped: boolean;
                lock_screen: boolean;
                screenId: string;
                allVideoStreams: (Stream | Participant)[];
                newLimitedStreams: (Stream | Participant)[];
                newLimitedStreamsIDs: string[];
                activeSounds: string[];
                screenShareIDStream: string;
                screenShareNameStream: string;
                adminIDStream: string;
                adminNameStream: string;
                youYouStream: (Stream | Participant)[];
                youYouStreamIDs: string[];
                localStream: MediaStream | null;
                recordStarted: boolean;
                recordResumed: boolean;
                recordPaused: boolean;
                recordStopped: boolean;
                adminRestrictSetting: boolean;
                videoRequestState: string | null;
                videoRequestTime: number;
                videoAction: boolean;
                localStreamVideo: MediaStream | null;
                userDefaultVideoInputDevice: string;
                currentFacingMode: string;
                prevFacingMode: string;
                defVideoID: string;
                allowed: boolean;
                dispActiveNames: string[];
                p_dispActiveNames: string[];
                activeNames: string[];
                prevActiveNames: string[];
                p_activeNames: string[];
                membersReceived: boolean;
                deferScreenReceived: boolean;
                hostFirstSwitch: boolean;
                micAction: boolean;
                screenAction: boolean;
                chatAction: boolean;
                audioRequestState: string | null;
                screenRequestState: string | null;
                chatRequestState: string | null;
                audioRequestTime: number;
                screenRequestTime: number;
                chatRequestTime: number;
                updateRequestIntervalSeconds: number;
                oldSoundIds: string[];
                hostLabel: string;
                mainScreenFilled: boolean;
                localStreamScreen: MediaStream | null;
                screenAlreadyOn: boolean;
                chatAlreadyOn: boolean;
                redirectURL: string;
                oldAllStreams: (Stream | Participant)[];
                adminVidID: string;
                streamNames: Stream[];
                non_alVideoStreams: Participant[];
                sortAudioLoudness: boolean;
                audioDecibels: AudioDecibels[];
                mixed_alVideoStreams: (Stream | Participant)[];
                non_alVideoStreams_muted: Participant[];
                paginatedStreams: (Stream | Participant)[][];
                localStreamAudio: MediaStream | null;
                defAudioID: string;
                userDefaultAudioInputDevice: string;
                userDefaultAudioOutputDevice: string;
                prevAudioInputDevice: string;
                prevVideoInputDevice: string;
                audioPaused: boolean;
                mainScreenPerson: string;
                adminOnMainScreen: boolean;
                screenStates: ScreenState[];
                prevScreenStates: ScreenState[];
                updateDateState: number | null;
                lastUpdate: number | null;
                nForReadjustRecord: number;
                fixedPageLimit: number;
                removeAltGrid: boolean;
                nForReadjust: number;
                lastReorderTime: number;
                reorderInterval: number;
                fastReorderInterval: number;
                audStreamNames: Stream[];
                currentUserPage: number;
                mainHeightWidth: number;
                prevMainHeightWidth: number;
                prevDoPaginate: boolean;
                doPaginate: boolean;
                shareEnded: boolean;
                lStreams: (Stream | Participant)[];
                chatRefStreams: (Stream | Participant)[];
                controlHeight: number;
                isWideScreen: boolean;
                isMediumScreen: boolean;
                isSmallScreen: boolean;
                addGrid: boolean;
                addAltGrid: boolean;
                gridRows: number;
                gridCols: number;
                altGridRows: number;
                altGridCols: number;
                numberPages: number;
                currentStreams: (Stream | Participant)[];
                showMiniView: boolean;
                nStream: MediaStream | null;
                defer_receive: boolean;
                allAudioStreams: (Stream | Participant)[];
                screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                remoteScreenStream: Stream[];
                gotAllVids: boolean;
                paginationHeightWidth: number;
                paginationDirection: "horizontal" | "vertical";
                gridSizes: GridSizes;
                screenForceFullDisplay: boolean;
                mainGridStream: CustomMediaComponent[];
                otherGridStreams: CustomMediaComponent[][];
                audioOnlyStreams: CustomMediaComponent[];
                videoInputs: MediaDeviceInfo[];
                audioInputs: MediaDeviceInfo[];
                meetingProgressTime: string;
                meetingElapsedTime: number;
                ref_participants: Participant[];
                messages: Message[];
                startDirectMessage: boolean;
                directMessageDetails: Participant | null;
                coHost: string;
                coHostResponsibility: CoHostResponsibility[];
                audioSetting: string;
                videoSetting: string;
                screenshareSetting: string;
                chatSetting: string;
                autoWave: boolean;
                forceFullDisplay: boolean;
                prevForceFullDisplay: boolean;
                prevMeetingDisplayType: string;
                waitingRoomFilter: string;
                waitingRoomList: WaitingRoomParticipant[];
                waitingRoomCounter: number;
                filteredWaitingRoomList: WaitingRoomParticipant[];
                requestFilter: string;
                requestList: Request[];
                requestCounter: number;
                filteredRequestList: Request[];
                totalReqWait: number;
                alertVisible: boolean;
                alertMessage: string;
                alertType: "success" | "danger";
                alertDuration: number;
                progressTimerVisible: boolean;
                progressTimerValue: number;
                isMenuModalVisible: boolean;
                isRecordingModalVisible: boolean;
                isSettingsModalVisible: boolean;
                isRequestsModalVisible: boolean;
                isWaitingModalVisible: boolean;
                isCoHostModalVisible: boolean;
                isMediaSettingsModalVisible: boolean;
                isDisplaySettingsModalVisible: boolean;
                isParticipantsModalVisible: boolean;
                isMessagesModalVisible: boolean;
                isConfirmExitModalVisible: boolean;
                isConfirmHereModalVisible: boolean;
                isLoadingModalVisible: boolean;
                recordingMediaOptions: string;
                recordingAudioOptions: string;
                recordingVideoOptions: string;
                recordingVideoType: string;
                recordingVideoOptimized: boolean;
                recordingDisplayType: "video" | "media" | "all";
                recordingAddHLS: boolean;
                recordingAddText: boolean;
                recordingCustomText: string;
                recordingCustomTextPosition: string;
                recordingCustomTextColor: string;
                recordingNameTags: boolean;
                recordingBackgroundColor: string;
                recordingNameTagsColor: string;
                recordingOrientationVideo: string;
                clearedToResume: boolean;
                clearedToRecord: boolean;
                recordState: string;
                showRecordButtons: boolean;
                recordingProgressTime: string;
                audioSwitching: boolean;
                videoSwitching: boolean;
                videoAlreadyOn: boolean;
                audioAlreadyOn: boolean;
                componentSizes: ComponentSizes;
                hasCameraPermission: boolean;
                hasAudioPermission: boolean;
                transportCreated: boolean;
                transportCreatedVideo: boolean;
                transportCreatedAudio: boolean;
                transportCreatedScreen: boolean;
                producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
                videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                params: ProducerOptions;
                videoParams: ProducerOptions;
                audioParams: ProducerOptions;
                audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                consumerTransports: TransportType[];
                consumingTransports: string[];
                polls: Poll[];
                poll: Poll | null;
                isPollModalVisible: boolean;
                customImage: string;
                selectedImage: string;
                segmentVideo: MediaStream | null;
                selfieSegmentation: SelfieSegmentation | null;
                pauseSegmentation: boolean;
                processedStream: MediaStream | null;
                keepBackground: boolean;
                backgroundHasChanged: boolean;
                virtualStream: MediaStream | null;
                mainCanvas: HTMLCanvasElement | null;
                prevKeepBackground: boolean;
                appliedBackground: boolean;
                isBackgroundModalVisible: boolean;
                autoClickBackground: boolean;
                breakoutRooms: BreakoutParticipant[][];
                currentRoomIndex: number;
                canStartBreakout: boolean;
                breakOutRoomStarted: boolean;
                breakOutRoomEnded: boolean;
                hostNewRoom: number;
                limitedBreakRoom: BreakoutParticipant[];
                mainRoomsLength: number;
                memberRoom: number;
                isBreakoutRoomsModalVisible: boolean;
                whiteboardUsers: WhiteboardUser[];
                currentWhiteboardIndex: number;
                canStartWhiteboard: boolean;
                whiteboardStarted: boolean;
                whiteboardEnded: boolean;
                whiteboardLimit: number;
                isWhiteboardModalVisible: boolean;
                isConfigureWhiteboardModalVisible: boolean;
                shapes: Shape[];
                useImageBackground: boolean;
                redoStack: Shape[];
                undoStack: string[];
                canvasStream: MediaStream | null;
                canvasWhiteboard: HTMLCanvasElement | null;
                canvasScreenboard: HTMLCanvasElement | null;
                processedScreenStream: MediaStream | null;
                annotateScreenStream: boolean;
                mainScreenCanvas: HTMLCanvasElement | null;
                isScreenboardModalVisible: boolean;
                validated: boolean;
                device: Device | null;
                socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
                checkMediaPermission: boolean;
                onWeb: boolean;
                updateRoomName: (value: string) => void;
                updateMember: (value: string) => void;
                updateAdminPasscode: (value: string) => void;
                updateYouAreCoHost: (value: boolean) => void;
                updateYouAreHost: (value: boolean) => void;
                updateIslevel: (value: string) => void;
                updateCoHost: (value: string) => void;
                updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
                updateConfirmedToRecord: (value: boolean) => void;
                updateMeetingDisplayType: (value: string) => void;
                updateMeetingVideoOptimized: (value: boolean) => void;
                updateEventType: (value: EventType) => void;
                updateParticipants: (value: Participant[]) => void;
                updateParticipantsCounter: (value: number) => void;
                updateParticipantsFilter: (value: string) => void;
                updateConsume_sockets: (value: ConsumeSocket[]) => void;
                updateRtpCapabilities: (value: RtpCapabilities | null) => void;
                updateRoomRecvIPs: (value: string[]) => void;
                updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
                updateItemPageLimit: (value: number) => void;
                updateAudioOnlyRoom: (value: boolean) => void;
                updateAddForBasic: (value: boolean) => void;
                updateScreenPageLimit: (value: number) => void;
                updateShareScreenStarted: (value: boolean) => void;
                updateShared: (value: boolean) => void;
                updateTargetOrientation: (value: string) => void;
                updateTargetResolution: (value: string) => void;
                updateTargetResolutionHost: (value: string) => void;
                updateVidCons: (value: VidCons) => void;
                updateFrameRate: (value: number) => void;
                updateHParams: (value: HParamsType) => void;
                updateVParams: (value: VParamsType) => void;
                updateScreenParams: (value: ScreenParamsType) => void;
                updateAParams: (value: AParamsType) => void;
                updateRecordingAudioPausesLimit: (value: number) => void;
                updateRecordingAudioPausesCount: (value: number) => void;
                updateRecordingAudioSupport: (value: boolean) => void;
                updateRecordingAudioPeopleLimit: (value: number) => void;
                updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
                updateRecordingVideoPausesCount: (value: number) => void;
                updateRecordingVideoPausesLimit: (value: number) => void;
                updateRecordingVideoSupport: (value: boolean) => void;
                updateRecordingVideoPeopleLimit: (value: number) => void;
                updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
                updateRecordingAllParticipantsSupport: (value: boolean) => void;
                updateRecordingVideoParticipantsSupport: (value: boolean) => void;
                updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
                updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
                updateRecordingPreferredOrientation: (value: string) => void;
                updateRecordingSupportForOtherOrientation: (value: boolean) => void;
                updateRecordingMultiFormatsSupport: (value: boolean) => void;
                updateUserRecordingParams: (value: UserRecordingParams) => void;
                updateCanRecord: (value: boolean) => void;
                updateStartReport: (value: boolean) => void;
                updateEndReport: (value: boolean) => void;
                updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
                updateRecordStartTime: (value: number) => void;
                updateRecordElapsedTime: (value: number) => void;
                updateIsTimerRunning: (value: boolean) => void;
                updateCanPauseResume: (value: boolean) => void;
                updateRecordChangeSeconds: (value: number) => void;
                updatePauseLimit: (value: number) => void;
                updatePauseRecordCount: (value: number) => void;
                updateCanLaunchRecord: (value: boolean) => void;
                updateStopLaunchRecord: (value: boolean) => void;
                updateParticipantsAll: (value: Participant[]) => void;
                updateFirstAll: (value: boolean) => void;
                updateUpdateMainWindow: (value: boolean) => void;
                updateFirst_round: (value: boolean) => void;
                updateLandScaped: (value: boolean) => void;
                updateLock_screen: (value: boolean) => void;
                updateScreenId: (value: string) => void;
                updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
                updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
                updateNewLimitedStreamsIDs: (value: string[]) => void;
                updateActiveSounds: (value: string[]) => void;
                updateScreenShareIDStream: (value: string) => void;
                updateScreenShareNameStream: (value: string) => void;
                updateAdminIDStream: (value: string) => void;
                updateAdminNameStream: (value: string) => void;
                updateYouYouStream: (value: (Participant | Stream)[]) => void;
                updateYouYouStreamIDs: (value: string[]) => void;
                updateLocalStream: (value: MediaStream | null) => void;
                updateRecordStarted: (value: boolean) => void;
                updateRecordResumed: (value: boolean) => void;
                updateRecordPaused: (value: boolean) => void;
                updateRecordStopped: (value: boolean) => void;
                updateAdminRestrictSetting: (value: boolean) => void;
                updateVideoRequestState: (value: string | null) => void;
                updateVideoRequestTime: (value: number) => void;
                updateVideoAction: (value: boolean) => void;
                updateLocalStreamVideo: (value: MediaStream | null) => void;
                updateUserDefaultVideoInputDevice: (value: string) => void;
                updateCurrentFacingMode: (value: string) => void;
                updatePrevFacingMode: (value: string) => void;
                updateDefVideoID: (value: string) => void;
                updateAllowed: (value: boolean) => void;
                updateDispActiveNames: (value: string[]) => void;
                updateP_dispActiveNames: (value: string[]) => void;
                updateActiveNames: (value: string[]) => void;
                updatePrevActiveNames: (value: string[]) => void;
                updateP_activeNames: (value: string[]) => void;
                updateMembersReceived: (value: boolean) => void;
                updateDeferScreenReceived: (value: boolean) => void;
                updateHostFirstSwitch: (value: boolean) => void;
                updateMicAction: (value: boolean) => void;
                updateScreenAction: (value: boolean) => void;
                updateChatAction: (value: boolean) => void;
                updateAudioRequestState: (value: string | null) => void;
                updateScreenRequestState: (value: string | null) => void;
                updateChatRequestState: (value: string | null) => void;
                updateAudioRequestTime: (value: number) => void;
                updateScreenRequestTime: (value: number) => void;
                updateChatRequestTime: (value: number) => void;
                updateOldSoundIds: (value: string[]) => void;
                updateHostLabel: (value: string) => void;
                updateMainScreenFilled: (value: boolean) => void;
                updateLocalStreamScreen: (value: MediaStream | null) => void;
                updateScreenAlreadyOn: (value: boolean) => void;
                updateChatAlreadyOn: (value: boolean) => void;
                updateRedirectURL: (value: string) => void;
                updateOldAllStreams: (value: (Participant | Stream)[]) => void;
                updateAdminVidID: (value: string) => void;
                updateStreamNames: (value: Stream[]) => void;
                updateNon_alVideoStreams: (value: Participant[]) => void;
                updateSortAudioLoudness: (value: boolean) => void;
                updateAudioDecibels: (value: AudioDecibels[]) => void;
                updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
                updateNon_alVideoStreams_muted: (value: Participant[]) => void;
                updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
                updateLocalStreamAudio: (value: MediaStream | null) => void;
                updateDefAudioID: (value: string) => void;
                updateUserDefaultAudioInputDevice: (value: string) => void;
                updateUserDefaultAudioOutputDevice: (value: string) => void;
                updatePrevAudioInputDevice: (value: string) => void;
                updatePrevVideoInputDevice: (value: string) => void;
                updateAudioPaused: (value: boolean) => void;
                updateMainScreenPerson: (value: string) => void;
                updateAdminOnMainScreen: (value: boolean) => void;
                updateScreenStates: (value: ScreenState[]) => void;
                updatePrevScreenStates: (value: ScreenState[]) => void;
                updateUpdateDateState: (value: number | null) => void;
                updateLastUpdate: (value: number | null) => void;
                updateNForReadjustRecord: (value: number) => void;
                updateFixedPageLimit: (value: number) => void;
                updateRemoveAltGrid: (value: boolean) => void;
                updateNForReadjust: (value: number) => void;
                updateLastReorderTime: (value: number) => void;
                updateAudStreamNames: (value: Stream[]) => void;
                updateCurrentUserPage: (value: number) => void;
                updateMainHeightWidth: (value: number) => void;
                updatePrevMainHeightWidth: (value: number) => void;
                updatePrevDoPaginate: (value: boolean) => void;
                updateDoPaginate: (value: boolean) => void;
                updateShareEnded: (value: boolean) => void;
                updateLStreams: (value: (Participant | Stream)[]) => void;
                updateChatRefStreams: (value: (Participant | Stream)[]) => void;
                updateControlHeight: (value: number) => void;
                updateIsWideScreen: (value: boolean) => void;
                updateIsMediumScreen: (value: boolean) => void;
                updateIsSmallScreen: (value: boolean) => void;
                updateAddGrid: (value: boolean) => void;
                updateAddAltGrid: (value: boolean) => void;
                updateGridRows: (value: number) => void;
                updateGridCols: (value: number) => void;
                updateAltGridRows: (value: number) => void;
                updateAltGridCols: (value: number) => void;
                updateNumberPages: (value: number) => void;
                updateCurrentStreams: (value: (Participant | Stream)[]) => void;
                updateShowMiniView: (value: boolean) => void;
                updateNStream: (value: MediaStream | null) => void;
                updateDefer_receive: (value: boolean) => void;
                updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
                updateRemoteScreenStream: (value: Stream[]) => void;
                updateScreenProducer: (value: Producer | null) => void;
                updateGotAllVids: (value: boolean) => void;
                updatePaginationHeightWidth: (value: number) => void;
                updatePaginationDirection: (value: "horizontal" | "vertical") => void;
                updateGridSizes: (value: GridSizes) => void;
                updateScreenForceFullDisplay: (value: boolean) => void;
                updateMainGridStream: (value: CustomMediaComponent[]) => void;
                updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
                updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
                updateVideoInputs: (value: MediaDeviceInfo[]) => void;
                updateAudioInputs: (value: MediaDeviceInfo[]) => void;
                updateMeetingProgressTime: (value: string) => void;
                updateMeetingElapsedTime: (value: number) => void;
                updateRef_participants: (value: Participant[]) => void;
                updateMessages: (value: Message[]) => void;
                updateStartDirectMessage: (value: boolean) => void;
                updateDirectMessageDetails: (value: Participant | null) => void;
                updateShowMessagesBadge: (value: boolean) => void;
                updateAudioSetting: (value: string) => void;
                updateVideoSetting: (value: string) => void;
                updateScreenshareSetting: (value: string) => void;
                updateChatSetting: (value: string) => void;
                updateAutoWave: (value: boolean) => void;
                updateForceFullDisplay: (value: boolean) => void;
                updatePrevForceFullDisplay: (value: boolean) => void;
                updatePrevMeetingDisplayType: (value: string) => void;
                updateWaitingRoomFilter: (value: string) => void;
                updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
                updateWaitingRoomCounter: (value: number) => void;
                updateRequestFilter: (value: string) => void;
                updateRequestList: (value: Request[]) => void;
                updateRequestCounter: (value: number) => void;
                updateTotalReqWait: (value: number) => void;
                updateIsMenuModalVisible: (value: boolean) => void;
                updateIsRecordingModalVisible: (value: boolean) => void;
                updateIsSettingsModalVisible: (value: boolean) => void;
                updateIsRequestsModalVisible: (value: boolean) => void;
                updateIsWaitingModalVisible: (value: boolean) => void;
                updateIsCoHostModalVisible: (value: boolean) => void;
                updateIsMediaSettingsModalVisible: (value: boolean) => void;
                updateIsDisplaySettingsModalVisible: (value: boolean) => void;
                updateIsParticipantsModalVisible: (value: boolean) => void;
                updateIsMessagesModalVisible: (value: boolean) => void;
                updateIsConfirmExitModalVisible: (value: boolean) => void;
                updateIsConfirmHereModalVisible: (value: boolean) => void;
                updateIsLoadingModalVisible: (value: boolean) => void;
                updateRecordingMediaOptions: (value: string) => void;
                updateRecordingAudioOptions: (value: string) => void;
                updateRecordingVideoOptions: (value: string) => void;
                updateRecordingVideoType: (value: string) => void;
                updateRecordingVideoOptimized: (value: boolean) => void;
                updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
                updateRecordingAddHLS: (value: boolean) => void;
                updateRecordingAddText: (value: boolean) => void;
                updateRecordingCustomText: (value: string) => void;
                updateRecordingCustomTextPosition: (value: string) => void;
                updateRecordingCustomTextColor: (value: string) => void;
                updateRecordingNameTags: (value: boolean) => void;
                updateRecordingBackgroundColor: (value: string) => void;
                updateRecordingNameTagsColor: (value: string) => void;
                updateRecordingOrientationVideo: (value: string) => void;
                updateClearedToResume: (value: boolean) => void;
                updateClearedToRecord: (value: boolean) => void;
                updateRecordState: (value: string) => void;
                updateShowRecordButtons: (value: boolean) => void;
                updateRecordingProgressTime: (value: string) => void;
                updateAudioSwitching: (value: boolean) => void;
                updateVideoSwitching: (value: boolean) => void;
                updateVideoAlreadyOn: (value: boolean) => void;
                updateAudioAlreadyOn: (value: boolean) => void;
                updateComponentSizes: (sizes: ComponentSizes) => void;
                updateHasCameraPermission: (value: boolean) => void;
                updateHasAudioPermission: (value: boolean) => void;
                updateTransportCreated: (value: boolean) => void;
                updateTransportCreatedVideo: (value: boolean) => void;
                updateTransportCreatedAudio: (value: boolean) => void;
                updateTransportCreatedScreen: (value: boolean) => void;
                updateProducerTransport: (value: Transport | null) => void;
                updateVideoProducer: (value: Producer | null) => void;
                updateParams: (value: ProducerOptions) => void;
                updateVideoParams: (value: ProducerOptions) => void;
                updateAudioParams: (value: ProducerOptions) => void;
                updateAudioProducer: (value: Producer | null) => void;
                updateConsumerTransports: (value: TransportType[]) => void;
                updateConsumingTransports: (value: string[]) => void;
                updatePolls: (value: Poll[]) => void;
                updatePoll: (value: Poll | null) => void;
                updateIsPollModalVisible: (value: boolean) => void;
                updateCustomImage: (value: string) => void;
                updateSelectedImage: (value: string) => void;
                updateSegmentVideo: (value: MediaStream | null) => void;
                updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
                updatePauseSegmentation: (value: boolean) => void;
                updateProcessedStream: (value: MediaStream | null) => void;
                updateKeepBackground: (value: boolean) => void;
                updateBackgroundHasChanged: (value: boolean) => void;
                updateVirtualStream: (value: MediaStream | null) => void;
                updateMainCanvas: (value: HTMLCanvasElement | null) => void;
                updatePrevKeepBackground: (value: boolean) => void;
                updateAppliedBackground: (value: boolean) => void;
                updateIsBackgroundModalVisible: (value: boolean) => void;
                updateAutoClickBackground: (value: boolean) => void;
                updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
                updateCurrentRoomIndex: (value: number) => void;
                updateCanStartBreakout: (value: boolean) => void;
                updateBreakOutRoomStarted: (value: boolean) => void;
                updateBreakOutRoomEnded: (value: boolean) => void;
                updateHostNewRoom: (value: number) => void;
                updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
                updateMainRoomsLength: (value: number) => void;
                updateMemberRoom: (value: number) => void;
                updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
                updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
                updateCurrentWhiteboardIndex: (value: number) => void;
                updateCanStartWhiteboard: (value: boolean) => void;
                updateWhiteboardStarted: (value: boolean) => void;
                updateWhiteboardEnded: (value: boolean) => void;
                updateWhiteboardLimit: (value: number) => void;
                updateIsWhiteboardModalVisible: (value: boolean) => void;
                updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
                updateShapes: (value: Shape[]) => void;
                updateUseImageBackground: (value: boolean) => void;
                updateRedoStack: (value: Shape[]) => void;
                updateUndoStack: (value: string[]) => void;
                updateCanvasStream: (value: MediaStream | null) => void;
                updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
                updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
                updateProcessedScreenStream: (value: MediaStream | null) => void;
                updateAnnotateScreenStream: (value: boolean) => void;
                updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
                updateIsScreenboardModalVisible: (value: boolean) => void;
                checkOrientation: () => "portrait" | "landscape";
                updateDevice: (value: Device | null) => void;
                updateSocket: (value: Socket) => void;
                updateValidated: (value: boolean) => void;
                showAlert: ({ message, type, duration, }: {
                    message: string;
                    type: "success" | "danger";
                    duration?: number;
                }) => void;
                getUpdatedAllParams: () => {
                    updateMiniCardsGrid: ({ rows, cols, defal, actualRows, parameters, }: import("../../consumers/update-mini-cards-grid.service").UpdateMiniCardsGridOptions) => Promise<void>;
                    mixStreams: ({ alVideoStreams, non_alVideoStreams, ref_participants, }: import("../../consumers/mix-streams.service").MixStreamsOptions) => Promise<(Stream | Participant)[]>;
                    dispStreams: ({ lStreams, ind, auto, ChatSkip, forChatID, parameters, breakRoom, inBreakRoom, }: import("../../consumers/disp-streams.service").DispStreamsOptions) => Promise<void>;
                    stopShareScreen: ({ parameters }: import("../../consumers/stop-share-screen.service").StopShareScreenOptions) => Promise<void>;
                    checkScreenShare: ({ parameters }: import("../../consumers/check-screen-share.service").CheckScreenShareOptions) => Promise<void>;
                    startShareScreen: ({ parameters }: import("../../consumers/start-share-screen.service").StartShareScreenOptions) => Promise<void>;
                    requestScreenShare: ({ parameters }: import("../../consumers/request-screen-share.service").RequestScreenShareOptions) => Promise<void>;
                    reorderStreams: ({ add, screenChanged, parameters, }: import("../../consumers/reorder-streams.service").ReorderStreamsOptions) => Promise<void>;
                    prepopulateUserMedia: ({ name, parameters, }: import("../../consumers/prepopulate-user-media.service").PrepopulateUserMediaOptions) => Promise<{
                        component: any;
                        inputs: any;
                    }[] | void>;
                    getVideos: ({ participants, allVideoStreams, oldAllStreams, adminVidID, updateAllVideoStreams, updateOldAllStreams, }: import("../../consumers/get-videos.service").GetVideosOptions) => Promise<void>;
                    rePort: ({ restart, parameters }: import("../../consumers/re-port.service").RePortOptions) => Promise<void>;
                    trigger: ({ ref_ActiveNames, parameters }: import("../../consumers/trigger.service").TriggerOptions) => Promise<void>;
                    consumerResume: ({ track, remoteProducerId, params, parameters, nsock, }: import("../../consumers/consumer-resume.service").ConsumerResumeOptions) => Promise<void>;
                    connectSendTransport: ({ option, parameters }: import("../../consumers/connect-send-transport.service").ConnectSendTransportOptions) => Promise<void>;
                    connectSendTransportAudio: ({ audioParams, parameters, }: import("../../consumers/connect-send-transport-audio.service").ConnectSendTransportAudioOptions) => Promise<void>;
                    connectSendTransportVideo: ({ videoParams, parameters, }: import("../../consumers/connect-send-transport-video.service").ConnectSendTransportVideoOptions) => Promise<void>;
                    connectSendTransportScreen: ({ stream, parameters, }: import("../../consumers/connect-send-transport-screen.service").ConnectSendTransportScreenOptions) => Promise<void>;
                    processConsumerTransports: ({ consumerTransports, lStreams_, parameters, }: import("../../consumers/process-consumer-transports.service").ProcessConsumerTransportsOptions) => Promise<void>;
                    resumePauseStreams: ({ parameters }: import("../../consumers/resume-pause-streams.service").ResumePauseStreamsOptions) => Promise<void>;
                    readjust: ({ n, state, parameters }: import("../../consumers/readjust.service").ReadjustOptions) => Promise<void>;
                    checkGrid: ({ rows, cols, actives, }: import("../../consumers/check-grid.service").CheckGridOptions) => Promise<[boolean, number, number, number, number, number, number] | void>;
                    getEstimate: ({ n, parameters }: import("../../consumers/get-estimate.service").GetEstimateOptions) => [number, number, number];
                    calculateRowsAndColumns: ({ n }: import("../../consumers/calculate-rows-and-columns.service").CalculateRowsAndColumnsOptions) => [number, number];
                    addVideosGrid: ({ mainGridStreams, altGridStreams, numtoadd, numRows, numCols, actualRows, lastrowcols, removeAltGrid, parameters, }: import("../../consumers/add-videos-grid.service").AddVideosGridOptions) => Promise<void>;
                    onScreenChanges: ({ changed, parameters, }: import("../../consumers/on-screen-changes.service").OnScreenChangesOptions) => Promise<void>;
                    sleep: typeof sleep;
                    changeVids: ({ screenChanged, parameters }: import("../../consumers/change-vids.service").ChangeVidsOptions) => Promise<void>;
                    compareActiveNames: ({ restart, parameters, }: import("../../consumers/compare-active-names.service").CompareActiveNamesOptions) => Promise<void>;
                    compareScreenStates: ({ restart, parameters, }: import("../../consumers/compare-screen-states.service").CompareScreenStatesOptions) => Promise<void>;
                    createSendTransport: ({ option, parameters }: import("../../consumers/create-send-transport.service").CreateSendTransportOptions) => Promise<void>;
                    resumeSendTransportAudio: ({ parameters }: import("../../consumers/resume-send-transport-audio.service").ResumeSendTransportAudioOptions) => Promise<void>;
                    receiveAllPipedTransports: ({ nsock, parameters, }: import("../../consumers/receive-all-piped-transports.service").ReceiveAllPipedTransportsOptions) => Promise<void>;
                    disconnectSendTransportVideo: ({ parameters, }: import("../../consumers/disconnect-send-transport-video.service").DisconnectSendTransportVideoOptions) => Promise<void>;
                    disconnectSendTransportAudio: ({ parameters, }: import("../../consumers/disconnect-send-transport-audio.service").DisconnectSendTransportAudioOptions) => Promise<void>;
                    disconnectSendTransportScreen: ({ parameters, }: import("../../consumers/disconnect-send-transport-screen.service").DisconnectSendTransportScreenOptions) => Promise<void>;
                    getPipedProducersAlt: ({ nsock, islevel, parameters, }: import("../../consumers/get-piped-producers-alt.service").GetPipedProducersAltOptions) => Promise<void>;
                    signalNewConsumerTransport: ({ remoteProducerId, islevel, nsock, parameters, }: import("../../consumers/signal-new-consumer-transport.service").SignalNewConsumerTransportOptions) => Promise<string[] | void>;
                    connectRecvTransport: ({ consumerTransport, remoteProducerId, serverConsumerTransportId, nsock, parameters, }: import("../../consumers/connect-recv-transport.service").ConnectRecvTransportOptions) => Promise<void>;
                    reUpdateInter: ({ name, add, force, average, parameters, }: import("../../consumers/re-update-inter.service").ReUpdateInterOptions) => Promise<void>;
                    updateParticipantAudioDecibels: ({ name, averageLoudness, audioDecibels, updateAudioDecibels, }: import("../../consumers/update-participant-audio-decibels.service").UpdateParticipantAudioDecibelsOptions) => void;
                    closeAndResize: ({ producerId, kind, parameters, }: import("../../consumers/close-and-resize.service").CloseAndResizeOptions) => Promise<void>;
                    autoAdjust: ({ n, eventType, shareScreenStarted, shared, }: import("../../consumers/auto-adjust.service").AutoAdjustOptions) => Promise<number[]>;
                    switchUserVideoAlt: ({ videoPreference, checkoff, parameters, }: import("../../consumers/switch-user-video-alt.service").SwitchUserVideoAltOptions) => Promise<void>;
                    switchUserVideo: ({ videoPreference, checkoff, parameters, }: {
                        videoPreference: string;
                        checkoff: boolean;
                        parameters: any;
                    }) => Promise<void>;
                    switchUserAudio: ({ audioPreference, parameters }: import("../../consumers/switch-user-audio.service").SwitchUserAudioOptions) => Promise<void>;
                    getDomains: ({ domains, alt_domains, apiUserName, apiKey, apiToken, parameters, }: import("../../@types/types").GetDomainsOptions) => Promise<void>;
                    formatNumber: ({ number }: import("../../@types/types").FormatNumberOptions) => Promise<string | undefined>;
                    connectIps: ({ consume_sockets, remIP, apiUserName, apiKey, apiToken, newProducerMethod, closedProducerMethod, joinConsumeRoomMethod, parameters, }: import("../../consumers/connect-ips.service").ConnectIpsOptions) => Promise<any>;
                    createDeviceClient: ({ rtpCapabilities }: import("../../@types/types").CreateDeviceClientOptions) => Promise<Device | null>;
                    handleCreatePoll: ({ poll, socket, roomName, showAlert, updateIsPollModalVisible, }: import("../../@types/types").HandleCreatePollOptions) => Promise<void>;
                    handleEndPoll: ({ pollId, socket, showAlert, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleEndPollOptions) => Promise<void>;
                    handleVotePoll: ({ pollId, optionIndex, socket, showAlert, member, roomName, updateIsPollModalVisible, }: import("../../@types/types").HandleVotePollOptions) => Promise<void>;
                    captureCanvasStream: ({ parameters, start, }: import("../../@types/types").CaptureCanvasStreamOptions) => Promise<void>;
                    resumePauseAudioStreams: ({ breakRoom, inBreakRoom, parameters, }: import("../../consumers/resume-pause-audio-streams.service").ResumePauseAudioStreamsOptions) => Promise<void>;
                    processConsumerTransportsAudio: ({ consumerTransports, lStreams, parameters, }: import("../../consumers/process-consumer-transports-audio.service").ProcessConsumerTransportsAudioOptions) => Promise<void>;
                    checkPermission: ({ permissionType, audioSetting, videoSetting, screenshareSetting, chatSetting, }: import("../../consumers/check-permission.service").CheckPermissionOptions) => Promise<number>;
                    streamSuccessVideo: ({ stream, parameters }: import("../../consumers/stream-success-video.service").StreamSuccessVideoOptions) => Promise<void>;
                    streamSuccessAudio: ({ stream, parameters }: import("../../consumers/stream-success-audio.service").StreamSuccessAudioOptions) => Promise<void>;
                    streamSuccessScreen: ({ stream, parameters }: import("../../consumers/stream-success-screen.service").StreamSuccessScreenOptions) => Promise<void>;
                    streamSuccessAudioSwitch: ({ stream, parameters, }: import("../../consumers/stream-success-audio-switch.service").StreamSuccessAudioSwitchOptions) => Promise<void>;
                    clickVideo: ({ parameters }: import("../../@types/types").ClickVideoOptions) => Promise<void>;
                    clickAudio: ({ parameters }: import("../../@types/types").ClickAudioOptions) => Promise<void>;
                    clickScreenShare: ({ parameters }: import("../../@types/types").ClickScreenShareOptions) => Promise<void>;
                    switchVideoAlt: ({ parameters }: import("../../@types/types").SwitchVideoAltOptions) => Promise<void>;
                    requestPermissionCamera: () => Promise<string>;
                    requestPermissionAudio: () => Promise<string>;
                    localUIMode: boolean;
                    roomName: string;
                    member: string;
                    adminPasscode: string;
                    youAreCoHost: boolean;
                    youAreHost: boolean;
                    islevel: string;
                    confirmedToRecord: boolean;
                    meetingDisplayType: string;
                    meetingVideoOptimized: boolean;
                    eventType: EventType;
                    participants: Participant[];
                    filteredParticipants: Participant[];
                    participantsCounter: number;
                    participantsFilter: string;
                    consume_sockets: ConsumeSocket[];
                    rtpCapabilities: RtpCapabilities | null;
                    roomRecvIPs: string[];
                    meetingRoomParams: MeetingRoomParams | null;
                    itemPageLimit: number;
                    audioOnlyRoom: boolean;
                    addForBasic: boolean;
                    screenPageLimit: number;
                    shareScreenStarted: boolean;
                    shared: boolean;
                    targetOrientation: string;
                    targetResolution: string;
                    targetResolutionHost: string;
                    vidCons: VidCons;
                    frameRate: number;
                    hParams: HParamsType;
                    vParams: VParamsType;
                    screenParams: ScreenParamsType;
                    aParams: AParamsType;
                    recordingAudioPausesLimit: number;
                    recordingAudioPausesCount: number;
                    recordingAudioSupport: boolean;
                    recordingAudioPeopleLimit: number;
                    recordingAudioParticipantsTimeLimit: number;
                    recordingVideoPausesCount: number;
                    recordingVideoPausesLimit: number;
                    recordingVideoSupport: boolean;
                    recordingVideoPeopleLimit: number;
                    recordingVideoParticipantsTimeLimit: number;
                    recordingAllParticipantsSupport: boolean;
                    recordingVideoParticipantsSupport: boolean;
                    recordingAllParticipantsFullRoomSupport: boolean;
                    recordingVideoParticipantsFullRoomSupport: boolean;
                    recordingPreferredOrientation: string;
                    recordingSupportForOtherOrientation: boolean;
                    recordingMultiFormatsSupport: boolean;
                    userRecordingParams: UserRecordingParams;
                    canRecord: boolean;
                    startReport: boolean;
                    endReport: boolean;
                    recordStartTime: number;
                    recordElapsedTime: number;
                    isTimerRunning: boolean;
                    canPauseResume: boolean;
                    recordChangeSeconds: number;
                    pauseLimit: number;
                    pauseRecordCount: number;
                    canLaunchRecord: boolean;
                    stopLaunchRecord: boolean;
                    participantsAll: Participant[];
                    firstAll: boolean;
                    updateMainWindow: boolean;
                    first_round: boolean;
                    landScaped: boolean;
                    lock_screen: boolean;
                    screenId: string;
                    allVideoStreams: (Stream | Participant)[];
                    newLimitedStreams: (Stream | Participant)[];
                    newLimitedStreamsIDs: string[];
                    activeSounds: string[];
                    screenShareIDStream: string;
                    screenShareNameStream: string;
                    adminIDStream: string;
                    adminNameStream: string;
                    youYouStream: (Stream | Participant)[];
                    youYouStreamIDs: string[];
                    localStream: MediaStream | null;
                    recordStarted: boolean;
                    recordResumed: boolean;
                    recordPaused: boolean;
                    recordStopped: boolean;
                    adminRestrictSetting: boolean;
                    videoRequestState: string | null;
                    videoRequestTime: number;
                    videoAction: boolean;
                    localStreamVideo: MediaStream | null;
                    userDefaultVideoInputDevice: string;
                    currentFacingMode: string;
                    prevFacingMode: string;
                    defVideoID: string;
                    allowed: boolean;
                    dispActiveNames: string[];
                    p_dispActiveNames: string[];
                    activeNames: string[];
                    prevActiveNames: string[];
                    p_activeNames: string[];
                    membersReceived: boolean;
                    deferScreenReceived: boolean;
                    hostFirstSwitch: boolean;
                    micAction: boolean;
                    screenAction: boolean;
                    chatAction: boolean;
                    audioRequestState: string | null;
                    screenRequestState: string | null;
                    chatRequestState: string | null;
                    audioRequestTime: number;
                    screenRequestTime: number;
                    chatRequestTime: number;
                    updateRequestIntervalSeconds: number;
                    oldSoundIds: string[];
                    hostLabel: string;
                    mainScreenFilled: boolean;
                    localStreamScreen: MediaStream | null;
                    screenAlreadyOn: boolean;
                    chatAlreadyOn: boolean;
                    redirectURL: string;
                    oldAllStreams: (Stream | Participant)[];
                    adminVidID: string;
                    streamNames: Stream[];
                    non_alVideoStreams: Participant[];
                    sortAudioLoudness: boolean;
                    audioDecibels: AudioDecibels[];
                    mixed_alVideoStreams: (Stream | Participant)[];
                    non_alVideoStreams_muted: Participant[];
                    paginatedStreams: (Stream | Participant)[][];
                    localStreamAudio: MediaStream | null;
                    defAudioID: string;
                    userDefaultAudioInputDevice: string;
                    userDefaultAudioOutputDevice: string;
                    prevAudioInputDevice: string;
                    prevVideoInputDevice: string;
                    audioPaused: boolean;
                    mainScreenPerson: string;
                    adminOnMainScreen: boolean;
                    screenStates: ScreenState[];
                    prevScreenStates: ScreenState[];
                    updateDateState: number | null;
                    lastUpdate: number | null;
                    nForReadjustRecord: number;
                    fixedPageLimit: number;
                    removeAltGrid: boolean;
                    nForReadjust: number;
                    lastReorderTime: number;
                    reorderInterval: number;
                    fastReorderInterval: number;
                    audStreamNames: Stream[];
                    currentUserPage: number;
                    mainHeightWidth: number;
                    prevMainHeightWidth: number;
                    prevDoPaginate: boolean;
                    doPaginate: boolean;
                    shareEnded: boolean;
                    lStreams: (Stream | Participant)[];
                    chatRefStreams: (Stream | Participant)[];
                    controlHeight: number;
                    isWideScreen: boolean;
                    isMediumScreen: boolean;
                    isSmallScreen: boolean;
                    addGrid: boolean;
                    addAltGrid: boolean;
                    gridRows: number;
                    gridCols: number;
                    altGridRows: number;
                    altGridCols: number;
                    numberPages: number;
                    currentStreams: (Stream | Participant)[];
                    showMiniView: boolean;
                    nStream: MediaStream | null;
                    defer_receive: boolean;
                    allAudioStreams: (Stream | Participant)[];
                    screenProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                    remoteScreenStream: Stream[];
                    gotAllVids: boolean;
                    paginationHeightWidth: number;
                    paginationDirection: "horizontal" | "vertical";
                    gridSizes: GridSizes;
                    screenForceFullDisplay: boolean;
                    mainGridStream: CustomMediaComponent[];
                    otherGridStreams: CustomMediaComponent[][];
                    audioOnlyStreams: CustomMediaComponent[];
                    videoInputs: MediaDeviceInfo[];
                    audioInputs: MediaDeviceInfo[];
                    meetingProgressTime: string;
                    meetingElapsedTime: number;
                    ref_participants: Participant[];
                    messages: Message[];
                    startDirectMessage: boolean;
                    directMessageDetails: Participant | null;
                    coHost: string;
                    coHostResponsibility: CoHostResponsibility[];
                    audioSetting: string;
                    videoSetting: string;
                    screenshareSetting: string;
                    chatSetting: string;
                    autoWave: boolean;
                    forceFullDisplay: boolean;
                    prevForceFullDisplay: boolean;
                    prevMeetingDisplayType: string;
                    waitingRoomFilter: string;
                    waitingRoomList: WaitingRoomParticipant[];
                    waitingRoomCounter: number;
                    filteredWaitingRoomList: WaitingRoomParticipant[];
                    requestFilter: string;
                    requestList: Request[];
                    requestCounter: number;
                    filteredRequestList: Request[];
                    totalReqWait: number;
                    alertVisible: boolean;
                    alertMessage: string;
                    alertType: "success" | "danger";
                    alertDuration: number;
                    progressTimerVisible: boolean;
                    progressTimerValue: number;
                    isMenuModalVisible: boolean;
                    isRecordingModalVisible: boolean;
                    isSettingsModalVisible: boolean;
                    isRequestsModalVisible: boolean;
                    isWaitingModalVisible: boolean;
                    isCoHostModalVisible: boolean;
                    isMediaSettingsModalVisible: boolean;
                    isDisplaySettingsModalVisible: boolean;
                    isParticipantsModalVisible: boolean;
                    isMessagesModalVisible: boolean;
                    isConfirmExitModalVisible: boolean;
                    isConfirmHereModalVisible: boolean;
                    isLoadingModalVisible: boolean;
                    recordingMediaOptions: string;
                    recordingAudioOptions: string;
                    recordingVideoOptions: string;
                    recordingVideoType: string;
                    recordingVideoOptimized: boolean;
                    recordingDisplayType: "video" | "media" | "all";
                    recordingAddHLS: boolean;
                    recordingAddText: boolean;
                    recordingCustomText: string;
                    recordingCustomTextPosition: string;
                    recordingCustomTextColor: string;
                    recordingNameTags: boolean;
                    recordingBackgroundColor: string;
                    recordingNameTagsColor: string;
                    recordingOrientationVideo: string;
                    clearedToResume: boolean;
                    clearedToRecord: boolean;
                    recordState: string;
                    showRecordButtons: boolean;
                    recordingProgressTime: string;
                    audioSwitching: boolean;
                    videoSwitching: boolean;
                    videoAlreadyOn: boolean;
                    audioAlreadyOn: boolean;
                    componentSizes: ComponentSizes;
                    hasCameraPermission: boolean;
                    hasAudioPermission: boolean;
                    transportCreated: boolean;
                    transportCreatedVideo: boolean;
                    transportCreatedAudio: boolean;
                    transportCreatedScreen: boolean;
                    producerTransport: Transport<import("mediasoup-client/lib/types").AppData> | null;
                    videoProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                    params: ProducerOptions;
                    videoParams: ProducerOptions;
                    audioParams: ProducerOptions;
                    audioProducer: Producer<import("mediasoup-client/lib/types").AppData> | null;
                    consumerTransports: TransportType[];
                    consumingTransports: string[];
                    polls: Poll[];
                    poll: Poll | null;
                    isPollModalVisible: boolean;
                    customImage: string;
                    selectedImage: string;
                    segmentVideo: MediaStream | null;
                    selfieSegmentation: SelfieSegmentation | null;
                    pauseSegmentation: boolean;
                    processedStream: MediaStream | null;
                    keepBackground: boolean;
                    backgroundHasChanged: boolean;
                    virtualStream: MediaStream | null;
                    mainCanvas: HTMLCanvasElement | null;
                    prevKeepBackground: boolean;
                    appliedBackground: boolean;
                    isBackgroundModalVisible: boolean;
                    autoClickBackground: boolean;
                    breakoutRooms: BreakoutParticipant[][];
                    currentRoomIndex: number;
                    canStartBreakout: boolean;
                    breakOutRoomStarted: boolean;
                    breakOutRoomEnded: boolean;
                    hostNewRoom: number;
                    limitedBreakRoom: BreakoutParticipant[];
                    mainRoomsLength: number;
                    memberRoom: number;
                    isBreakoutRoomsModalVisible: boolean;
                    whiteboardUsers: WhiteboardUser[];
                    currentWhiteboardIndex: number;
                    canStartWhiteboard: boolean;
                    whiteboardStarted: boolean;
                    whiteboardEnded: boolean;
                    whiteboardLimit: number;
                    isWhiteboardModalVisible: boolean;
                    isConfigureWhiteboardModalVisible: boolean;
                    shapes: Shape[];
                    useImageBackground: boolean;
                    redoStack: Shape[];
                    undoStack: string[];
                    canvasStream: MediaStream | null;
                    canvasWhiteboard: HTMLCanvasElement | null;
                    canvasScreenboard: HTMLCanvasElement | null;
                    processedScreenStream: MediaStream | null;
                    annotateScreenStream: boolean;
                    mainScreenCanvas: HTMLCanvasElement | null;
                    isScreenboardModalVisible: boolean;
                    validated: boolean;
                    device: Device | null;
                    socket: Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>;
                    checkMediaPermission: boolean;
                    onWeb: boolean;
                    updateRoomName: (value: string) => void;
                    updateMember: (value: string) => void;
                    updateAdminPasscode: (value: string) => void;
                    updateYouAreCoHost: (value: boolean) => void;
                    updateYouAreHost: (value: boolean) => void;
                    updateIslevel: (value: string) => void;
                    updateCoHost: (value: string) => void;
                    updateCoHostResponsibility: (value: CoHostResponsibility[]) => void;
                    updateConfirmedToRecord: (value: boolean) => void;
                    updateMeetingDisplayType: (value: string) => void;
                    updateMeetingVideoOptimized: (value: boolean) => void;
                    updateEventType: (value: EventType) => void;
                    updateParticipants: (value: Participant[]) => void;
                    updateParticipantsCounter: (value: number) => void;
                    updateParticipantsFilter: (value: string) => void;
                    updateConsume_sockets: (value: ConsumeSocket[]) => void;
                    updateRtpCapabilities: (value: RtpCapabilities | null) => void;
                    updateRoomRecvIPs: (value: string[]) => void;
                    updateMeetingRoomParams: (value: MeetingRoomParams | null) => void;
                    updateItemPageLimit: (value: number) => void;
                    updateAudioOnlyRoom: (value: boolean) => void;
                    updateAddForBasic: (value: boolean) => void;
                    updateScreenPageLimit: (value: number) => void;
                    updateShareScreenStarted: (value: boolean) => void;
                    updateShared: (value: boolean) => void;
                    updateTargetOrientation: (value: string) => void;
                    updateTargetResolution: (value: string) => void;
                    updateTargetResolutionHost: (value: string) => void;
                    updateVidCons: (value: VidCons) => void;
                    updateFrameRate: (value: number) => void;
                    updateHParams: (value: HParamsType) => void;
                    updateVParams: (value: VParamsType) => void;
                    updateScreenParams: (value: ScreenParamsType) => void;
                    updateAParams: (value: AParamsType) => void;
                    updateRecordingAudioPausesLimit: (value: number) => void;
                    updateRecordingAudioPausesCount: (value: number) => void;
                    updateRecordingAudioSupport: (value: boolean) => void;
                    updateRecordingAudioPeopleLimit: (value: number) => void;
                    updateRecordingAudioParticipantsTimeLimit: (value: number) => void;
                    updateRecordingVideoPausesCount: (value: number) => void;
                    updateRecordingVideoPausesLimit: (value: number) => void;
                    updateRecordingVideoSupport: (value: boolean) => void;
                    updateRecordingVideoPeopleLimit: (value: number) => void;
                    updateRecordingVideoParticipantsTimeLimit: (value: number) => void;
                    updateRecordingAllParticipantsSupport: (value: boolean) => void;
                    updateRecordingVideoParticipantsSupport: (value: boolean) => void;
                    updateRecordingAllParticipantsFullRoomSupport: (value: boolean) => void;
                    updateRecordingVideoParticipantsFullRoomSupport: (value: boolean) => void;
                    updateRecordingPreferredOrientation: (value: string) => void;
                    updateRecordingSupportForOtherOrientation: (value: boolean) => void;
                    updateRecordingMultiFormatsSupport: (value: boolean) => void;
                    updateUserRecordingParams: (value: UserRecordingParams) => void;
                    updateCanRecord: (value: boolean) => void;
                    updateStartReport: (value: boolean) => void;
                    updateEndReport: (value: boolean) => void;
                    updateRecordTimerInterval: (value: NodeJS.Timeout | null) => void;
                    updateRecordStartTime: (value: number) => void;
                    updateRecordElapsedTime: (value: number) => void;
                    updateIsTimerRunning: (value: boolean) => void;
                    updateCanPauseResume: (value: boolean) => void;
                    updateRecordChangeSeconds: (value: number) => void;
                    updatePauseLimit: (value: number) => void;
                    updatePauseRecordCount: (value: number) => void;
                    updateCanLaunchRecord: (value: boolean) => void;
                    updateStopLaunchRecord: (value: boolean) => void;
                    updateParticipantsAll: (value: Participant[]) => void;
                    updateFirstAll: (value: boolean) => void;
                    updateUpdateMainWindow: (value: boolean) => void;
                    updateFirst_round: (value: boolean) => void;
                    updateLandScaped: (value: boolean) => void;
                    updateLock_screen: (value: boolean) => void;
                    updateScreenId: (value: string) => void;
                    updateAllVideoStreams: (value: (Participant | Stream)[]) => void;
                    updateNewLimitedStreams: (value: (Participant | Stream)[]) => void;
                    updateNewLimitedStreamsIDs: (value: string[]) => void;
                    updateActiveSounds: (value: string[]) => void;
                    updateScreenShareIDStream: (value: string) => void;
                    updateScreenShareNameStream: (value: string) => void;
                    updateAdminIDStream: (value: string) => void;
                    updateAdminNameStream: (value: string) => void;
                    updateYouYouStream: (value: (Participant | Stream)[]) => void;
                    updateYouYouStreamIDs: (value: string[]) => void;
                    updateLocalStream: (value: MediaStream | null) => void;
                    updateRecordStarted: (value: boolean) => void;
                    updateRecordResumed: (value: boolean) => void;
                    updateRecordPaused: (value: boolean) => void;
                    updateRecordStopped: (value: boolean) => void;
                    updateAdminRestrictSetting: (value: boolean) => void;
                    updateVideoRequestState: (value: string | null) => void;
                    updateVideoRequestTime: (value: number) => void;
                    updateVideoAction: (value: boolean) => void;
                    updateLocalStreamVideo: (value: MediaStream | null) => void;
                    updateUserDefaultVideoInputDevice: (value: string) => void;
                    updateCurrentFacingMode: (value: string) => void;
                    updatePrevFacingMode: (value: string) => void;
                    updateDefVideoID: (value: string) => void;
                    updateAllowed: (value: boolean) => void;
                    updateDispActiveNames: (value: string[]) => void;
                    updateP_dispActiveNames: (value: string[]) => void;
                    updateActiveNames: (value: string[]) => void;
                    updatePrevActiveNames: (value: string[]) => void;
                    updateP_activeNames: (value: string[]) => void;
                    updateMembersReceived: (value: boolean) => void;
                    updateDeferScreenReceived: (value: boolean) => void;
                    updateHostFirstSwitch: (value: boolean) => void;
                    updateMicAction: (value: boolean) => void;
                    updateScreenAction: (value: boolean) => void;
                    updateChatAction: (value: boolean) => void;
                    updateAudioRequestState: (value: string | null) => void;
                    updateScreenRequestState: (value: string | null) => void;
                    updateChatRequestState: (value: string | null) => void;
                    updateAudioRequestTime: (value: number) => void;
                    updateScreenRequestTime: (value: number) => void;
                    updateChatRequestTime: (value: number) => void;
                    updateOldSoundIds: (value: string[]) => void;
                    updateHostLabel: (value: string) => void;
                    updateMainScreenFilled: (value: boolean) => void;
                    updateLocalStreamScreen: (value: MediaStream | null) => void;
                    updateScreenAlreadyOn: (value: boolean) => void;
                    updateChatAlreadyOn: (value: boolean) => void;
                    updateRedirectURL: (value: string) => void;
                    updateOldAllStreams: (value: (Participant | Stream)[]) => void;
                    updateAdminVidID: (value: string) => void;
                    updateStreamNames: (value: Stream[]) => void;
                    updateNon_alVideoStreams: (value: Participant[]) => void;
                    updateSortAudioLoudness: (value: boolean) => void;
                    updateAudioDecibels: (value: AudioDecibels[]) => void;
                    updateMixed_alVideoStreams: (value: (Participant | Stream)[]) => void;
                    updateNon_alVideoStreams_muted: (value: Participant[]) => void;
                    updatePaginatedStreams: (value: (Participant | Stream)[][]) => void;
                    updateLocalStreamAudio: (value: MediaStream | null) => void;
                    updateDefAudioID: (value: string) => void;
                    updateUserDefaultAudioInputDevice: (value: string) => void;
                    updateUserDefaultAudioOutputDevice: (value: string) => void;
                    updatePrevAudioInputDevice: (value: string) => void;
                    updatePrevVideoInputDevice: (value: string) => void;
                    updateAudioPaused: (value: boolean) => void;
                    updateMainScreenPerson: (value: string) => void;
                    updateAdminOnMainScreen: (value: boolean) => void;
                    updateScreenStates: (value: ScreenState[]) => void;
                    updatePrevScreenStates: (value: ScreenState[]) => void;
                    updateUpdateDateState: (value: number | null) => void;
                    updateLastUpdate: (value: number | null) => void;
                    updateNForReadjustRecord: (value: number) => void;
                    updateFixedPageLimit: (value: number) => void;
                    updateRemoveAltGrid: (value: boolean) => void;
                    updateNForReadjust: (value: number) => void;
                    updateLastReorderTime: (value: number) => void;
                    updateAudStreamNames: (value: Stream[]) => void;
                    updateCurrentUserPage: (value: number) => void;
                    updateMainHeightWidth: (value: number) => void;
                    updatePrevMainHeightWidth: (value: number) => void;
                    updatePrevDoPaginate: (value: boolean) => void;
                    updateDoPaginate: (value: boolean) => void;
                    updateShareEnded: (value: boolean) => void;
                    updateLStreams: (value: (Participant | Stream)[]) => void;
                    updateChatRefStreams: (value: (Participant | Stream)[]) => void;
                    updateControlHeight: (value: number) => void;
                    updateIsWideScreen: (value: boolean) => void;
                    updateIsMediumScreen: (value: boolean) => void;
                    updateIsSmallScreen: (value: boolean) => void;
                    updateAddGrid: (value: boolean) => void;
                    updateAddAltGrid: (value: boolean) => void;
                    updateGridRows: (value: number) => void;
                    updateGridCols: (value: number) => void;
                    updateAltGridRows: (value: number) => void;
                    updateAltGridCols: (value: number) => void;
                    updateNumberPages: (value: number) => void;
                    updateCurrentStreams: (value: (Participant | Stream)[]) => void;
                    updateShowMiniView: (value: boolean) => void;
                    updateNStream: (value: MediaStream | null) => void;
                    updateDefer_receive: (value: boolean) => void;
                    updateAllAudioStreams: (value: (Participant | Stream)[]) => void;
                    updateRemoteScreenStream: (value: Stream[]) => void;
                    updateScreenProducer: (value: Producer | null) => void;
                    updateGotAllVids: (value: boolean) => void;
                    updatePaginationHeightWidth: (value: number) => void;
                    updatePaginationDirection: (value: "horizontal" | "vertical") => void;
                    updateGridSizes: (value: GridSizes) => void;
                    updateScreenForceFullDisplay: (value: boolean) => void;
                    updateMainGridStream: (value: CustomMediaComponent[]) => void;
                    updateOtherGridStreams: (value: CustomMediaComponent[][]) => void;
                    updateAudioOnlyStreams: (value: CustomMediaComponent[]) => void;
                    updateVideoInputs: (value: MediaDeviceInfo[]) => void;
                    updateAudioInputs: (value: MediaDeviceInfo[]) => void;
                    updateMeetingProgressTime: (value: string) => void;
                    updateMeetingElapsedTime: (value: number) => void;
                    updateRef_participants: (value: Participant[]) => void;
                    updateMessages: (value: Message[]) => void;
                    updateStartDirectMessage: (value: boolean) => void;
                    updateDirectMessageDetails: (value: Participant | null) => void;
                    updateShowMessagesBadge: (value: boolean) => void;
                    updateAudioSetting: (value: string) => void;
                    updateVideoSetting: (value: string) => void;
                    updateScreenshareSetting: (value: string) => void;
                    updateChatSetting: (value: string) => void;
                    updateAutoWave: (value: boolean) => void;
                    updateForceFullDisplay: (value: boolean) => void;
                    updatePrevForceFullDisplay: (value: boolean) => void;
                    updatePrevMeetingDisplayType: (value: string) => void;
                    updateWaitingRoomFilter: (value: string) => void;
                    updateWaitingRoomList: (value: WaitingRoomParticipant[]) => void;
                    updateWaitingRoomCounter: (value: number) => void;
                    updateRequestFilter: (value: string) => void;
                    updateRequestList: (value: Request[]) => void;
                    updateRequestCounter: (value: number) => void;
                    updateTotalReqWait: (value: number) => void;
                    updateIsMenuModalVisible: (value: boolean) => void;
                    updateIsRecordingModalVisible: (value: boolean) => void;
                    updateIsSettingsModalVisible: (value: boolean) => void;
                    updateIsRequestsModalVisible: (value: boolean) => void;
                    updateIsWaitingModalVisible: (value: boolean) => void;
                    updateIsCoHostModalVisible: (value: boolean) => void;
                    updateIsMediaSettingsModalVisible: (value: boolean) => void;
                    updateIsDisplaySettingsModalVisible: (value: boolean) => void;
                    updateIsParticipantsModalVisible: (value: boolean) => void;
                    updateIsMessagesModalVisible: (value: boolean) => void;
                    updateIsConfirmExitModalVisible: (value: boolean) => void;
                    updateIsConfirmHereModalVisible: (value: boolean) => void;
                    updateIsLoadingModalVisible: (value: boolean) => void;
                    updateRecordingMediaOptions: (value: string) => void;
                    updateRecordingAudioOptions: (value: string) => void;
                    updateRecordingVideoOptions: (value: string) => void;
                    updateRecordingVideoType: (value: string) => void;
                    updateRecordingVideoOptimized: (value: boolean) => void;
                    updateRecordingDisplayType: (value: "video" | "media" | "all") => void;
                    updateRecordingAddHLS: (value: boolean) => void;
                    updateRecordingAddText: (value: boolean) => void;
                    updateRecordingCustomText: (value: string) => void;
                    updateRecordingCustomTextPosition: (value: string) => void;
                    updateRecordingCustomTextColor: (value: string) => void;
                    updateRecordingNameTags: (value: boolean) => void;
                    updateRecordingBackgroundColor: (value: string) => void;
                    updateRecordingNameTagsColor: (value: string) => void;
                    updateRecordingOrientationVideo: (value: string) => void;
                    updateClearedToResume: (value: boolean) => void;
                    updateClearedToRecord: (value: boolean) => void;
                    updateRecordState: (value: string) => void;
                    updateShowRecordButtons: (value: boolean) => void;
                    updateRecordingProgressTime: (value: string) => void;
                    updateAudioSwitching: (value: boolean) => void;
                    updateVideoSwitching: (value: boolean) => void;
                    updateVideoAlreadyOn: (value: boolean) => void;
                    updateAudioAlreadyOn: (value: boolean) => void;
                    updateComponentSizes: (sizes: ComponentSizes) => void;
                    updateHasCameraPermission: (value: boolean) => void;
                    updateHasAudioPermission: (value: boolean) => void;
                    updateTransportCreated: (value: boolean) => void;
                    updateTransportCreatedVideo: (value: boolean) => void;
                    updateTransportCreatedAudio: (value: boolean) => void;
                    updateTransportCreatedScreen: (value: boolean) => void;
                    updateProducerTransport: (value: Transport | null) => void;
                    updateVideoProducer: (value: Producer | null) => void;
                    updateParams: (value: ProducerOptions) => void;
                    updateVideoParams: (value: ProducerOptions) => void;
                    updateAudioParams: (value: ProducerOptions) => void;
                    updateAudioProducer: (value: Producer | null) => void;
                    updateConsumerTransports: (value: TransportType[]) => void;
                    updateConsumingTransports: (value: string[]) => void;
                    updatePolls: (value: Poll[]) => void;
                    updatePoll: (value: Poll | null) => void;
                    updateIsPollModalVisible: (value: boolean) => void;
                    updateCustomImage: (value: string) => void;
                    updateSelectedImage: (value: string) => void;
                    updateSegmentVideo: (value: MediaStream | null) => void;
                    updateSelfieSegmentation: (value: SelfieSegmentation | null) => void;
                    updatePauseSegmentation: (value: boolean) => void;
                    updateProcessedStream: (value: MediaStream | null) => void;
                    updateKeepBackground: (value: boolean) => void;
                    updateBackgroundHasChanged: (value: boolean) => void;
                    updateVirtualStream: (value: MediaStream | null) => void;
                    updateMainCanvas: (value: HTMLCanvasElement | null) => void;
                    updatePrevKeepBackground: (value: boolean) => void;
                    updateAppliedBackground: (value: boolean) => void;
                    updateIsBackgroundModalVisible: (value: boolean) => void;
                    updateAutoClickBackground: (value: boolean) => void;
                    updateBreakoutRooms: (value: BreakoutParticipant[][]) => void;
                    updateCurrentRoomIndex: (value: number) => void;
                    updateCanStartBreakout: (value: boolean) => void;
                    updateBreakOutRoomStarted: (value: boolean) => void;
                    updateBreakOutRoomEnded: (value: boolean) => void;
                    updateHostNewRoom: (value: number) => void;
                    updateLimitedBreakRoom: (value: BreakoutParticipant[]) => void;
                    updateMainRoomsLength: (value: number) => void;
                    updateMemberRoom: (value: number) => void;
                    updateIsBreakoutRoomsModalVisible: (value: boolean) => void;
                    updateWhiteboardUsers: (value: WhiteboardUser[]) => void;
                    updateCurrentWhiteboardIndex: (value: number) => void;
                    updateCanStartWhiteboard: (value: boolean) => void;
                    updateWhiteboardStarted: (value: boolean) => void;
                    updateWhiteboardEnded: (value: boolean) => void;
                    updateWhiteboardLimit: (value: number) => void;
                    updateIsWhiteboardModalVisible: (value: boolean) => void;
                    updateIsConfigureWhiteboardModalVisible: (value: boolean) => void;
                    updateShapes: (value: Shape[]) => void;
                    updateUseImageBackground: (value: boolean) => void;
                    updateRedoStack: (value: Shape[]) => void;
                    updateUndoStack: (value: string[]) => void;
                    updateCanvasStream: (value: MediaStream | null) => void;
                    updateCanvasWhiteboard: (value: HTMLCanvasElement | null) => void;
                    updateCanvasScreenboard: (value: HTMLCanvasElement | null) => void;
                    updateProcessedScreenStream: (value: MediaStream | null) => void;
                    updateAnnotateScreenStream: (value: boolean) => void;
                    updateMainScreenCanvas: (value: HTMLCanvasElement | null) => void;
                    updateIsScreenboardModalVisible: (value: boolean) => void;
                    checkOrientation: () => "portrait" | "landscape";
                    updateDevice: (value: Device | null) => void;
                    updateSocket: (value: Socket) => void;
                    updateValidated: (value: boolean) => void;
                    showAlert: ({ message, type, duration, }: {
                        message: string;
                        type: "success" | "danger";
                        duration?: number;
                    }) => void;
                    getUpdatedAllParams: any;
                };
            };
            showAspect: boolean;
        };
    };
    recordTimerWidget: {
        component: typeof RecordTimerWidget;
        injector: Injector;
    };
    updateRecordTimerWidget: (recordingProgressTime?: string) => {
        component: any;
        injector: Injector;
    };
    recordButton: {
        icon: import("@fortawesome/fontawesome-common-types").IconDefinition;
        text: string;
        onPress: () => void;
        activeColor: string;
        inActiveColor: string;
        show: boolean;
    }[];
    recordButtons: MainButtonAlt[];
    recordButtonsArray: MainButtonAlt[];
    updateRecordButtons(): Promise<void>;
    menuWidget: {
        component: typeof MenuWidget;
        injector: Injector;
    };
    messageWidget: {
        component: typeof MessageWidget;
        injector: Injector;
    };
    menuRecordWidget: {
        component: typeof MenuRecordWidget;
        injector: Injector;
    };
    updateMenuRecordWidget: (recordButtons?: MainButtonAlt[]) => any;
    menuParticipantsWidget: {
        component: typeof MenuParticipantsWidget;
        injector: Injector;
    };
    updateMenuParticipantsWidget: (count?: number) => any;
    customMenuButtonsArray: MainCustomButton[];
    customMenuButtons: MainCustomButton[];
    updateCustomMenuButtons(): void;
    controlBroadcastButtons: ButtonTouch[];
    updateControlBroadcastButtons(): void;
    controlBroadcastButtonsArray: ButtonTouch[];
    controlChatButtons: ButtonTouch[];
    controlChatButtonsArray: ButtonTouch[];
    updateControlChatButtons(): void;
    screenShareWidget: {
        component: typeof ScreenShareWidget;
        injector: Injector;
    };
    controlButtons: ({
        icon: import("@fortawesome/fontawesome-common-types").IconDefinition;
        alternateIcon: import("@fortawesome/fontawesome-common-types").IconDefinition;
        active: boolean;
        onPress: () => Promise<void>;
        activeColor: string;
        inActiveColor: string;
        disabled: boolean;
        show: boolean;
        alternateIconComponent?: undefined;
        customComponent?: undefined;
        customName?: undefined;
    } | {
        icon: import("@fortawesome/fontawesome-common-types").IconDefinition;
        alternateIconComponent: {
            component: typeof ScreenShareWidget;
            injector: Injector;
        };
        active: boolean;
        onPress: () => Promise<void>;
        activeColor: string;
        inActiveColor: string;
        disabled: boolean;
        show: boolean;
        alternateIcon?: undefined;
        customComponent?: undefined;
        customName?: undefined;
    } | {
        icon: import("@fortawesome/fontawesome-common-types").IconDefinition;
        active: boolean;
        onPress: () => void;
        activeColor: string;
        inActiveColor: string;
        disabled: boolean;
        show: boolean;
        alternateIcon?: undefined;
        alternateIconComponent?: undefined;
        customComponent?: undefined;
        customName?: undefined;
    } | {
        customComponent: {
            component: typeof MenuWidget;
            injector: Injector;
        };
        customName: string;
        onPress: () => void;
        show: boolean;
        icon?: undefined;
        alternateIcon?: undefined;
        active?: undefined;
        activeColor?: undefined;
        inActiveColor?: undefined;
        disabled?: undefined;
        alternateIconComponent?: undefined;
    })[];
    connect_Socket(apiUserName: string, apiKey: string, apiToken: string): Promise<Socket | null>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MediasfuGeneric, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MediasfuGeneric, "app-mediasfu-generic", never, { "PrejoinPage": { "alias": "PrejoinPage"; "required": false; }; "credentials": { "alias": "credentials"; "required": false; }; "useLocalUIMode": { "alias": "useLocalUIMode"; "required": false; }; "seedData": { "alias": "seedData"; "required": false; }; "useSeed": { "alias": "useSeed"; "required": false; }; "imgSrc": { "alias": "imgSrc"; "required": false; }; }, {}, never, never, true, never>;
}
